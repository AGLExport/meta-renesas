From c442f278f05a21920a80d27a0afc725d595b81e7 Mon Sep 17 00:00:00 2001
From: Kazunori Kobayashi <kkobayas@igel.co.jp>
Date: Fri, 12 Oct 2012 18:56:26 +0900
Subject: [PATCH 70/97] ext/dfbvideosink: access tiled image with tile
 boundary offset in caps

This capability can be caught when libshvio needs to read the buffers
that aren't alined to the tile boundary through MERAM. In such case,
the MERAM is written in from the previous tile boundary, and libshvio
reads from the address offset to this parameter.
---
 ext/directfb/dfbvideosink.c |   32 +++++++++++++++++++++++++-------
 ext/directfb/dfbvideosink.h |    2 ++
 2 files changed, 27 insertions(+), 7 deletions(-)

diff --git a/ext/directfb/dfbvideosink.c b/ext/directfb/dfbvideosink.c
index 7c28744..e03f494 100644
--- a/ext/directfb/dfbvideosink.c
+++ b/ext/directfb/dfbvideosink.c
@@ -1611,6 +1611,18 @@ gst_dfbvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
     goto beach;
   }
 #if defined(HAVE_SHMERAM)
+  if (!gst_structure_get_int (structure, "tile_boundary_y_offset",
+          &dfbvideosink->tile_boundary_y_offset)) {
+    dfbvideosink->tile_boundary_y_offset = 0;
+    GST_LOG_OBJECT (dfbvideosink, "can't get tile_boundary_y_offset from caps");
+  }
+
+  if (!gst_structure_get_int (structure, "tile_boundary_c_offset",
+          &dfbvideosink->tile_boundary_c_offset)) {
+    dfbvideosink->tile_boundary_c_offset = 0;
+    GST_LOG_OBJECT (dfbvideosink, "can't get tile_boundary_c_offset from caps");
+  }
+
   stride =
       (dfbvideosink->rowstride >
       0) ? dfbvideosink->rowstride : pixel2byte (video_width, pixel_format);
@@ -2002,10 +2014,13 @@ gst_dfbvideosink_shvio_stretchblit (GstDfbVideoSink * dfbvideosink,
     viosurface[SRC].bpitcha = 4096;
 
     meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[SRC], MExxSSARA,
-        phys[SRC]);
+        phys[SRC] -
+        dfbvideosink->rowstride * dfbvideosink->tile_boundary_y_offset);
     viosurface[SRC].py =
         (void *) (meram_get_icb_address (dfbvideosink->meram,
-            dfbvideosink->icby[SRC], 0) + py_frac);
+            dfbvideosink->icby[SRC],
+            0) + py_frac +
+        viosurface[SRC].bpitchy * dfbvideosink->tile_boundary_y_offset);
 
     if (dfbvideosink->icbc[SRC]) {
       gulong physc, pc_frac;
@@ -2013,11 +2028,14 @@ gst_dfbvideosink_shvio_stretchblit (GstDfbVideoSink * dfbvideosink,
       physc = uiomux_all_virt_to_phys (src_addrc);
       pc_frac = physc & 0x0000000f;
 
-      meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[SRC],
-          MExxSSARA, physc);
-      viosurface[SRC].pc = (void *)
-          (meram_get_icb_address (dfbvideosink->meram, dfbvideosink->icbc[SRC],
-              0) + pc_frac);
+      meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[SRC], MExxSSARA,
+          physc -
+          dfbvideosink->rowstride * dfbvideosink->tile_boundary_c_offset);
+      viosurface[SRC].pc =
+          (void *) (meram_get_icb_address (dfbvideosink->meram,
+              dfbvideosink->icbc[SRC],
+              0) + pc_frac +
+          viosurface[SRC].bpitchc * dfbvideosink->tile_boundary_c_offset);
     } else {
       viosurface[SRC].pc = 0;
     }
diff --git a/ext/directfb/dfbvideosink.h b/ext/directfb/dfbvideosink.h
index a91744e..6f114e6 100644
--- a/ext/directfb/dfbvideosink.h
+++ b/ext/directfb/dfbvideosink.h
@@ -146,6 +146,8 @@ struct _GstDfbVideoSink {
 #define ICB_SRC_C	6
 #define ICB_DST_Y	7
 #define ICB_DST_C	8
+  gint tile_boundary_y_offset;
+  gint tile_boundary_c_offset;
 #endif /* defined(HAVE_SHMERAM) */
 #endif /* defined(HAVE_SHVIO) */
 };
-- 
1.7.10.4


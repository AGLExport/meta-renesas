From a71ec9f6a49fe5aa8a874da58fff8930cf4ae3cf Mon Sep 17 00:00:00 2001
From: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date: Fri, 10 May 2013 14:01:44 +0900
Subject: [PATCH 604/611] mach-shmobile: add R-Car PWM driver

This is a R-Car M1A PWM driver.

Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
---
 arch/arm/mach-shmobile/Kconfig    |   5 +
 arch/arm/mach-shmobile/Makefile   |   1 +
 arch/arm/mach-shmobile/rcar-pwm.c | 447 ++++++++++++++++++++++++++++++++++++++
 3 files changed, 453 insertions(+)
 create mode 100644 arch/arm/mach-shmobile/rcar-pwm.c

diff --git a/arch/arm/mach-shmobile/Kconfig b/arch/arm/mach-shmobile/Kconfig
index 13209b0..9726046 100644
--- a/arch/arm/mach-shmobile/Kconfig
+++ b/arch/arm/mach-shmobile/Kconfig
@@ -124,6 +124,11 @@ config MACH_BOCKW
 	select SND_SOC_AK4554 if SND_SIMPLE_CARD
 	select SND_SOC_AK4642 if SND_SIMPLE_CARD
 
+config RCAR_PWM
+	bool "R-Car PWM driver"
+	depends on MACH_BOCKW
+	help
+
 config MACH_MARZEN
 	bool "MARZEN board"
 	depends on ARCH_R8A7779
diff --git a/arch/arm/mach-shmobile/Makefile b/arch/arm/mach-shmobile/Makefile
index 9887f27..6627e81 100644
--- a/arch/arm/mach-shmobile/Makefile
+++ b/arch/arm/mach-shmobile/Makefile
@@ -42,6 +42,7 @@ obj-$(CONFIG_MACH_MACKEREL)	+= board-mackerel.o
 obj-$(CONFIG_MACH_KOTA2)	+= board-kota2.o
 obj-$(CONFIG_MACH_BONITO)	+= board-bonito.o
 obj-$(CONFIG_MACH_BOCKW)	+= board-bockw.o
+obj-$(CONFIG_RCAR_PWM)		+= rcar-pwm.o
 obj-$(CONFIG_MACH_MARZEN)	+= board-marzen.o
 obj-$(CONFIG_MACH_ARMADILLO800EVA)	+= board-armadillo800eva.o
 obj-$(CONFIG_MACH_KZM9D)	+= board-kzm9d.o
diff --git a/arch/arm/mach-shmobile/rcar-pwm.c b/arch/arm/mach-shmobile/rcar-pwm.c
new file mode 100644
index 0000000..150b35c
--- /dev/null
+++ b/arch/arm/mach-shmobile/rcar-pwm.c
@@ -0,0 +1,447 @@
+/*
+ * R-Car M1A PWM support
+ *
+ * Copyright (C) 2013  Renesas Solutions Corp.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+
+#define PWM_PWMCR	0x00
+#define PWM_PWMCNT	0x04
+
+/* PWMCR */
+#define PWMCR_CC0_MASK	0x000f0000
+#define PWMCR_CC0_SHIFT	16
+#define PWMCR_CCMD	0x00008000
+#define PWMCR_SYNC	0x00000800
+#define PWMCR_SS0	0x00000010
+#define PWMCR_EN0	0x00000001
+
+/* PWMCNT */
+#define PWMCNT_CYC0_MASK	0x03ff0000
+#define PWMCNT_CYC0_SHIFT	16
+#define PWMCNT_PH0_MASK		0x000003ff
+#define PWMCNT_PH0_SHIFT	0
+
+#define RCAR_PWM_MIN_CLOCK_DIVIDE	0
+#define RCAR_PWM_MAX_CLOCK_DIVIDE	24
+
+#define RCAR_PWM_MIN_CYCLE		0x0001
+#define RCAR_PWM_MAX_CYCLE		0x03ff
+#define RCAR_PWM_MIN_HIGH_PERIOD	0x0001
+#define RCAR_PWM_MAX_HIGH_PERIOD	0x03ff
+
+struct rcar_pwm {
+	void __iomem *addr;
+};
+
+static void rcar_pwm_write(struct rcar_pwm *pwm, u32 val, u8 offset)
+{
+	iowrite32(val, pwm->addr + offset);
+}
+
+static u32 rcar_pwm_read(struct rcar_pwm *pwm, u8 offset)
+{
+	return ioread32(pwm->addr + offset);
+}
+
+static void rcar_pwm_mdfy(struct rcar_pwm *pwm, u32 val, u32 pat, u8 offset)
+{
+	u32 tmp;
+
+	tmp = rcar_pwm_read(pwm, offset);
+	tmp &= ~pat;
+	tmp |= val;
+	rcar_pwm_write(pwm, tmp, offset);
+}
+
+static int rcar_pwm_is_settable_cycle(unsigned long cycle, unsigned long period)
+{
+	return cycle > period;
+}
+
+unsigned long rcar_pwm_get_high_period(struct rcar_pwm *pwm)
+{
+	unsigned long period;
+
+	if (!pwm || !pwm->addr)
+		return -ENODEV;
+
+	period = (rcar_pwm_read(pwm, PWM_PWMCNT) & PWMCNT_PH0_MASK);
+	period >>= PWMCNT_PH0_SHIFT;
+
+	return period;
+}
+
+unsigned long rcar_pwm_get_cycle(struct rcar_pwm *pwm)
+{
+	unsigned long cycle;
+
+	if (!pwm || !pwm->addr)
+		return -ENODEV;
+
+	cycle = (rcar_pwm_read(pwm, PWM_PWMCNT) & PWMCNT_CYC0_MASK);
+	cycle >>= PWMCNT_CYC0_SHIFT;
+
+	return cycle;
+}
+
+int rcar_pwm_set_high_period(struct rcar_pwm *pwm, unsigned long period)
+{
+	unsigned long cycle;
+
+	if (!pwm || !pwm->addr)
+		return -ENODEV;
+	if (period < RCAR_PWM_MIN_HIGH_PERIOD ||
+	    period > RCAR_PWM_MAX_HIGH_PERIOD)
+		return -EINVAL;
+
+	cycle = rcar_pwm_get_cycle(pwm);
+	if (cycle == -ENODEV || !rcar_pwm_is_settable_cycle(cycle, period))
+		return -EINVAL;
+
+	period = (period << PWMCNT_PH0_SHIFT) & PWMCNT_PH0_MASK;
+	rcar_pwm_mdfy(pwm, period, PWMCNT_PH0_MASK, PWM_PWMCNT);
+
+	return 0;
+}
+
+int rcar_pwm_set_cycle(struct rcar_pwm *pwm, unsigned long cycle)
+{
+	unsigned long period;
+
+	if (!pwm || !pwm->addr)
+		return -ENODEV;
+	if (cycle < RCAR_PWM_MIN_CYCLE || cycle > RCAR_PWM_MAX_CYCLE)
+		return -EINVAL;
+
+	period = rcar_pwm_get_high_period(pwm);
+	if (period == -ENODEV || !rcar_pwm_is_settable_cycle(cycle, period))
+		return -EINVAL;
+
+	cycle = (cycle << PWMCNT_CYC0_SHIFT) & PWMCNT_CYC0_MASK;
+	rcar_pwm_mdfy(pwm, cycle, PWMCNT_CYC0_MASK, PWM_PWMCNT);
+
+	return 0;
+}
+
+int rcar_pwm_is_single_mode(struct rcar_pwm *pwm)
+{
+	if (!pwm || !pwm->addr)
+		return -ENODEV;
+
+	return !!(rcar_pwm_read(pwm, PWM_PWMCR) & PWMCR_SS0);
+}
+
+int rcar_pwm_disable_single_mode(struct rcar_pwm *pwm)
+{
+	if (!pwm || !pwm->addr)
+		return -ENODEV;
+
+	rcar_pwm_mdfy(pwm, 0, PWMCR_SS0, PWM_PWMCR);
+
+	return 0;
+}
+
+int rcar_pwm_enable_single_mode(struct rcar_pwm *pwm)
+{
+	if (!pwm || !pwm->addr)
+		return -ENODEV;
+
+	rcar_pwm_mdfy(pwm, PWMCR_SS0, PWMCR_SS0, PWM_PWMCR);
+
+	return 0;
+}
+
+int rcar_pwm_get_clock(struct rcar_pwm *pwm)
+{
+	int clock;
+	unsigned long pwmcr_val;
+
+	if (!pwm || !pwm->addr)
+		return -ENODEV;
+
+	pwmcr_val = rcar_pwm_read(pwm, PWM_PWMCR);
+	clock = (pwmcr_val & PWMCR_CC0_MASK) >> PWMCR_CC0_SHIFT;
+	clock <<= 1;	/* Adjust for "clock" */
+	if (pwmcr_val & PWMCR_CCMD)
+		clock++;
+
+	return clock;
+}
+
+int rcar_pwm_set_clock(struct rcar_pwm *pwm, int clock)
+{
+	unsigned long pwmcr_val = 0;
+
+	if (!pwm || !pwm->addr)
+		return -ENODEV;
+	if (clock < RCAR_PWM_MIN_CLOCK_DIVIDE ||
+	    clock > RCAR_PWM_MAX_CLOCK_DIVIDE)
+		return -EINVAL;
+
+	if (clock & 1)
+		pwmcr_val |= PWMCR_CCMD;
+	clock >>= 1;	/* Adjust for PWMCR.CC0 */
+	pwmcr_val |= clock << PWMCR_CC0_SHIFT;
+
+	rcar_pwm_mdfy(pwm, pwmcr_val, PWMCR_CC0_MASK | PWMCR_CCMD, PWM_PWMCR);
+
+	return 0;
+}
+
+int rcar_pwm_is_enable(struct rcar_pwm *pwm)
+{
+	if (!pwm || !pwm->addr)
+		return -ENODEV;
+
+	return !!(rcar_pwm_read(pwm, PWM_PWMCR) & PWMCR_EN0);
+}
+
+int rcar_pwm_disable(struct rcar_pwm *pwm)
+{
+	if (!pwm || !pwm->addr)
+		return -ENODEV;
+
+	rcar_pwm_mdfy(pwm, 0, PWMCR_EN0, PWM_PWMCR);
+
+	return 0;
+}
+
+int rcar_pwm_enable(struct rcar_pwm *pwm)
+{
+	unsigned long cycle, period;
+
+	if (!pwm || !pwm->addr)
+		return -ENODEV;
+
+	cycle = rcar_pwm_get_cycle(pwm);
+	period = rcar_pwm_get_high_period(pwm);
+	if (cycle == -ENODEV || period == -ENODEV ||
+	    !rcar_pwm_is_settable_cycle(cycle, period))
+		return -EINVAL;
+
+	rcar_pwm_mdfy(pwm, PWMCR_EN0, PWMCR_EN0, PWM_PWMCR);
+
+	return 0;
+}
+
+/******* sysfs *******/
+static ssize_t rcar_pwm_store_period(struct device *dev,
+				struct device_attribute *attr, const char *buf,
+				size_t count)
+{
+	struct rcar_pwm *pwm = dev_get_drvdata(dev);
+	int period;
+	int ret;
+
+	sscanf(buf, "%d", &period);
+	ret = rcar_pwm_set_high_period(pwm, period);
+
+	return !ret ? count : ret;
+}
+
+static ssize_t rcar_pwm_show_period(struct device *dev,
+				    struct device_attribute *attr, char *buf)
+{
+	struct rcar_pwm *pwm = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%ld\n", rcar_pwm_get_high_period(pwm));
+}
+
+static ssize_t rcar_pwm_store_cycle(struct device *dev,
+				struct device_attribute *attr, const char *buf,
+				size_t count)
+{
+	struct rcar_pwm *pwm = dev_get_drvdata(dev);
+	int cycle;
+	int ret;
+
+	sscanf(buf, "%d", &cycle);
+	ret = rcar_pwm_set_cycle(pwm, cycle);
+
+	return !ret ? count : ret;
+}
+
+static ssize_t rcar_pwm_show_cycle(struct device *dev,
+				   struct device_attribute *attr, char *buf)
+{
+	struct rcar_pwm *pwm = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%ld\n", rcar_pwm_get_cycle(pwm));
+}
+
+static ssize_t rcar_pwm_store_single(struct device *dev,
+				struct device_attribute *attr, const char *buf,
+				size_t count)
+{
+	struct rcar_pwm *pwm = dev_get_drvdata(dev);
+	int single;
+	int ret;
+
+	sscanf(buf, "%d", &single);
+
+	if (single)
+		ret = rcar_pwm_enable_single_mode(pwm);
+	else
+		ret = rcar_pwm_disable_single_mode(pwm);
+
+	return !ret ? count : ret;
+}
+
+static ssize_t rcar_pwm_show_single(struct device *dev,
+				    struct device_attribute *attr, char *buf)
+{
+	struct rcar_pwm *pwm = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", rcar_pwm_is_single_mode(pwm));
+}
+
+static ssize_t rcar_pwm_store_clock(struct device *dev,
+				struct device_attribute *attr, const char *buf,
+				size_t count)
+{
+	struct rcar_pwm *pwm = dev_get_drvdata(dev);
+	int clock;
+	int ret;
+
+	sscanf(buf, "%d", &clock);
+	ret = rcar_pwm_set_clock(pwm, clock);
+
+	return !ret ? count : ret;
+}
+
+static ssize_t rcar_pwm_show_clock(struct device *dev,
+				    struct device_attribute *attr, char *buf)
+{
+	struct rcar_pwm *pwm = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", rcar_pwm_get_clock(pwm));
+}
+
+static ssize_t rcar_pwm_store_enable(struct device *dev,
+				struct device_attribute *attr, const char *buf,
+				size_t count)
+{
+	struct rcar_pwm *pwm = dev_get_drvdata(dev);
+	int enable;
+	int ret;
+
+	sscanf(buf, "%d", &enable);
+
+	if (enable)
+		ret = rcar_pwm_enable(pwm);
+	else
+		ret = rcar_pwm_disable(pwm);
+
+	return !ret ? count : ret;
+}
+
+static ssize_t rcar_pwm_show_enable(struct device *dev,
+				    struct device_attribute *attr, char *buf)
+{
+	struct rcar_pwm *pwm = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", rcar_pwm_is_enable(pwm));
+}
+
+static struct device_attribute rcar_pwm_device_attributes[] = {
+	__ATTR(enable, 0644, rcar_pwm_show_enable, rcar_pwm_store_enable),
+	__ATTR(clock, 0644, rcar_pwm_show_clock, rcar_pwm_store_clock),
+	__ATTR(single, 0644, rcar_pwm_show_single, rcar_pwm_store_single),
+	__ATTR(cycle, 0644, rcar_pwm_show_cycle, rcar_pwm_store_cycle),
+	__ATTR(period, 0644, rcar_pwm_show_period, rcar_pwm_store_period),
+};
+
+static int rcar_pwm_remove(struct platform_device *pdev)
+{
+	struct rcar_pwm *pwm = dev_get_drvdata(&pdev->dev);
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(rcar_pwm_device_attributes); i++)
+		device_remove_file(&pdev->dev, &rcar_pwm_device_attributes[i]);
+
+	kfree(pwm);
+
+	return 0;
+}
+
+static int rcar_pwm_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	struct rcar_pwm *pwm = 0;
+	void __iomem *addr;
+	int i, ret;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_err(&pdev->dev, "platform_get_resource failed.\n");
+		return -ENODEV;
+	}
+
+	addr = devm_ioremap(&pdev->dev, res->start, resource_size(res));
+	if (!addr) {
+		dev_err(&pdev->dev, "ioremap failed.\n");
+		return -ENOMEM;
+	}
+
+	pwm = kzalloc(sizeof(struct rcar_pwm), GFP_KERNEL);
+	if (!pwm) {
+		dev_err(&pdev->dev, "kzalloc failed.\n");
+		return -ENOMEM;
+	}
+	pwm->addr = addr;
+
+	dev_set_drvdata(&pdev->dev, pwm);
+
+	for (i = 0; i < ARRAY_SIZE(rcar_pwm_device_attributes); i++) {
+		ret = device_create_file(&pdev->dev,
+					 &rcar_pwm_device_attributes[i]);
+		if (ret < 0) {
+			int j;
+			for (j = 0; j < i; j++)
+				device_remove_file(&pdev->dev,
+					&rcar_pwm_device_attributes[j]);
+			dev_err(&pdev->dev, "device_create_file failed\n");
+			goto clean_up;
+		}
+	}
+
+	dev_info(&pdev->dev, "probed\n");
+	return 0;
+
+clean_up:
+	if (pwm)
+		kfree(pwm);
+
+	return ret;
+}
+
+static struct platform_driver rcar_pwm_driver = {
+	.probe =	rcar_pwm_probe,
+	.remove =	rcar_pwm_remove,
+	.driver		= {
+		.name = "rcar-pwm",
+		.owner = THIS_MODULE,
+	},
+};
+
+module_platform_driver(rcar_pwm_driver);
-- 
1.8.2


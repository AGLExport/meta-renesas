From fc92d9297eb107a73bca5b53c1fc2120b2b9de6e Mon Sep 17 00:00:00 2001
From: Hideyuki Sano <hideyuki.sano.dn@renesas.com>
Date: Wed, 5 Jun 2013 14:22:50 +0900
Subject: [PATCH 605/675] watchdog: add R-Car WDT driver.

This is a R-Car M1A WDT driver.

Signed-off-by: Hideyuki Sano <hideyuki.sano.dn@renesas.com>
---
 drivers/watchdog/Kconfig    |   7 +
 drivers/watchdog/Makefile   |   1 +
 drivers/watchdog/rcar_wdt.c | 582 ++++++++++++++++++++++++++++++++++++++++++++
 include/linux/rcar-wdt.h    |  53 ++++
 4 files changed, 643 insertions(+)
 create mode 100644 drivers/watchdog/rcar_wdt.c
 create mode 100644 include/linux/rcar-wdt.h

diff --git a/drivers/watchdog/Kconfig b/drivers/watchdog/Kconfig
index 3709624..23019e3 100644
--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@ -349,6 +349,13 @@ config IMX2_WDT
 	  To compile this driver as a module, choose M here: the
 	  module will be called imx2_wdt.
 
+config RCAR_WDT
+	tristate "R-CarM1 watchdog"
+	depends on ARCH_R8A7778
+	select WATCHDOG_CORE
+	help
+	  R8A7778 internal watchdog timer.
+
 # AVR32 Architecture
 
 config AT32AP700X_WDT
diff --git a/drivers/watchdog/Makefile b/drivers/watchdog/Makefile
index e8f479a..946d442 100644
--- a/drivers/watchdog/Makefile
+++ b/drivers/watchdog/Makefile
@@ -53,6 +53,7 @@ obj-$(CONFIG_STMP3XXX_WATCHDOG) += stmp3xxx_wdt.o
 obj-$(CONFIG_NUC900_WATCHDOG) += nuc900_wdt.o
 obj-$(CONFIG_TS72XX_WATCHDOG) += ts72xx_wdt.o
 obj-$(CONFIG_IMX2_WDT) += imx2_wdt.o
+obj-$(CONFIG_RCAR_WDT) += rcar_wdt.o
 
 # AVR32 Architecture
 obj-$(CONFIG_AT32AP700X_WDT) += at32ap700x_wdt.o
diff --git a/drivers/watchdog/rcar_wdt.c b/drivers/watchdog/rcar_wdt.c
new file mode 100644
index 0000000..b3f2aba
--- /dev/null
+++ b/drivers/watchdog/rcar_wdt.c
@@ -0,0 +1,582 @@
+/*
+ * drivers/watchdog/rcar_wdt.c
+ *
+ * Based on shwdt.c
+ *
+ * Watchdog driver for integrated watchdog in the R-CAR M1A processor.
+ *
+ * Copyright (C) 2013 Renesas Solutions Corp.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 of the License, or (at your
+ * option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/platform_device.h>
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/miscdevice.h>
+#include <linux/watchdog.h>
+#include <linux/reboot.h>
+#include <linux/notifier.h>
+#include <linux/ioport.h>
+#include <linux/fs.h>
+#include <linux/mm.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+#include <linux/rcar-wdt.h>
+
+#define DRV_NAME "rcar-wdt"
+
+static int clock_division_ratio = 10;
+#define next_ping_period(cks)	(jiffies + msecs_to_jiffies(cks))
+
+static const struct watchdog_info rcar_wdt_info;
+static struct platform_device *rcar_wdt_dev;
+static DEFINE_SPINLOCK(rcarwdt_lock);
+
+#define WATCHDOG_HEARTBEAT 30			/* 30 sec default heartbeat */
+static bool nowayout = WATCHDOG_NOWAYOUT;
+static unsigned long next_heartbeat;
+
+struct rcar_wdt {
+	void __iomem		*base;
+	struct device		*dev;
+
+	struct timer_list	timer;
+
+	unsigned long		enabled;
+	char			expect_close;
+	unsigned int		wdtst;
+	int			heartbeat;
+};
+
+static void rcar_wdt_write_st(struct rcar_wdt *wdt,
+					unsigned long val)
+{
+	iowrite32((WDTST_HIGH << 24) | val, wdt->base + WDTST);
+
+}
+
+static void rcar_wdt_write_csr(struct rcar_wdt *wdt,
+					unsigned long val)
+{
+	iowrite32((WDTCSR_HIGH << 24) | val, wdt->base + WDTCSR);
+
+}
+
+static void rcar_wdt_write_bst(struct rcar_wdt *wdt,
+					unsigned long val)
+{
+	iowrite32((WDTBST_HIGH << 24) | val, wdt->base + WDTBST);
+
+}
+
+static unsigned long rcar_wdt_read_csr(struct rcar_wdt *wdt)
+{
+	return ioread32(wdt->base + WDTCSR);
+}
+
+static void rcar_wdt_clk_div(struct rcar_wdt *wdt)
+{
+	struct clk *clkp;
+	unsigned int clkp_rate, clkp_t, bcnt, cnt;
+
+	clkp = clk_get(NULL, "peripheral_clk");
+	clkp_rate = clk_get_rate(clkp);
+
+	/* 2^24[bit] x tPck[ns] = 16.78 x tPck[ms] */
+	/* 66MHz(15ns): BCNT = 16.78 x 15[ns] = 251.7[ms] */
+	clkp_rate = clkp_rate / 100000;
+	clkp_t = 100000 / clkp_rate;
+	bcnt = clkp_t * 1678;
+
+	/* CNT = Heartbeat(s) / BCNT */
+	cnt = (wdt->heartbeat * 1000000) / bcnt;
+	if (((wdt->heartbeat * 1000000) % bcnt) > 4)
+		cnt++;
+
+	wdt->wdtst = cnt;
+}
+
+static void rcar_wdt_start(struct rcar_wdt *wdt)
+{
+	struct rcar_wdt_platform_config *pdata = wdt->dev->platform_data;
+	unsigned long flags;
+	u32 csr;
+
+	spin_lock_irqsave(&rcarwdt_lock, flags);
+
+	next_heartbeat = jiffies + (wdt->heartbeat * HZ);
+	mod_timer(&wdt->timer, next_ping_period(clock_division_ratio));
+
+	csr = rcar_wdt_read_csr(wdt);
+	if (pdata->timermode & WDT_WT_MODE)
+		csr |= CSR_WT_MODE;
+
+	rcar_wdt_write_csr(wdt, csr);
+
+	rcar_wdt_clk_div(wdt);
+
+	rcar_wdt_write_st(wdt, wdt->wdtst);
+	rcar_wdt_write_bst(wdt, 0);
+
+	csr = rcar_wdt_read_csr(wdt);
+	csr |= CSR_TME;
+	rcar_wdt_write_csr(wdt, csr);
+
+	spin_unlock_irqrestore(&rcarwdt_lock, flags);
+}
+
+static void rcar_wdt_stop(struct rcar_wdt *wdt)
+{
+	unsigned long flags;
+	u8 csr;
+
+	spin_lock_irqsave(&rcarwdt_lock, flags);
+
+	del_timer(&wdt->timer);
+
+	csr = rcar_wdt_read_csr(wdt);
+	csr &= ~CSR_TME;
+	rcar_wdt_write_csr(wdt, csr);
+
+	spin_unlock_irqrestore(&rcarwdt_lock, flags);
+}
+
+static inline void rcar_wdt_keepalive(struct rcar_wdt *wdt)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&rcarwdt_lock, flags);
+	next_heartbeat = jiffies + (wdt->heartbeat * HZ);
+	spin_unlock_irqrestore(&rcarwdt_lock, flags);
+}
+
+static int rcar_wdt_set_heartbeat(struct rcar_wdt *wdt, int t)
+{
+	unsigned long flags;
+
+	if (unlikely(t < 1 || t > 1000)) /* PCLK=66MHz 1030s upper limit */
+		return -EINVAL;
+
+	spin_lock_irqsave(&rcarwdt_lock, flags);
+	wdt->heartbeat = t;
+	spin_unlock_irqrestore(&rcarwdt_lock, flags);
+	return 0;
+}
+
+static void rcar_wdt_ping(unsigned long data)
+{
+	struct rcar_wdt *wdt = (struct rcar_wdt *)data;
+	struct rcar_wdt_platform_config *pdata = wdt->dev->platform_data;
+	unsigned long flags;
+
+	spin_lock_irqsave(&rcarwdt_lock, flags);
+	if (time_before(jiffies, next_heartbeat)) {
+		u32 csr;
+
+		csr = rcar_wdt_read_csr(wdt);
+		if (pdata->timermode & WDT_WT_MODE)
+			csr &= ~CSR_WOVF;
+		else
+			csr &= ~CSR_IOVF;
+
+		rcar_wdt_write_csr(wdt, csr);
+
+		rcar_wdt_write_st(wdt, wdt->wdtst);
+		rcar_wdt_write_bst(wdt, 0);
+
+		mod_timer(&wdt->timer, next_ping_period(clock_division_ratio));
+	} else
+		dev_warn(wdt->dev, "Heartbeat lost! Will not ping the watchdog\n");
+	spin_unlock_irqrestore(&rcarwdt_lock, flags);
+	rcar_wdt_keepalive(wdt);
+}
+
+static int rcar_wdt_open(struct inode *inode, struct file *file)
+{
+	struct rcar_wdt *wdt = platform_get_drvdata(rcar_wdt_dev);
+
+	if (test_and_set_bit(0, &wdt->enabled))
+		return -EBUSY;
+	if (nowayout)
+		__module_get(THIS_MODULE);
+
+	file->private_data = wdt;
+
+	rcar_wdt_start(wdt);
+
+	return nonseekable_open(inode, file);
+}
+
+static int rcar_wdt_close(struct inode *inode, struct file *file)
+{
+	struct rcar_wdt *wdt = file->private_data;
+
+	if (wdt->expect_close == 42) {
+		rcar_wdt_stop(wdt);
+	} else {
+		dev_crit(wdt->dev, "Unexpected close, not stopping watchdog!\n");
+		rcar_wdt_keepalive(wdt);
+	}
+
+	clear_bit(0, &wdt->enabled);
+	wdt->expect_close = 0;
+
+	return 0;
+}
+
+static ssize_t rcar_wdt_write(struct file *file, const char *buf,
+			    size_t count, loff_t *ppos)
+{
+	struct rcar_wdt *wdt = file->private_data;
+
+	if (count) {
+		if (!nowayout) {
+			size_t i;
+
+			wdt->expect_close = 0;
+
+			for (i = 0; i != count; i++) {
+				char c;
+				if (get_user(c, buf + i))
+					return -EFAULT;
+				if (c == 'V')
+					wdt->expect_close = 42;
+			}
+		}
+		rcar_wdt_keepalive(wdt);
+	}
+
+	return count;
+}
+
+static long rcar_wdt_ioctl(struct file *file, unsigned int cmd,
+							unsigned long arg)
+{
+	struct rcar_wdt *wdt = file->private_data;
+	int new_heartbeat;
+	int options, retval = -EINVAL;
+
+	switch (cmd) {
+	case WDIOC_GETSUPPORT:
+		return copy_to_user((struct watchdog_info *)arg,
+			  &rcar_wdt_info, sizeof(rcar_wdt_info)) ? -EFAULT : 0;
+	case WDIOC_GETSTATUS:
+	case WDIOC_GETBOOTSTATUS:
+		return put_user(0, (int *)arg);
+	case WDIOC_SETOPTIONS:
+		if (get_user(options, (int *)arg))
+			return -EFAULT;
+
+		if (options & WDIOS_DISABLECARD) {
+			rcar_wdt_stop(wdt);
+			retval = 0;
+		}
+
+		if (options & WDIOS_ENABLECARD) {
+			rcar_wdt_start(wdt);
+			retval = 0;
+		}
+
+		return retval;
+	case WDIOC_KEEPALIVE:
+		rcar_wdt_keepalive(wdt);
+		return 0;
+	case WDIOC_SETTIMEOUT:
+		if (get_user(new_heartbeat, (int *)arg))
+			return -EFAULT;
+
+		if (rcar_wdt_set_heartbeat(wdt, new_heartbeat))
+			return -EINVAL;
+
+		rcar_wdt_keepalive(wdt);
+		/* Fall */
+	case WDIOC_GETTIMEOUT:
+		return put_user(wdt->heartbeat, (int *)arg);
+	default:
+		return -ENOTTY;
+	}
+	return 0;
+}
+
+static int rcar_wdt_notify_sys(struct notifier_block *this,
+			     unsigned long code, void *unused)
+{
+	struct rcar_wdt *wdt = platform_get_drvdata(rcar_wdt_dev);
+
+	if (code == SYS_DOWN || code == SYS_HALT)
+		rcar_wdt_stop(wdt);
+
+	return NOTIFY_DONE;
+}
+
+static const struct file_operations rcar_wdt_fops = {
+	.owner		= THIS_MODULE,
+	.llseek		= no_llseek,
+	.write		= rcar_wdt_write,
+	.unlocked_ioctl	= rcar_wdt_ioctl,
+	.open		= rcar_wdt_open,
+	.release	= rcar_wdt_close,
+};
+
+static const struct watchdog_info rcar_wdt_info = {
+	.options		= WDIOF_KEEPALIVEPING | WDIOF_SETTIMEOUT |
+				  WDIOF_MAGICCLOSE,
+	.firmware_version	= 1,
+	.identity		= "RCAR WDT",
+};
+
+static struct notifier_block rcar_wdt_notifier = {
+	.notifier_call		= rcar_wdt_notify_sys,
+};
+
+static struct miscdevice rcar_wdt_miscdev = {
+	.minor		= WATCHDOG_MINOR,
+	.name		= "watchdog",
+	.fops		= &rcar_wdt_fops,
+};
+
+static ssize_t rcar_wdt_store_heartbeat(struct device *dev,
+				struct device_attribute *attr, const char *buf,
+				size_t count)
+{
+	struct rcar_wdt *wdt = dev_get_drvdata(dev);
+	int val;
+
+	sscanf(buf, "%d", &val);
+	rcar_wdt_stop(wdt);
+
+	rcar_wdt_set_heartbeat(wdt, val);
+
+	rcar_wdt_start(wdt);
+
+	return count;
+}
+
+static ssize_t rcar_wdt_show_heartbeat(struct device *dev,
+			struct device_attribute *attr, char *buf)
+{
+	struct rcar_wdt *wdt = dev_get_drvdata(dev);
+	return sprintf(buf, "%d\n", wdt->heartbeat);
+}
+
+static ssize_t rcar_wdt_store_reboot(struct device *dev,
+				struct device_attribute *attr, const char *buf,
+				size_t count)
+{
+	int val;
+	unsigned long flags;
+
+	sscanf(buf, "%d", &val);
+	if (!val)
+		return count;
+
+	spin_lock_irqsave(&rcarwdt_lock, flags);
+	pr_info("Rebooting a system Now!!\n");
+	while (1) {
+		for (val = 0; val < 1000; val++)
+			udelay(1000);
+	}
+	spin_unlock_irqrestore(&rcarwdt_lock, flags);
+	return count;
+}
+static ssize_t rcar_wdt_show_reboot(struct device *dev,
+			struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n", 0);
+}
+
+static ssize_t rcar_wdt_store_enable(struct device *dev,
+				struct device_attribute *attr, const char *buf,
+				size_t count)
+{
+	struct rcar_wdt *wdt = dev_get_drvdata(dev);
+	int val;
+
+	sscanf(buf, "%d", &val);
+	if (val)
+		rcar_wdt_start(wdt);
+	else
+		rcar_wdt_stop(wdt);
+
+	return count;
+}
+static ssize_t rcar_wdt_show_enable(struct device *dev,
+			struct device_attribute *attr, char *buf)
+{
+	struct rcar_wdt *wdt = dev_get_drvdata(dev);
+	return sprintf(buf, "%d\n",
+			rcar_wdt_read_csr(wdt) & CSR_TME ? 1 : 0);
+}
+
+
+static DEVICE_ATTR(heartbeat, 0666, rcar_wdt_show_heartbeat,
+					rcar_wdt_store_heartbeat);
+static DEVICE_ATTR(reboot, 0666, rcar_wdt_show_reboot, rcar_wdt_store_reboot);
+static DEVICE_ATTR(enable, 0666, rcar_wdt_show_enable, rcar_wdt_store_enable);
+
+static struct attribute *rcar_wdt_attributes[] = {
+	&dev_attr_heartbeat.attr,
+	&dev_attr_reboot.attr,
+	&dev_attr_enable.attr,
+	NULL
+};
+
+static const struct attribute_group rcar_wdt_attr_group = {
+	.attrs	= rcar_wdt_attributes,
+};
+
+static int __devinit rcar_wdt_probe(struct platform_device *pdev)
+{
+	struct rcar_wdt *wdt;
+	struct resource *res;
+	int rc;
+
+	/*
+	 * As this driver only covers the global watchdog case, reject
+	 * any attempts to register per-CPU watchdogs.
+	 */
+	if (pdev->id != -1)
+		return -EINVAL;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (unlikely(!res))
+		return -EINVAL;
+
+	if (!devm_request_mem_region(&pdev->dev, res->start,
+				     resource_size(res), DRV_NAME))
+		return -EBUSY;
+
+	wdt = devm_kzalloc(&pdev->dev, sizeof(struct rcar_wdt), GFP_KERNEL);
+	if (unlikely(!wdt)) {
+		rc = -ENOMEM;
+		goto out_release;
+	}
+
+	wdt->dev = &pdev->dev;
+
+	wdt->base = devm_ioremap(&pdev->dev, res->start, resource_size(res));
+	if (unlikely(!wdt->base)) {
+		rc = -ENXIO;
+		goto out_err;
+	}
+
+	rc = register_reboot_notifier(&rcar_wdt_notifier);
+	if (unlikely(rc)) {
+		dev_err(&pdev->dev,
+			"Can't register reboot notifier (err=%d)\n", rc);
+		goto out_unmap;
+	}
+
+	rcar_wdt_miscdev.parent = wdt->dev;
+
+	rc = misc_register(&rcar_wdt_miscdev);
+	if (unlikely(rc)) {
+		dev_err(&pdev->dev,
+			"Can't register miscdev on minor=%d (err=%d)\n",
+						rcar_wdt_miscdev.minor, rc);
+		goto out_unreg;
+	}
+
+	init_timer(&wdt->timer);
+	wdt->timer.function	= rcar_wdt_ping;
+	wdt->timer.data		= (unsigned long)wdt;
+	wdt->timer.expires	= next_ping_period(clock_division_ratio);
+
+	rc = sysfs_create_group(&pdev->dev.kobj,
+				 &rcar_wdt_attr_group);
+	if (rc != 0) {
+		dev_err(&pdev->dev,
+			"Failed to create attribute group: %d\n", rc);
+		goto out_unreg;
+	}
+
+	platform_set_drvdata(pdev, wdt);
+	rcar_wdt_dev = pdev;
+
+	rcar_wdt_set_heartbeat(wdt, WATCHDOG_HEARTBEAT);
+	rcar_wdt_start(wdt);
+
+	dev_info(&pdev->dev, "initialized.\n");
+	pr_info("configured with heartbeat=%d sec (nowayout=%d)\n",
+		wdt->heartbeat, nowayout);
+
+	return 0;
+
+out_unreg:
+	unregister_reboot_notifier(&rcar_wdt_notifier);
+out_unmap:
+	devm_iounmap(&pdev->dev, wdt->base);
+out_err:
+	devm_kfree(&pdev->dev, wdt);
+out_release:
+	devm_release_mem_region(&pdev->dev, res->start, resource_size(res));
+
+	return rc;
+}
+
+static int __devexit rcar_wdt_remove(struct platform_device *pdev)
+{
+	struct rcar_wdt *wdt = platform_get_drvdata(pdev);
+	struct resource *res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+
+	sysfs_remove_group(&pdev->dev.kobj, &rcar_wdt_attr_group);
+
+	platform_set_drvdata(pdev, NULL);
+
+	misc_deregister(&rcar_wdt_miscdev);
+
+	rcar_wdt_dev = NULL;
+
+	unregister_reboot_notifier(&rcar_wdt_notifier);
+	devm_release_mem_region(&pdev->dev, res->start, resource_size(res));
+	devm_iounmap(&pdev->dev, wdt->base);
+	devm_kfree(&pdev->dev, wdt);
+
+	return 0;
+}
+
+static struct platform_driver rcar_wdt_driver = {
+	.driver		= {
+		.name	= DRV_NAME,
+		.owner	= THIS_MODULE,
+	},
+
+	.probe	= rcar_wdt_probe,
+	.remove	= __devexit_p(rcar_wdt_remove),
+};
+
+static int __init rcar_wdt_init(void)
+{
+	return platform_driver_register(&rcar_wdt_driver);
+}
+
+static void __exit rcar_wdt_exit(void)
+{
+	platform_driver_unregister(&rcar_wdt_driver);
+}
+module_init(rcar_wdt_init);
+module_exit(rcar_wdt_exit);
+
+MODULE_DESCRIPTION("R-CAR watchdog driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:" DRV_NAME);
+MODULE_ALIAS_MISCDEV(WATCHDOG_MINOR);
diff --git a/include/linux/rcar-wdt.h b/include/linux/rcar-wdt.h
new file mode 100644
index 0000000..31fdadc
--- /dev/null
+++ b/include/linux/rcar-wdt.h
@@ -0,0 +1,53 @@
+/***************************************************************************
+ *
+ * Copyright (C) 2013 Renesas Solutions Corp.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+ *
+ ***************************************************************************/
+#ifndef __LINUX_RCARWDT_H__
+#define __LINUX_RCARWDT_H__
+
+#include <linux/watchdog.h>
+#include <linux/io.h>
+
+#define WDTST_HIGH	0x5a
+#define WDTCSR_HIGH	0xa5
+#define WDTBST_HIGH	0x55
+
+#define WDTST	0x00
+#define WDTCSR	0x04
+#define WDTBST	0x08
+#define WDTCNT	0x10
+#define WDTBCNT	0x18
+
+#define WDT_WT_MODE	1
+#define WDT_IT_MODE	0
+
+/* WDTCSR */
+#define CSR_TME		(1 << 7)	/* Timer counter enabled */
+#define CSR_WT_MODE	(1 << 6)	/* Timer Mode is Watchdog */
+#define CSR_IT_MODE	(0 << 6)	/* Timer Mode is Interval */
+#define CSR_WOVF	(1 << 4)	/* Watchdog Timer over flow */
+#define CSR_IOVF	(1 << 3)	/* Interval Timer over flow */
+
+
+/* platform_device configuration data, should be assigned to
+ * the platform_device's dev.platform_data */
+struct rcar_wdt_platform_config {
+	unsigned int timermode;
+};
+
+#endif /* __LINUX_RCARWDT_H__ */
-- 
1.8.2


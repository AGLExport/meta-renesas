From 9b74b6c2a0f1b3ff3849910a01d0bd914076fe28 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Thu, 28 Feb 2013 06:14:22 +0100
Subject: [PATCH 137/138] gp2d work queue, timeout fix, event dealloc fix (was
 kernel oops), extensions for 32bit and matrix

---
 drivers/gpu/drm/gp2d/gp2d_drm_drv.c |    4 +-
 drivers/gpu/drm/gp2d/gp2d_drm_drv.h |   19 ++++--
 drivers/gpu/drm/gp2d/gp2d_drm_gem.c |  122 ++++++++++++++++++++++++++++++-----
 drivers/gpu/drm/gp2d/gp2d_drm_gem.h |    1 +
 4 files changed, 123 insertions(+), 23 deletions(-)

diff --git a/drivers/gpu/drm/gp2d/gp2d_drm_drv.c b/drivers/gpu/drm/gp2d/gp2d_drm_drv.c
index c763f6c..e9e5581 100644
--- a/drivers/gpu/drm/gp2d/gp2d_drm_drv.c
+++ b/drivers/gpu/drm/gp2d/gp2d_drm_drv.c
@@ -204,6 +204,8 @@ static int gp2d_drm_load(struct drm_device *dev, unsigned long flags)
 	}
 #endif
 
+	private->work_queue = create_singlethread_workqueue( "gp2d-drm" );
+
 
 	/* enable clock */
 	pm_runtime_enable(dev->dev);
@@ -279,7 +281,7 @@ static void gp2d_drm_preclose(struct drm_device *dev,
 
 	/* release events of current file */
 	spin_lock_irqsave(&dev->event_lock, flags);
-	list_for_each_entry_safe(e, t, &private->executions, link) {
+	list_for_each_entry_safe(e, t, &private->executions, event.base.link) {
 		if (e->event.base.file_priv == file) {
 			list_del(&e->event.base.link);
 			e->event.base.destroy(&e->event.base);
diff --git a/drivers/gpu/drm/gp2d/gp2d_drm_drv.h b/drivers/gpu/drm/gp2d/gp2d_drm_drv.h
index 8f14248..2b5cd3c 100644
--- a/drivers/gpu/drm/gp2d/gp2d_drm_drv.h
+++ b/drivers/gpu/drm/gp2d/gp2d_drm_drv.h
@@ -66,15 +66,19 @@ struct drm_device;
  * GP2D drm private structure.
  */
 struct gp2d_drm_private {
-     struct drm_device *device;
+	struct drm_device *device;
 
-     unsigned long regs;
-     int irq;
-     int busy;
-     wait_queue_head_t wq;
-     int stop_poller;
+	unsigned long regs;
+	int irq;
+	int busy;
+	unsigned int buffer_serial;
+	unsigned int mode_32bit;
+	wait_queue_head_t wq;
+	int stop_poller;
 
 	struct list_head executions;
+
+	struct workqueue_struct *work_queue;
 };
 
 struct gp2d_executed_pending_event {
@@ -84,7 +88,10 @@ struct gp2d_executed_pending_event {
 
 struct gp2d_execution {
 	struct gp2d_executed_pending_event event;
+
+	/* for running/pending executions, once finished event.base.link is used */
 	struct list_head				link;
+
 	struct gp2d_drm_gem_buf 		    *buffer;
 	struct drm_gem_object		    *obj;
 };
diff --git a/drivers/gpu/drm/gp2d/gp2d_drm_gem.c b/drivers/gpu/drm/gp2d/gp2d_drm_gem.c
index 6b4f6ec..2c5ed8b 100644
--- a/drivers/gpu/drm/gp2d/gp2d_drm_gem.c
+++ b/drivers/gpu/drm/gp2d/gp2d_drm_gem.c
@@ -320,6 +320,16 @@ static struct gp2d_drm_gem_obj *gp2d_drm_gem_init(struct drm_device *dev,
 	return gp2d_gem_obj;
 }
 
+static void
+gp2d_drm_gem_obj_unref_worker(
+	struct work_struct	*work)
+{
+	struct gp2d_drm_gem_obj *gp2d_gem_obj = container_of(work,
+						struct gp2d_drm_gem_obj, work);
+
+	drm_gem_object_unreference_unlocked( (struct drm_gem_object*) gp2d_gem_obj );
+}
+
 struct gp2d_drm_gem_obj *gp2d_drm_gem_create(struct drm_device *dev,
 						unsigned int flags,
 						unsigned long size)
@@ -355,6 +365,9 @@ struct gp2d_drm_gem_obj *gp2d_drm_gem_create(struct drm_device *dev,
 	/* set memory type and cache attribute from user side. */
 	gp2d_gem_obj->flags = flags;
 
+	INIT_WORK(&gp2d_gem_obj->work, gp2d_drm_gem_obj_unref_worker);
+
+
 	/*
 	 * allocate all pages as desired size if user wants to allocate
 	 * physically non-continuous memory.
@@ -613,7 +626,7 @@ gp2d_get_dma_buf_phys( struct gp2d_drm_private *private,
 	struct sg_table		 *table		= NULL;
 
 	buf = dma_buf_get( fd );
-	if (!buf) {
+	if (IS_ERR_OR_NULL(buf)) {
 		printk( "gp2d_get_dma_buf_phys: dma_buf_get(%d) failed!\n", fd );
 		return -ENOENT;
 	}
@@ -648,6 +661,9 @@ error:
 	return ret;
 }
 
+
+#define DUMP_BUFFER (0)
+
 static int
 gp2d_parse_buffer( struct gp2d_drm_private *private,
 			    struct gp2d_drm_gem_buf *buffer )
@@ -667,17 +683,30 @@ gp2d_parse_buffer( struct gp2d_drm_private *private,
 		}														\
 	} while (0)
 
+#if DUMP_BUFFER
+	printk( KERN_DEBUG "gp2d: %s()\n", __FUNCTION__ );
+#endif
+
 	while (n < buffer->size/4) {
 		switch (code[n] & 0xff000000) {
 		case M2DG_OPCODE_TRAP:
+#if DUMP_BUFFER
+			printk( KERN_DEBUG "gp2d: TRAP (0x%08x)\n", code[n] );
+#endif
 			return 0;
 
 		case M2DG_OPCODE_SYNC:
+#if DUMP_BUFFER
+			printk( KERN_DEBUG "gp2d: SYNC (0x%08x)\n", code[n] );
+#endif
 			n += 1;
 			break;
 
 		case M2DG_OPCODE_MOVE:
 		case M2DG_OPCODE_LCOFS:
+#if DUMP_BUFFER
+			printk( KERN_DEBUG "gp2d: MOVE/LCOFS (0x%08x)\n", code[n] );
+#endif
 			REQUIRE_WORDS( 2 );
 			n += 2;
 			break;
@@ -697,6 +726,9 @@ gp2d_parse_buffer( struct gp2d_drm_private *private,
 		case (M2DG_OPCODE_BITBLTA & 0xff000000):
 		case M2DG_OPCODE_BITBLTC:
 		case M2DG_OPCODE_POLYGON_4C:
+#if DUMP_BUFFER
+			printk( KERN_DEBUG "gp2d: BITBLTA/BITBLTC/POLYGON_4C (0x%08x)\n", code[n] );
+#endif
 			REQUIRE_WORDS( 6 );
 			n += 6;
 			break;
@@ -738,6 +770,9 @@ gp2d_parse_buffer( struct gp2d_drm_private *private,
 			break;
 
 		case M2DG_OPCODE_POLYGON_4A:
+#if DUMP_BUFFER
+			printk( KERN_DEBUG "gp2d: POLYGON_4A (0x%08x)\n", code[n] );
+#endif
 			if (!(code[n] & 0x100)) {
 				printk( KERN_ERR "gp2d: invalid draw mode 0x%04x\n", code[n] & 0xffff );
 				return -EPERM;
@@ -747,6 +782,9 @@ gp2d_parse_buffer( struct gp2d_drm_private *private,
 			break;
 
 		case M2DG_OPCODE_WPR:
+#if DUMP_BUFFER
+			printk( KERN_DEBUG "gp2d: WPR (0x%08x)\n", code[n] );
+#endif
 			if (code[n] & 0x600) {
 				printk( KERN_ERR "gp2d: invalid draw mode 0x%04x\n", code[n] & 0xffff );
 				return -EPERM;
@@ -760,6 +798,9 @@ gp2d_parse_buffer( struct gp2d_drm_private *private,
 
 			// TODO: check for which registers get set?
 			for (i=0; i<=(code[n+1] >> 16); i++) {
+#if DUMP_BUFFER
+				printk( KERN_DEBUG "gp2d: Set reg 0x%03x = 0x%08x\n", (code[n+1] & 0xfff) + i*4, code[n+2+i] );
+#endif
 				switch ((code[n+1] & 0xfff) + i*4) {
 				case 0x50:	// RSAR
 					//printk("RSAR 0x%x (%d)\n",code[n+2+i],code[n+2+i]);
@@ -789,12 +830,25 @@ gp2d_parse_buffer( struct gp2d_drm_private *private,
 				case 0xd8:	//
 				case 0xc0:	//
 				case 0xd0:	//
+				case 0x100:	//
+				case 0x104:	//
+				case 0x108:	//
+				case 0x10C:	//
+				case 0x110:	//
+				case 0x114:	//
+				case 0x118:	//
+				case 0x11C:	//
+				case 0x120:	//
+				case 0x124:	//
+					break;
+
 				case 0x1fc:	//
+					private->mode_32bit = code[n+2+i] & 0x01000000;
 //					printk("REG 0x%x = 0x%x\n",(code[n+1] & 0xff) + i*4,code[n+2+i]);
 					break;
 
 				default:
-					printk( KERN_ERR "gp2d: invalid register 0x%02x being set (to 0x%08x)\n", (code[n+1] & 0xff) + i*4, code[n+2+i] );
+					printk( KERN_ERR "gp2d: invalid register 0x%02x being set (to 0x%08x)\n", (code[n+1] & 0xfff) + i*4, code[n+2+i] );
 				}
 			}
 
@@ -802,17 +856,44 @@ gp2d_parse_buffer( struct gp2d_drm_private *private,
 			break;
 
 		case M2DG_OPCODE_LINE_C:
+#if DUMP_BUFFER
+			printk( KERN_DEBUG "gp2d: LINE_C (0x%08x)\n", code[n] );
+#endif
 			if (code[n] & 0x600) {
 				printk( KERN_ERR "gp2d: invalid draw mode 0x%04x\n", code[n] & 0xffff );
 				return -EPERM;
 			}
-			REQUIRE_WORDS( 2 );
-			if ((code[n+1] & 0xffff) < 2) {
-				printk( KERN_ERR "gp2d: invalid line point count %u\n", code[n+1] & 0xffff );
-				return -EPROTO;
+
+			if (private->mode_32bit) {
+				REQUIRE_WORDS( 3 );
+				if ((code[n+2] & 0xffff) < 2) {
+					printk( KERN_ERR "gp2d: invalid line point count %u\n", code[n+2] & 0xffff );
+					return -EPROTO;
+				}
+				REQUIRE_WORDS( 4 + (code[n+2] & 0xffff) );
+#if DUMP_BUFFER
+				printk( KERN_DEBUG "gp2d:   count %u, width %u\n", code[n+2] & 0xffff, code[n+3] );
+				for (i=0; i<(code[n+2] & 0xffff); i++) {
+					printk( KERN_DEBUG "gp2d:   [%u] 0x%08x\n", i, code[n+4+i] );
+				}
+#endif
+				n += 4 + (code[n+2] & 0xffff);
+			}
+			else {
+				REQUIRE_WORDS( 2 );
+				if ((code[n+1] & 0xffff) < 2) {
+					printk( KERN_ERR "gp2d: invalid line point count %u\n", code[n+1] & 0xffff );
+					return -EPROTO;
+				}
+				REQUIRE_WORDS( 3 + (code[n+1] & 0xffff) );
+#if DUMP_BUFFER
+				printk( KERN_DEBUG "gp2d:   count %u, width %u\n", code[n+1] & 0xffff, code[n+2] );
+				for (i=0; i<(code[n+1] & 0xffff); i++) {
+					printk( KERN_DEBUG "gp2d:   [%u] 0x%08x\n", i, code[n+3+i] );
+				}
+#endif
+				n += 3 + (code[n+1] & 0xffff);
 			}
-			REQUIRE_WORDS( 3 + (code[n+1] & 0xffff) );
-			n += 3 + (code[n+1] & 0xffff);
 			break;
 
 		default:
@@ -922,6 +1003,7 @@ int gp2d_drm_waitidle_ioctl(struct drm_device *dev, void *data,
 {
 	int ret;
 	struct gp2d_drm_private *private = dev->dev_private;
+	unsigned int             old_serial;
 
 	DRM_DEBUG_KMS("%s\n", __FILE__);
 
@@ -930,9 +1012,13 @@ int gp2d_drm_waitidle_ioctl(struct drm_device *dev, void *data,
 		return -ENODEV;
 	}
 
-	ret = wait_event_interruptible_timeout( private->wq, !private->busy, 10 * HZ );
-	if (ret < 0)
-		return ret;
+	do {
+		old_serial = private->buffer_serial;
+
+		ret = wait_event_interruptible_timeout( private->wq, !private->busy, 10 * HZ );
+		if (ret < 0)
+			return ret;
+	} while (ret == 0 && old_serial != private->buffer_serial);
 
 	if (ret == 0)
 		return -ETIMEDOUT;
@@ -958,7 +1044,7 @@ gp2d_irq_handler( int irq, void *ctx )
      }
 
      if (status & GP2D_INT_ERROR) {
-          printk( KERN_ERR "%s: error! STATUS 0x%08x!\n", __FUNCTION__, status );
+          printk( KERN_ERR "%s: error! STATUS 0x%08x! Resetting core...\n", __FUNCTION__, status );
 	//	QPRINT( "Resetting hardware..." );
 
 		GP2D_SCLR = GP2D_SCLR_RESET;
@@ -972,8 +1058,6 @@ gp2d_irq_handler( int irq, void *ctx )
 		GP2D_INT_ENABLE   = GP2D_INT_ANY;
 
 	//	QDUMP( "Ready" );
-
-		printk( "GP2D STATUS 0x%08x\n", GP2D_STATUS );
 	}
 	else
 		/* Clear the interrupt. */
@@ -993,7 +1077,8 @@ gp2d_irq_handler( int irq, void *ctx )
 
 			list_del(&exec->link);
 
-			drm_gem_object_unreference_unlocked( exec->obj );
+			queue_work( private->work_queue, &((struct gp2d_drm_gem_obj*) exec->obj)->work );
+			//drm_gem_object_unreference_unlocked( exec->obj );
 
 			list_add_tail(&exec->event.base.link, &file_priv->event_list);
 			wake_up_all(&file_priv->event_wait);
@@ -1003,7 +1088,6 @@ gp2d_irq_handler( int irq, void *ctx )
 //			GP2D_SCLR = 0;
 
 			private->busy = 0;
-			wake_up_all( &private->wq );
 		}
 		else {
 			struct gp2d_execution *exec = list_first_entry( &private->executions, struct gp2d_execution, link );
@@ -1012,6 +1096,12 @@ gp2d_irq_handler( int irq, void *ctx )
 			GP2D_SCLR  = GP2D_SCLR_START;
 		}
 
+		private->buffer_serial++;
+
+		wmb();
+
+		wake_up_all( &private->wq );
+
 		spin_unlock_irqrestore(&dev->event_lock, irq_flags);
      }
 
diff --git a/drivers/gpu/drm/gp2d/gp2d_drm_gem.h b/drivers/gpu/drm/gp2d/gp2d_drm_gem.h
index c9ec98c..2b688a7 100644
--- a/drivers/gpu/drm/gp2d/gp2d_drm_gem.h
+++ b/drivers/gpu/drm/gp2d/gp2d_drm_gem.h
@@ -72,6 +72,7 @@ struct gp2d_drm_gem_obj {
 	struct gp2d_drm_gem_buf	*buffer;
 	unsigned long			size;
 	unsigned int			flags;
+     struct work_struct work;
 };
 
 /* destroy a buffer with gem object */
-- 
1.7.5.4


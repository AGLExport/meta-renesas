From 3dad1ec6803bb2f2627188ce0e957dbeaa57b1be Mon Sep 17 00:00:00 2001
From: Kazunori Kobayashi <kkobayas@igel.co.jp>
Date: Mon, 21 Jan 2013 17:32:00 +0900
Subject: [PATCH 39/39] mpeg4dec: retrieve DCI from codec_data

The REL OMXIL requires a pointer to the first byte in the DCI data
when it is present in the avi extra data field. The client must
determine whether DCI data is present and/or where the first byte
is located and pass that data to the OMXIL.
---
 omx/gstomx_mpeg4dec.c |  267 ++++++++++++++++++++++++++++++++++++++++++++++++-
 omx/gstomx_mpeg4dec.h |   18 ++++
 2 files changed, 282 insertions(+), 3 deletions(-)

diff --git a/omx/gstomx_mpeg4dec.c b/omx/gstomx_mpeg4dec.c
index e585cb3..48fa401 100644
--- a/omx/gstomx_mpeg4dec.c
+++ b/omx/gstomx_mpeg4dec.c
@@ -70,6 +70,265 @@ omx_setup (GstOmxBaseFilter * omx_base)
   omx_mpeg4dec->base_omx_setup (omx_base);
 }
 
+static gint
+gst_omx_mpeg4dec_search_32bit_single_sc (guint8 * data)
+{
+  guint *val;
+  guint startcode;
+  guint code1, code2, code3, code4;
+  const guint8 sc_val[] = {
+    SC_VISUAL_OBJECT_SEQUENCE,
+    SC_VISUAL_OBJECT,
+    SC_STILL_TEXTURE_OBJECT,
+    SC_MESH_OBJECT,
+    SC_FACE_OBJECT
+  };
+  guint i;
+  gint pos = -1;
+
+  val = (guint *) data;
+
+  for (i = 0; i < sizeof (sc_val); i++) {
+    startcode = 0x00000100 | sc_val[i];
+    code1 = GUINT32_FROM_BE (startcode);
+    code2 = GUINT32_FROM_BE (startcode << 24);
+    code3 = GUINT32_FROM_BE (startcode << 16);
+    code4 = GUINT32_FROM_BE (startcode << 8);
+
+    if (*val == code1) {
+      pos = 0;
+      break;
+    }
+#if (G_BYTE_ORDER == G_LITTLE_ENDIAN)
+    if (((*val & 0xffffff00) == 0x01000000) &&
+        ((*(val + 1) & 0x000000ff) == code2)) {
+      pos = 1;
+      break;
+    }
+
+    if (((*val & 0xffff0000) == 0x00000000) &&
+        ((*(val + 1) & 0x0000ffff) == code3)) {
+      pos = 2;
+      break;
+    }
+
+    if (((*val & 0xff000000) == 0x00000000) &&
+        ((*(val + 1) & 0x00ffffff) == code4)) {
+      pos = 3;
+      break;
+    }
+#else
+    if (((*val & 0x00ffffff) == 0x00000001) &&
+        ((*(val + 1) & 0xff000000) == code2)) {
+      pos = 1;
+      break;
+    }
+
+    if (((*val & 0x0000ffff) == 0x00000000) &&
+        ((*(val + 1) & 0xffff0000) == code3)) {
+      pos = 2;
+      break;
+    }
+
+    if (((*val & 0x000000ff) == 0x00000000) &&
+        ((*(val + 1) & 0xffffff00) == code4)) {
+      pos = 3;
+      break;
+    }
+#endif
+  }
+
+  return pos;
+}
+
+static gint
+gst_omx_mpeg4dec_search_32bit_range_sc (guint8 * data)
+{
+  guint *val;
+  const struct range_sc range_sc_val[] = {
+    {SC_VIDEO_OBJECT_MIN, SC_VIDEO_OBJECT_MAX},
+    {SC_VIDEO_OBJECT_LAYER_MIN, SC_VIDEO_OBJECT_LAYER_MAX}
+  };
+  guint i;
+  gint pos = -1;
+
+  val = (guint *) data;
+
+  for (i = 0; i < sizeof (range_sc_val) / sizeof (struct range_sc); i++) {
+    guint8 sc_val = 0;
+
+#if (G_BYTE_ORDER == G_LITTLE_ENDIAN)
+    if ((*val & 0x00ffffff) == 0x00010000) {
+      sc_val = (*val & 0xff000000) >> 24;
+      pos = 0;
+      goto check_sc_val;
+    }
+
+    if (((*val & 0xffffff00) == 0x01000000)) {
+      sc_val = *(val + 1) & 0x000000ff;
+      pos = 1;
+      goto check_sc_val;
+    }
+
+    if (((*val & 0xffff0000) == 0x00000000) &&
+        ((*(val + 1) & 0x000000ff) == 0x00000001)) {
+      sc_val = (*(val + 1) & 0x0000ff00) >> 8;
+      pos = 2;
+      goto check_sc_val;
+    }
+
+    if (((*val & 0xff000000) == 0x00000000) &&
+        ((*(val + 1) & 0x0000ffff) == 0x00000100)) {
+      sc_val = (*(val + 1) & 0x00ff0000) >> 16;
+      pos = 3;
+      goto check_sc_val;
+    }
+#else
+    if ((*val & 0xffffff00) == 0x00000100) {
+      sc_val = *val & 0x000000ff;
+      pos = 0;
+      goto check_sc_val;
+    }
+
+    if (((*val & 0x00ffffff) == 0x00000001)) {
+      sc_val = (*(val + 1) & 0xff000000) >> 24;
+      pos = 1;
+      goto check_sc_val;
+    }
+
+    if (((*val & 0x0000ffff) == 0x00000000) &&
+        ((*(val + 1) & 0xff000000) == 0x01000000)) {
+      sc_val = (*(val + 1) & 0x00ff0000) >> 16;
+      pos = 2;
+      goto check_sc_val;
+    }
+
+    if (((*val & 0x000000ff) == 0x00000000) &&
+        ((*(val + 1) & 0xffff0000) == 0x00010000)) {
+      sc_val = (*(val + 1) & 0x0000ff00) >> 8;
+      pos = 3;
+      goto check_sc_val;
+    }
+#endif
+
+  check_sc_val:
+    if (pos >= 0) {
+      if ((sc_val >= range_sc_val[i].min) && (sc_val <= range_sc_val[i].max))
+        break;
+
+      sc_val = 0;
+      pos = -1;
+    }
+  }
+
+  return pos;
+}
+
+static gint
+gst_omx_mpeg4dec_search_32bit_sc (guint8 * data)
+{
+  gint pos;
+
+  pos = gst_omx_mpeg4dec_search_32bit_single_sc (data);
+  if (pos < 0)
+    pos = gst_omx_mpeg4dec_search_32bit_range_sc (data);
+
+  return pos;
+}
+
+static gint
+gst_omx_mpeg4dec_search_16bit_sc (guint8 * data)
+{
+  guint *val;
+  guint startcode;
+  guint code1, code2, code3, code4;
+
+  val = (guint *) data;
+
+  startcode = SC_3D_MESH_OBJECT;
+  code1 = GUINT32_FROM_BE (startcode << 16);
+  code2 = GUINT32_FROM_BE (startcode << 8);
+  code3 = GUINT32_FROM_BE (startcode);
+  code4 = GUINT32_FROM_BE (startcode << 24);
+
+#if (G_BYTE_ORDER == G_LITTLE_ENDIAN)
+  if ((*val & 0x0000ffff) == code1)
+    return 0;
+
+  if ((*val & 0x00ffff00) == code2)
+    return 1;
+
+  if ((*val & 0xffff0000) == code3)
+    return 2;
+
+  if (((*val & 0xff000000) == 0x00000000) &&
+      ((*(val + 1) & 0x000000ff) == code4))
+    return 3;
+#else
+  if ((*val & 0xffff0000) == code1)
+    return 0;
+
+  if ((*val & 0x00ffff00) == code2)
+    return 1;
+
+  if ((*val & 0x0000ffff) == code3)
+    return 2;
+
+  if (((*val & 0x000000ff) == 0x00000000) &&
+      ((*(val + 1) & 0xff000000) == code4))
+    return 3;
+#endif
+
+  return -1;
+}
+
+static GstBuffer *
+gst_omx_mpeg4dec_retrieve_dci (GstOmxMpeg4Dec * omx_mpeg4dec,
+    const GValue * value)
+{
+  GstBuffer *codec_data, *dci = NULL;
+  guint8 *data;
+  guint size;
+  guint i;
+  guint dci_offs, dci_size = 0;
+
+  codec_data = gst_buffer_ref (gst_value_get_buffer (value));
+  if (codec_data == NULL) {
+    GST_ERROR_OBJECT (omx_mpeg4dec, "couldn't get codec_data from GValue");
+    return NULL;
+  }
+
+  data = GST_BUFFER_DATA (codec_data);
+  size = GST_BUFFER_SIZE (codec_data);
+  for (i = 0; i < size - 4; i += 4) {
+    gint pos;
+
+    pos = gst_omx_mpeg4dec_search_32bit_sc (&data[i]);
+    if (pos < 0)
+      pos = gst_omx_mpeg4dec_search_16bit_sc (&data[i]);
+
+    if (pos >= 0) {
+      /* found */
+      dci_offs = i + pos;
+      dci_size = size - dci_offs;
+      break;
+    }
+  }
+
+  if (dci_size > 0) {
+    dci = gst_buffer_create_sub (codec_data, dci_offs, dci_size);
+    if (dci == NULL) {
+      GST_ERROR_OBJECT (omx_mpeg4dec, "failed to create subbuffer");
+      return NULL;
+    }
+  } else
+    GST_INFO_OBJECT (omx_mpeg4dec, "DCI wasn't found in codec_data");
+
+  gst_buffer_unref (codec_data);
+
+  return dci;
+}
+
 static gboolean
 gst_omx_mpeg4dec_sink_setcaps (GstPad * pad, GstCaps * caps)
 {
@@ -96,9 +355,11 @@ gst_omx_mpeg4dec_sink_setcaps (GstPad * pad, GstCaps * caps)
   if (value != NULL) {
     GstStructure *st;
 
-    omx_mpeg4dec->codec_data = gst_buffer_ref (gst_value_get_buffer (value));
-    GST_INFO_OBJECT (omx_mpeg4dec,
-        "codec_data_length=%d", GST_BUFFER_SIZE (omx_mpeg4dec->codec_data));
+    omx_mpeg4dec->codec_data =
+        gst_omx_mpeg4dec_retrieve_dci (omx_mpeg4dec, value);
+    if (omx_mpeg4dec->codec_data)
+      GST_INFO_OBJECT (omx_mpeg4dec,
+          "DCI data length=%d", GST_BUFFER_SIZE (omx_mpeg4dec->codec_data));
 
     sink_caps = gst_caps_make_writable (sink_caps);
     st = gst_caps_get_structure (sink_caps, 0);
diff --git a/omx/gstomx_mpeg4dec.h b/omx/gstomx_mpeg4dec.h
index 7ab18c9..ee5dd95 100644
--- a/omx/gstomx_mpeg4dec.h
+++ b/omx/gstomx_mpeg4dec.h
@@ -32,6 +32,18 @@ typedef struct GstOmxMpeg4DecClass GstOmxMpeg4DecClass;
 
 #include "gstomx_base_videodec.h"
 
+/* start code value */
+#define SC_VISUAL_OBJECT_SEQUENCE       0xb0
+#define SC_VISUAL_OBJECT                0xb5
+#define SC_STILL_TEXTURE_OBJECT         0xbe
+#define SC_MESH_OBJECT                  0xbc
+#define SC_FACE_OBJECT                  0xba
+#define SC_VIDEO_OBJECT_MIN             0x00
+#define SC_VIDEO_OBJECT_MAX             0x1f
+#define SC_VIDEO_OBJECT_LAYER_MIN       0x20
+#define SC_VIDEO_OBJECT_LAYER_MAX       0x2f
+#define SC_3D_MESH_OBJECT               0x20
+
 struct GstOmxMpeg4Dec
 {
   GstOmxBaseVideoDec omx_base;
@@ -47,6 +59,12 @@ struct GstOmxMpeg4DecClass
   GstOmxBaseVideoDecClass parent_class;
 };
 
+struct range_sc
+{
+  guint8 min;
+  guint8 max;
+};
+
 GType gst_omx_mpeg4dec_get_type (void);
 
 G_END_DECLS
-- 
1.7.9.5


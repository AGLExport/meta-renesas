From 965139e8dafee9eeef83206283e57be5aedd0f6a Mon Sep 17 00:00:00 2001
From: Kazunori Kobayashi <kkobayas@igel.co.jp>
Date: Fri, 26 Apr 2013 15:21:32 +0900
Subject: [PATCH 3/9] ext/dfbvideosink: setup writeback ICBs when set caps
 function is invoked

The initialization of writeback ICBs for each Y and CbCr plane
depends on capabilities that are specified with gst_dfbvideosink_setcaps().
This change moves the initialization from gst_dfbvideosink_setup() to
gst_dfbvideosink_setcaps() so that the ICBs settings are changed
for every gst_dfbvideosink_setcaps() invocation.

Also gst_dfbvideosink_setup_meram() is moved after the pixel format
determination processing in order to set the writeback ICB for CbCr plane
only when YCbCr formats is specified.
---
 ext/directfb/dfbvideosink.c | 144 ++++++++++++++++++++++++--------------------
 1 file changed, 80 insertions(+), 64 deletions(-)

diff --git a/ext/directfb/dfbvideosink.c b/ext/directfb/dfbvideosink.c
index 33b225a..f17e710 100644
--- a/ext/directfb/dfbvideosink.c
+++ b/ext/directfb/dfbvideosink.c
@@ -967,7 +967,6 @@ gst_dfbvideosink_setup (GstDfbVideoSink * dfbvideosink)
   else {
     MERAM_REG *regs;
     gulong val;
-    gulong addr;
 
     dfbvideosink->meram = meram_open ();
     if (dfbvideosink->meram == NULL) {
@@ -981,63 +980,6 @@ gst_dfbvideosink_setup (GstDfbVideoSink * dfbvideosink)
     meram_write_reg (dfbvideosink->meram, regs, MEVCR1, val);
     meram_unlock_reg (dfbvideosink->meram, regs);
     dfbvideosink->icby[SRC].handle = dfbvideosink->icbc[SRC].handle = NULL;
-
-    /* initialize a writeback icb for Y plane */
-    dfbvideosink->icby[DST].handle =
-        gst_dfbvideosink_lock_available_icb (dfbvideosink->meram,
-        &dfbvideosink->icby[DST].index);
-    if (dfbvideosink->icby[DST].handle == NULL) {
-      GST_ELEMENT_ERROR (dfbvideosink, RESOURCE, OPEN_WRITE, (NULL),
-          ("Failed acquiring an ICB for the destination Y plane"));
-      goto beach;
-    }
-    meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST].handle,
-        MExxMCNF, 0x00030000);
-    meram_read_icb (dfbvideosink->meram, dfbvideosink->icby[DST].handle,
-        MExxCTRL, &val);
-    if (val & (7 << 4))
-      meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST].handle,
-          MExxCTRL, val | (7 << 4));
-    meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST].handle,
-        MExxCTRL, 0x90400702);
-    /* NOTE: MExxSBSIZE is setting up afterward, that is in gst_dfbvideosink_setcaps(). */
-    meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST].handle,
-        MExxSSARB, 0);
-    addr =
-        meram_get_icb_address (dfbvideosink->meram,
-        dfbvideosink->icby[DST].handle, 0);
-    uiomux_register ((void *) addr, addr, 4096 * height);
-
-    /* initialize a writeback icb for CbCr plane */
-    if (is_ycbcr (dfb2shvio_format (dfbvideosink->pixel_format))
-        && dfbvideosink->pixel_format != DSPF_UYVY) {
-      dfbvideosink->icbc[DST].handle =
-          gst_dfbvideosink_lock_available_icb (dfbvideosink->meram,
-          &dfbvideosink->icbc[DST].index);
-      if (dfbvideosink->icbc[DST].handle == NULL) {
-        GST_ELEMENT_ERROR (dfbvideosink, RESOURCE, OPEN_WRITE, (NULL),
-            ("Failed acquiring an ICB for the destination CbCr plane"));
-        goto beach;
-      }
-      meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST].handle,
-          MExxMCNF, 0x10030000);
-      meram_read_icb (dfbvideosink->meram, dfbvideosink->icbc[DST].handle,
-          MExxCTRL, &val);
-      if (val & (7 << 4))
-        meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST].handle,
-            MExxCTRL, val | (7 << 4));
-      meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST].handle,
-          MExxCTRL, 0x00500702);
-      /* NOTE: MExxSBSIZE is setting up afterward, that is in gst_dfbvideosink_setcaps(). */
-      meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST].handle,
-          MExxSSARB, 0);
-      addr =
-          meram_get_icb_address (dfbvideosink->meram,
-          dfbvideosink->icbc[DST].handle, 0);
-      uiomux_register ((void *) addr, addr, 4096 * height);
-    } else {
-      dfbvideosink->icbc[DST].handle = NULL;
-    }
   }
 
 #endif /* defined(HAVE_SHMERAM) */
@@ -1772,7 +1714,7 @@ gst_dfbvideosink_setup_meram (GstDfbVideoSink * dfbvideosink, GstCaps * caps,
     dfbvideosink->icbc[SRC].handle = NULL;
   }
 
-  /* set up MExxSBSIZE for the destination surface */
+  /* get stride to set MExxSBSIZE for the destination surface */
   surface =
       (dfbvideosink->ext_surface) ? dfbvideosink->ext_surface : dfbvideosink->
       primary;
@@ -1780,12 +1722,79 @@ gst_dfbvideosink_setup_meram (GstDfbVideoSink * dfbvideosink, GstCaps * caps,
   surface->Unlock (surface);
   if (dfbvideosink->interlaced)
     stride *= 2;
-  if (dfbvideosink->icby[DST].handle)
+
+  /* initialize a writeback icb for Y plane */
+  if (dfbvideosink->icby[DST].handle) {
+    addr =
+        meram_get_icb_address (dfbvideosink->meram,
+        dfbvideosink->icby[DST].handle, 0);
+    uiomux_unregister ((void *) addr);
+    meram_unlock_icb (dfbvideosink->meram, dfbvideosink->icby[DST].handle);
+  }
+  dfbvideosink->icby[DST].handle =
+      gst_dfbvideosink_lock_available_icb (dfbvideosink->meram,
+      &dfbvideosink->icby[DST].index);
+  if (dfbvideosink->icby[DST].handle == NULL) {
+    GST_ELEMENT_ERROR (dfbvideosink, RESOURCE, OPEN_WRITE, (NULL),
+        ("Failed acquiring an ICB for the destination Y plane"));
+    return;
+  }
+  meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST].handle,
+      MExxMCNF, 0x00030000);
+  meram_read_icb (dfbvideosink->meram, dfbvideosink->icby[DST].handle,
+      MExxCTRL, &val);
+  if (val & (7 << 4))
     meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST].handle,
-        MExxSBSIZE, stride);
-  if (dfbvideosink->icbc[DST].handle)
+        MExxCTRL, val | (7 << 4));
+  meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST].handle,
+      MExxCTRL, 0x90400702);
+  meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST].handle,
+      MExxSSARB, 0);
+  meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST].handle,
+      MExxSBSIZE, stride);
+  addr =
+      meram_get_icb_address (dfbvideosink->meram,
+      dfbvideosink->icby[DST].handle, 0);
+  uiomux_register ((void *) addr, addr, 4096 * dfbvideosink->out_height);
+
+  /* initialize a writeback icb for CbCr plane */
+  if (dfbvideosink->icbc[DST].handle) {
+    addr =
+        meram_get_icb_address (dfbvideosink->meram,
+        dfbvideosink->icbc[DST].handle, 0);
+    uiomux_unregister ((void *) addr);
+    meram_unlock_icb (dfbvideosink->meram, dfbvideosink->icbc[DST].handle);
+  }
+  if (is_ycbcr (dfb2shvio_format (dfbvideosink->pixel_format))
+      && dfbvideosink->pixel_format != DSPF_UYVY) {
+    dfbvideosink->icbc[DST].handle =
+        gst_dfbvideosink_lock_available_icb (dfbvideosink->meram,
+        &dfbvideosink->icbc[DST].index);
+    if (dfbvideosink->icbc[DST].handle == NULL) {
+      GST_ELEMENT_ERROR (dfbvideosink, RESOURCE, OPEN_WRITE, (NULL),
+          ("Failed acquiring an ICB for the destination CbCr plane"));
+      return;
+    }
+    meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST].handle,
+        MExxMCNF, 0x10030000);
+    meram_read_icb (dfbvideosink->meram, dfbvideosink->icbc[DST].handle,
+        MExxCTRL, &val);
+    if (val & (7 << 4))
+      meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST].handle,
+          MExxCTRL, val | (7 << 4));
+    meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST].handle,
+        MExxCTRL, 0x00500702);
+    meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST].handle,
+        MExxSSARB, 0);
     meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST].handle,
         MExxSBSIZE, stride);
+    addr =
+        meram_get_icb_address (dfbvideosink->meram,
+        dfbvideosink->icbc[DST].handle, 0);
+    uiomux_register ((void *) addr, addr, 4096 * dfbvideosink->out_height);
+  } else {
+    dfbvideosink->icbc[DST].handle = NULL;
+  }
 }
 #endif /* defined(HAVE_SHMERAM) */
 
@@ -1865,8 +1874,6 @@ gst_dfbvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
     dfbvideosink->tile_boundary_c_offset = 0;
     GST_LOG_OBJECT (dfbvideosink, "can't get tile_boundary_c_offset from caps");
   }
-
-  gst_dfbvideosink_setup_meram (dfbvideosink, caps, video_width, video_height);
 #endif /* defined(HAVE_SHMERAM) */
 #endif /* defined(HAVE_SHVIO) */
 
@@ -1994,6 +2001,15 @@ gst_dfbvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
           dfbvideosink->layer_id, lc.width, lc.height,
           gst_dfbvideosink_get_format_name (lc.pixelformat));
 
+#if defined(HAVE_SHMERAM)
+      /*
+       * Meram setup function must be invoked after the pixel format
+       * determination processing.
+       */
+      gst_dfbvideosink_setup_meram (dfbvideosink, caps, video_width,
+          video_height);
+#endif /* defined(HAVE_SHMERAM) */
+
       /* workaround: recreate the surface after changing the color. */
       if (dfbvideosink->primary) {
         dfbvideosink->primary->Release (dfbvideosink->primary);
-- 
1.8.1.2


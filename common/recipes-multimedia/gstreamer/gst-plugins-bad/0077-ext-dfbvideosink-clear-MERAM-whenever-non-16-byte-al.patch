From d1e54b381b3974f90cf62e487d486458ff6363be Mon Sep 17 00:00:00 2001
From: Katsuya Matsubara <matsu@igel.co.jp>
Date: Thu, 8 Nov 2012 17:06:31 +0900
Subject: [PATCH 77/97] ext/dfbvideosink: clear MERAM whenever non 16-byte
 aligned address or width specified

MERAM must be aligned on 16-byte boundaries. If non-16 byte aligned
address or width is specified for output destination, the MERAM may
write image data with unnessesary data that exists from the previous
16-byte boundary to the address.

This fills out the MERAM with background color data to prevent to
show such the noise in display.
---
 ext/directfb/dfbvideosink.c |   14 ++++++++++++++
 ext/directfb/dfbvideosink.h |    2 ++
 2 files changed, 16 insertions(+)

diff --git a/ext/directfb/dfbvideosink.c b/ext/directfb/dfbvideosink.c
index 6d3b473..3befc2c 100644
--- a/ext/directfb/dfbvideosink.c
+++ b/ext/directfb/dfbvideosink.c
@@ -655,6 +655,7 @@ gst_dfbvideosink_setup (GstDfbVideoSink * dfbvideosink)
   dfbvideosink->hw_scaling = FALSE;
   dfbvideosink->backbuffer = FALSE;
   dfbvideosink->pixel_format = DSPF_UNKNOWN;
+  dfbvideosink->require_clear_meram = true;
 
   /* If we do it all by ourself we create the DirectFB context, get the 
      primary layer and use a fullscreen configuration */
@@ -965,6 +966,7 @@ gst_dfbvideosink_setup (GstDfbVideoSink * dfbvideosink)
       dfbvideosink->icbc[DST] = NULL;
     }
   }
+
 #endif /* defined(HAVE_SHMERAM) */
 #endif /* defined(HAVE_SHVIO) */
 
@@ -2281,6 +2283,14 @@ gst_dfbvideosink_show_frame (GstBaseSink * bsink, GstBuffer * buf)
        modules. For R-CarE1 platform, this must be required.
      */
     ret = meram_lock_memory_block (dfbvideosink->meram, 0, 96);
+
+    /* FIXME: Any color formats should be supported. */
+    if ((dfbvideosink->require_clear_meram)
+        && (dfbvideosink->pixel_format == DSPF_ARGB)) {
+      meram_fill_memory_block (dfbvideosink->meram, 0x40, 16 /* KiB */ ,
+          0xff000000U /* black */ );
+      dfbvideosink->require_clear_meram = false;
+    }
 #endif /* defined(HAVE_SHMERAM) */
     g_mutex_unlock (dfbvideosink->window_lock);
 
@@ -2945,6 +2955,8 @@ gst_dfbvideosink_set_property (GObject * object, guint prop_id,
     case ARG_WINDOW_WIDTH:
       ivalue = g_value_get_int (value);
       g_mutex_lock (dfbvideosink->window_lock);
+      dfbvideosink->require_clear_meram = ((ivalue & 0x03)
+          || ((dfbvideosink->window.x + ivalue) & 0x03));
       dfbvideosink->window.w = ivalue;
       g_mutex_unlock (dfbvideosink->window_lock);
       break;
@@ -2956,6 +2968,8 @@ gst_dfbvideosink_set_property (GObject * object, guint prop_id,
     case ARG_WINDOW_X_OFFSET:
       ivalue = g_value_get_int (value);
       g_mutex_lock (dfbvideosink->window_lock);
+      dfbvideosink->require_clear_meram = ((ivalue & 0x03)
+          || ((dfbvideosink->window.w + ivalue) & 0x03));
       dfbvideosink->window.x = ivalue;
       g_mutex_unlock (dfbvideosink->window_lock);
       break;
diff --git a/ext/directfb/dfbvideosink.h b/ext/directfb/dfbvideosink.h
index 8f62a4b..0fdb5cb 100644
--- a/ext/directfb/dfbvideosink.h
+++ b/ext/directfb/dfbvideosink.h
@@ -133,6 +133,8 @@ struct _GstDfbVideoSink {
     DST = 1,
   };
 
+  gboolean require_clear_meram;
+
   SHVIO *vio;
   gint rowstride;
   gint chroma_byte_offset;
-- 
1.7.10.4


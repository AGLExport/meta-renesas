From 9bf8350d18deb657abbfa61edc776893fc5ded09 Mon Sep 17 00:00:00 2001
From: Katsuya Matsubara <matsu@igel.co.jp>
Date: Thu, 26 Jul 2012 13:47:42 +0900
Subject: [PATCH 44/97] ext/dfbvideosink: allow to specify a sub region in the
 target surface

This change allows client to specify a sub region in the target surface
instead of creating a sub surface. This could help efficient rendering
especially for double-buffered surface since a sub surface cannot be
flipped even if it is double buffered.

The following arguments would be added; window-width, window-height,
window-x, and window-y.
---
 ext/directfb/dfbvideosink.c |   88 ++++++++++++++++++++++++++++++++++++++-----
 ext/directfb/dfbvideosink.h |    3 +-
 2 files changed, 80 insertions(+), 11 deletions(-)

diff --git a/ext/directfb/dfbvideosink.c b/ext/directfb/dfbvideosink.c
index 8ec3b34..adb6238 100644
--- a/ext/directfb/dfbvideosink.c
+++ b/ext/directfb/dfbvideosink.c
@@ -124,7 +124,11 @@ enum
   ARG_SATURATION,
   ARG_PIXEL_ASPECT_RATIO,
   ARG_VSYNC,
-  ARG_KEEP_ASPECT_RATIO
+  ARG_KEEP_ASPECT_RATIO,
+  ARG_WINDOW_WIDTH,
+  ARG_WINDOW_HEIGHT,
+  ARG_WINDOW_X_OFFSET,
+  ARG_WINDOW_Y_OFFSET
 };
 
 static void gst_dfbvideosink_bufferpool_clear (GstDfbVideoSink * dfbvideosink);
@@ -555,6 +559,8 @@ static gboolean
 gst_dfbvideosink_setup (GstDfbVideoSink * dfbvideosink)
 {
   DFBResult ret;
+  IDirectFBSurface *surface;
+  gint width, height;
 
   g_return_val_if_fail (GST_IS_DFBVIDEOSINK (dfbvideosink), FALSE);
 
@@ -773,6 +779,7 @@ gst_dfbvideosink_setup (GstDfbVideoSink * dfbvideosink)
 
     dfbvideosink->primary->GetPixelFormat (dfbvideosink->primary,
         &dfbvideosink->pixel_format);
+    surface = dfbvideosink->primary;
   } else {
     DFBSurfaceCapabilities s_caps;
 
@@ -792,8 +799,23 @@ gst_dfbvideosink_setup (GstDfbVideoSink * dfbvideosink)
     GST_DEBUG_OBJECT (dfbvideosink, "external surface is %dx%d and uses %s "
         "pixel format", dfbvideosink->out_width, dfbvideosink->out_height,
         gst_dfbvideosink_get_format_name (dfbvideosink->pixel_format));
+    surface = dfbvideosink->ext_surface;
   }
 
+  /* sanity check of size and geometry for the target window */
+  surface->GetSize (surface, &width, &height);
+  if (dfbvideosink->window.w == 0)
+    dfbvideosink->window.w = width;
+  if (dfbvideosink->window.h == 0)
+    dfbvideosink->window.h = height;
+  if (dfbvideosink->window.x >= width) {
+    GST_WARNING_OBJECT (dfbvideosink, "Too large x-offset, wrapped.");
+    dfbvideosink->window.x %= width;
+  }
+  if (dfbvideosink->window.y >= height) {
+    GST_WARNING_OBJECT (dfbvideosink, "Too large y-offset, wrapped.");
+    dfbvideosink->window.y %= height;
+  }
 #if defined(HAVE_SHVIO)
   GST_DEBUG_OBJECT (dfbvideosink, "initializing libshvio");
   dfbvideosink->vio = shvio_open_named ("VIO");
@@ -1708,9 +1730,12 @@ gst_dfbvideosink_center_rect (GstVideoRectangle src, GstVideoRectangle dst,
   if (scaling && !keep_aspect_ratio) {
     result->w = dst.w;
     result->h = dst.h;
-    result->x = result->y = 0;
+    result->x = dst.x;
+    result->y = dst.y;
   } else {
     gst_video_sink_center_rect (src, dst, result, scaling);
+    result->x += dst.x;
+    result->y += dst.y;
   }
 }
 
@@ -1719,7 +1744,7 @@ gst_dfbvideosink_show_frame (GstBaseSink * bsink, GstBuffer * buf)
 {
   GstDfbVideoSink *dfbvideosink = NULL;
   DFBResult res;
-  GstVideoRectangle dst, src, result;
+  GstVideoRectangle src, result;
   GstFlowReturn ret = GST_FLOW_OK;
   gboolean mem_cpy = TRUE;
 
@@ -1803,14 +1828,15 @@ gst_dfbvideosink_show_frame (GstBaseSink * bsink, GstBuffer * buf)
       goto beach;
     }
 #endif
-    res = surface->GetSize (surface, &dst.w, &dst.h);
 
     /* Center / Clip */
 #if defined(HAVE_SHVIO)
-    gst_dfbvideosink_center_rect (src, dst, &result, TRUE,
+    gst_dfbvideosink_center_rect (src, dfbvideosink->window, &result, TRUE,
         dfbvideosink->keep_ar);
 #else
-    gst_video_sink_center_rect (src, dst, &result, FALSE);
+    gst_video_sink_center_rect (src, dfbvideosink->window, &result, FALSE);
+    result.x += dfbvideosink->window.x;
+    result.y += dfbvideosink->window.y;
 #endif
 
     res =
@@ -1936,16 +1962,14 @@ gst_dfbvideosink_show_frame (GstBaseSink * bsink, GstBuffer * buf)
     src.w = GST_VIDEO_SINK_WIDTH (dfbvideosink);
     src.h = GST_VIDEO_SINK_HEIGHT (dfbvideosink);
 
-    dfbvideosink->primary->GetSize (dfbvideosink->primary, &dst.w, &dst.h);
-
     /* Unlocking surface before blit */
     if (surface->locked) {
       surface->surface->Unlock (surface->surface);
       surface->locked = FALSE;
     }
 
-    gst_dfbvideosink_center_rect (src, dst, &result, dfbvideosink->hw_scaling,
-        dfbvideosink->keep_ar);
+    gst_dfbvideosink_center_rect (src, dfbvideosink->window, &result,
+        dfbvideosink->hw_scaling, dfbvideosink->keep_ar);
 
     /* If we are not using Flip we wait for VSYNC before blit */
     if (!dfbvideosink->backbuffer && dfbvideosink->vsync) {
@@ -2479,6 +2503,18 @@ gst_dfbvideosink_set_property (GObject * object, guint prop_id,
     case ARG_KEEP_ASPECT_RATIO:
       dfbvideosink->keep_ar = g_value_get_boolean (value);
       break;
+    case ARG_WINDOW_WIDTH:
+      dfbvideosink->window.w = g_value_get_int (value);
+      break;
+    case ARG_WINDOW_HEIGHT:
+      dfbvideosink->window.h = g_value_get_int (value);
+      break;
+    case ARG_WINDOW_X_OFFSET:
+      dfbvideosink->window.x = g_value_get_int (value);
+      break;
+    case ARG_WINDOW_Y_OFFSET:
+      dfbvideosink->window.y = g_value_get_int (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -2517,6 +2553,18 @@ gst_dfbvideosink_get_property (GObject * object, guint prop_id,
     case ARG_KEEP_ASPECT_RATIO:
       g_value_set_boolean (value, dfbvideosink->keep_ar);
       break;
+    case ARG_WINDOW_WIDTH:
+      g_value_set_int (value, dfbvideosink->window.w);
+      break;
+    case ARG_WINDOW_HEIGHT:
+      g_value_set_int (value, dfbvideosink->window.h);
+      break;
+    case ARG_WINDOW_X_OFFSET:
+      g_value_set_int (value, dfbvideosink->window.x);
+      break;
+    case ARG_WINDOW_Y_OFFSET:
+      g_value_set_int (value, dfbvideosink->window.y);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -2606,6 +2654,10 @@ gst_dfbvideosink_init (GstDfbVideoSink * dfbvideosink)
   dfbvideosink->event_thread = NULL;
 
   dfbvideosink->ext_surface = NULL;
+  dfbvideosink->window.w = 0;
+  dfbvideosink->window.h = 0;
+  dfbvideosink->window.x = 0;
+  dfbvideosink->window.y = 0;
 
   dfbvideosink->pixel_format = DSPF_UNKNOWN;
 
@@ -2688,6 +2740,22 @@ gst_dfbvideosink_class_init (GstDfbVideoSinkClass * klass)
       g_param_spec_boolean ("keep-aspect-ratio", "Keep Aspect Ratio",
           "Keep image aspect ratio if it will be scaled", TRUE,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+  g_object_class_install_property (gobject_class, ARG_WINDOW_WIDTH,
+      g_param_spec_int ("window-width", "Window width",
+          "The width of window in the target surface", 0, G_MAXINT, 0,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+  g_object_class_install_property (gobject_class, ARG_WINDOW_HEIGHT,
+      g_param_spec_int ("window-height", "Window height",
+          "The height of window in the target surface", 0, G_MAXINT, 0,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+  g_object_class_install_property (gobject_class, ARG_WINDOW_X_OFFSET,
+      g_param_spec_int ("window-x", "Window x-offset",
+          "The x-axis offset of window in the target surface", 0, G_MAXINT, 0,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+  g_object_class_install_property (gobject_class, ARG_WINDOW_Y_OFFSET,
+      g_param_spec_int ("window-y", "Window y-offset",
+          "The y-axis offset of window in the target surface", 0, G_MAXINT, 0,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
   gstelement_class->change_state = gst_dfbvideosink_change_state;
 
diff --git a/ext/directfb/dfbvideosink.h b/ext/directfb/dfbvideosink.h
index 1bc5406..d5b4482 100644
--- a/ext/directfb/dfbvideosink.h
+++ b/ext/directfb/dfbvideosink.h
@@ -102,7 +102,8 @@ struct _GstDfbVideoSink {
   
   /* Embedded */
   IDirectFBSurface *ext_surface;
-  
+  GstVideoRectangle window;
+
   DFBSurfacePixelFormat pixel_format;
   
   gboolean hw_scaling;
-- 
1.7.10.4


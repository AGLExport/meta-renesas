From 4689fa8ef2f53da1321b3bbe23787dca59bf4979 Mon Sep 17 00:00:00 2001
From: Katsuya Matsubara <matsu@igel.co.jp>
Date: Fri, 21 Sep 2012 19:43:37 +0900
Subject: [PATCH 62/97] ext/dfbvideosink: adjust alignment of output image's
 width for MERAM

This adjusts alignment of output image's width because each line of image
in MERAM must be aligned on 16-byte boundaries.
---
 ext/directfb/dfbvideosink.c |  121 ++++++++++++++++++++++++++-----------------
 1 file changed, 73 insertions(+), 48 deletions(-)

diff --git a/ext/directfb/dfbvideosink.c b/ext/directfb/dfbvideosink.c
index 5e53bd8..d2fbe37 100644
--- a/ext/directfb/dfbvideosink.c
+++ b/ext/directfb/dfbvideosink.c
@@ -2186,6 +2186,10 @@ gst_dfbvideosink_show_frame (GstBaseSink * bsink, GstBuffer * buf)
     gint line;
 #if defined(HAVE_SHVIO)
     DFBSurfacePixelFormat src_format, dst_format;
+    guint8 *src_datay, *src_datac;
+#if defined(HAVE_SHMERAM)
+    gint surplus;
+#endif
 #endif
 
     /* As we are not blitting no acceleration is possible. If the surface is
@@ -2215,8 +2219,38 @@ gst_dfbvideosink_show_frame (GstBaseSink * bsink, GstBuffer * buf)
 
     /* Center / Clip */
 #if defined(HAVE_SHVIO)
+    res = surface->GetPixelFormat (surface, &dst_format);
+    if (res != DFB_OK) {
+      GST_WARNING_OBJECT (dfbvideosink,
+          "failed getting pixel format from surface");
+      ret = GST_FLOW_UNEXPECTED;
+      goto beach;
+    }
+
     gst_dfbvideosink_center_rect (src, dfbvideosink->window, &result, TRUE,
         dfbvideosink->keep_ar);
+#if defined(HAVE_SHMERAM)
+    /* adjust the destination width
+       since MERAM imposes 16-byte alignment on it */
+    surplus = result.w % byte2pixel (16, dst_format);
+    if (surplus > 0) {
+      if (dfbvideosink->keep_ar) {
+        gint new_w, new_h;
+
+        /* tweak scaling factor */
+        new_w = result.w - surplus;
+        new_h = result.h * (gdouble) new_w / result.w;
+        result.x += surplus / 2;
+        result.y += (result.h - new_h) / 2;
+        result.w = new_w;
+        result.h = new_h;
+      } else {
+        /* cut off the surplus of width */
+        result.w -= surplus;
+        result.x += surplus / 2;
+      }
+    }
+#endif
 #else
     gst_video_sink_center_rect (src, dfbvideosink->window, &result, FALSE);
     result.x += dfbvideosink->window.x;
@@ -2256,60 +2290,51 @@ gst_dfbvideosink_show_frame (GstBaseSink * bsink, GstBuffer * buf)
       return GST_FLOW_UNEXPECTED;
     }
 
-    res = surface->GetPixelFormat (surface, &dst_format);
-    if (res != DFB_OK) {
-      GST_WARNING_OBJECT (dfbvideosink,
-          "failed getting pixel format from surface");
-      ret = GST_FLOW_UNEXPECTED;
-      goto beach;
-    } else {
-      guint8 *src_datay, *src_datac;
-      if (dfbvideosink->interlaced) {
-        gint is_src_odd, is_dst_odd;
-
-        /* Render top field at first */
-        src_datay = GST_BUFFER_DATA (buf);
-        src_datac = src_datay + dfbvideosink->chroma_byte_offset;
-        is_src_odd = src.h % 2;
-        src.h /= 2;
-        is_dst_odd = result.h % 2;
-        result.h /= 2;
-        ret =
-            gst_dfbvideosink_shvio_stretchblit (dfbvideosink, src_datay,
-            src_datac, &src, src_format, src_pitch, data, &result, dst_format,
-            dest_pitch * 2);
-        if (ret != GST_FLOW_OK)
-          GST_WARNING_OBJECT (dfbvideosink,
-              "failed bliting an interlaced image with VIO");
-
-        /* Then, prepare for rendering the bottom field */
-        src.h += is_src_odd;
-        result.h += is_dst_odd;
-        src_datay += dfbvideosink->chroma_byte_offset / 2;
-        src_datac = src_datay + dfbvideosink->chroma_byte_offset * 3 / 4;
-        data += dest_pitch;     /* step into the next line */
-        dest_pitch *= 2;        /* skip 1 line per rendering */
-      } else {
-        src_datay = GST_BUFFER_DATA (buf);
-        src_datac = src_datay + dfbvideosink->chroma_byte_offset;
-      }
+    if (dfbvideosink->interlaced) {
+      gint is_src_odd, is_dst_odd;
+
+      /* Render top field at first */
+      src_datay = GST_BUFFER_DATA (buf);
+      src_datac = src_datay + dfbvideosink->chroma_byte_offset;
+      is_src_odd = src.h % 2;
+      src.h /= 2;
+      is_dst_odd = result.h % 2;
+      result.h /= 2;
       ret =
           gst_dfbvideosink_shvio_stretchblit (dfbvideosink, src_datay,
           src_datac, &src, src_format, src_pitch, data, &result, dst_format,
-          dest_pitch);
+          dest_pitch * 2);
       if (ret != GST_FLOW_OK)
-        GST_WARNING_OBJECT (dfbvideosink, "failed bliting an image with VIO");
-      if ((ret != GST_FLOW_OK) && (dst_format == src_format)) {
+        GST_WARNING_OBJECT (dfbvideosink,
+            "failed bliting an interlaced image with VIO");
+
+      /* Then, prepare for rendering the bottom field */
+      src.h += is_src_odd;
+      result.h += is_dst_odd;
+      src_datay += dfbvideosink->chroma_byte_offset / 2;
+      src_datac = src_datay + dfbvideosink->chroma_byte_offset * 3 / 4;
+      data += dest_pitch;       /* step into the next line */
+      dest_pitch *= 2;          /* skip 1 line per rendering */
+    } else {
+      src_datay = GST_BUFFER_DATA (buf);
+      src_datac = src_datay + dfbvideosink->chroma_byte_offset;
+    }
+    ret =
+        gst_dfbvideosink_shvio_stretchblit (dfbvideosink, src_datay,
+        src_datac, &src, src_format, src_pitch, data, &result, dst_format,
+        dest_pitch);
+    if (ret != GST_FLOW_OK)
+      GST_WARNING_OBJECT (dfbvideosink, "failed bliting an image with VIO");
+    if ((ret != GST_FLOW_OK) && (dst_format == src_format)) {
 #endif /* defined(HAVE_SHVIO) */
-        /* Write each line respecting subsurface pitch */
-        for (line = 0; line < result.h; line++) {
-          /* We do clipping */
-          memcpy (data, GST_BUFFER_DATA (buf) + (line * src_pitch),
-              MIN (src_pitch, dest_pitch));
-          data += dest_pitch;
-        }
-#if defined(HAVE_SHVIO)
+      /* Write each line respecting subsurface pitch */
+      for (line = 0; line < result.h; line++) {
+        /* We do clipping */
+        memcpy (data, GST_BUFFER_DATA (buf) + (line * src_pitch),
+            MIN (src_pitch, dest_pitch));
+        data += dest_pitch;
       }
+#if defined(HAVE_SHVIO)
     }
 #endif /* defined(HAVE_SHVIO) */
 
-- 
1.7.10.4


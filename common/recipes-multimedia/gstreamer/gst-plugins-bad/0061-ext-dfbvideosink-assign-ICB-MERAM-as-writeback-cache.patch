From 70227d0682a2b325b90b7099223154b49831c7ce Mon Sep 17 00:00:00 2001
From: Katsuya Matsubara <matsu@igel.co.jp>
Date: Mon, 15 Oct 2012 10:13:27 +0900
Subject: [PATCH 61/97] ext/dfbvideosink: assign ICB MERAM as writeback cache
 for VIO-to-SDRAM I/O

Unfortunately ICB MERAM setting in this change must be hard-code
for R-CarE1 platforms because of no framework for supporting
dynamic configuration of ICB MERAM.
NOTE: This change must impose the 16-byte alignment restriction
on image width and x-offset of the destination because of the MERAM
specification.
---
 ext/directfb/dfbvideosink.c |  164 ++++++++++++++++++++++++++++++++++---------
 ext/directfb/dfbvideosink.h |    6 +-
 2 files changed, 135 insertions(+), 35 deletions(-)

diff --git a/ext/directfb/dfbvideosink.c b/ext/directfb/dfbvideosink.c
index 31c66f7..5e53bd8 100644
--- a/ext/directfb/dfbvideosink.c
+++ b/ext/directfb/dfbvideosink.c
@@ -908,9 +908,7 @@ gst_dfbvideosink_setup (GstDfbVideoSink * dfbvideosink)
   else {
     MERAM_REG *regs;
     gulong val;
-    gint stride;
-    guint8 *data;
-    DFBResult res;
+    gulong addr;
 
     dfbvideosink->meram = meram_open ();
     if (dfbvideosink->meram == NULL)
@@ -923,13 +921,46 @@ gst_dfbvideosink_setup (GstDfbVideoSink * dfbvideosink)
     meram_unlock_reg (dfbvideosink->meram, regs);
     dfbvideosink->icby[SRC] = dfbvideosink->icbc[SRC] = NULL;
 
-    /* get byte-stride of the target surface */
-    res = surface->Lock (surface, DSLF_WRITE, (void *) &data, &stride);
-    if (res != DFB_OK) {
-      GST_WARNING_OBJECT (dfbvideosink, "failed locking the external "
-          "subsurface for writing");
+    /* initialize a writeback icb for Y plane */
+    dfbvideosink->icby[DST] = meram_lock_icb (dfbvideosink->meram, ICB_DST_Y);
+    meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST], MExxMCNF,
+        0x00030000);
+    meram_read_icb (dfbvideosink->meram, dfbvideosink->icby[DST], MExxCTRL,
+        &val);
+    if (val & (7 << 4))
+      meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST], MExxCTRL,
+          val | (7 << 4));
+    meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST], MExxCTRL,
+        0x90400702);
+    /* NOTE: MExxSBSIZE is setting up afterward, that is in gst_dfbvideosink_setcaps(). */
+    meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST], MExxSSARB,
+        0);
+    addr =
+        meram_get_icb_address (dfbvideosink->meram, dfbvideosink->icby[DST], 0);
+    uiomux_register ((void *) addr, addr, 4096 * height);
+
+    /* initialize a writeback icb for CbCr plane */
+    if (is_ycbcr (dfb2shvio_format (dfbvideosink->pixel_format))
+        && dfbvideosink->pixel_format != DSPF_UYVY) {
+      dfbvideosink->icbc[DST] = meram_lock_icb (dfbvideosink->meram, ICB_DST_C);
+      meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST], MExxMCNF,
+          0x10030000);
+      meram_read_icb (dfbvideosink->meram, dfbvideosink->icbc[DST], MExxCTRL,
+          &val);
+      if (val & (7 << 4))
+        meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST], MExxCTRL,
+            val | (7 << 4));
+      meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST], MExxCTRL,
+          0x00500702);
+      /* NOTE: MExxSBSIZE is setting up afterward, that is in gst_dfbvideosink_setcaps(). */
+      meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST], MExxSSARB,
+          0);
+      addr =
+          meram_get_icb_address (dfbvideosink->meram, dfbvideosink->icbc[DST],
+          0);
+      uiomux_register ((void *) addr, addr, 4096 * height);
     } else {
-      surface->Unlock (surface);
+      dfbvideosink->icbc[DST] = NULL;
     }
   }
 #endif /* defined(HAVE_SHMERAM) */
@@ -1009,13 +1040,16 @@ gst_dfbvideosink_cleanup (GstDfbVideoSink * dfbvideosink)
     dfbvideosink->vio = NULL;
 #if defined(HAVE_SHMERAM)
     if (dfbvideosink->meram) {
-      if (dfbvideosink->icby[SRC]) {
-        meram_unlock_icb (dfbvideosink->meram, dfbvideosink->icby[SRC]);
-        dfbvideosink->icby[SRC] = NULL;
-      }
-      if (dfbvideosink->icbc[SRC]) {
-        meram_unlock_icb (dfbvideosink->meram, dfbvideosink->icbc[SRC]);
-        dfbvideosink->icbc[SRC] = NULL;
+      int i;
+      for (i = 0; i < 2; i++) {
+        if (dfbvideosink->icby[i]) {
+          meram_unlock_icb (dfbvideosink->meram, dfbvideosink->icby[i]);
+          dfbvideosink->icby[i] = NULL;
+        }
+        if (dfbvideosink->icbc[i]) {
+          meram_unlock_icb (dfbvideosink->meram, dfbvideosink->icbc[i]);
+          dfbvideosink->icbc[i] = NULL;
+        }
       }
       meram_close (dfbvideosink->meram);
       dfbvideosink->meram = NULL;
@@ -1650,6 +1684,20 @@ gst_dfbvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
   } else {
     dfbvideosink->icbc[SRC] = NULL;
   }
+
+  /* set up MExxSBSIZE for the destination surface */
+  surface =
+      (dfbvideosink->ext_surface) ? dfbvideosink->ext_surface : dfbvideosink->
+      primary;
+  surface->Lock (surface, DSLF_WRITE, (void *) &data, &stride);
+  surface->Unlock (surface);
+  if (dfbvideosink->interlaced)
+    stride *= 2;
+  meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST], MExxSBSIZE,
+      stride);
+  if (dfbvideosink->icbc[DST])
+    meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST], MExxSBSIZE,
+        stride);
 #endif /* defined(HAVE_SHMERAM) */
 #endif /* defined(HAVE_SHVIO) */
 
@@ -1922,8 +1970,7 @@ gst_dfbvideosink_shvio_stretchblit (GstDfbVideoSink * dfbvideosink,
   struct ren_vid_surface viosurface[2];
   int ret;
 #if defined(HAVE_SHMERAM)
-  gulong phys[1];
-  MERAM_REG *regs;
+  gulong phys[2];
 #endif /* defined(HAVE_SHMERAM) */
 
   if (dfbvideosink->vio == NULL)
@@ -1998,22 +2045,58 @@ gst_dfbvideosink_shvio_stretchblit (GstDfbVideoSink * dfbvideosink,
         gst_dfbvideosink_get_format_name (dst_format));
     return GST_FLOW_NOT_SUPPORTED;
   }
-  viosurface[DST].pitch = byte2pixel (dest_pitch, dst_format);
-  if (viosurface[DST].pitch < 0) {
-    GST_WARNING_OBJECT (dfbvideosink, "Pixel format %s unsupported",
-        gst_dfbvideosink_get_format_name (dst_format));
-    return GST_FLOW_NOT_SUPPORTED;
+#if defined(HAVE_SHMERAM)
+  phys[DST] = uiomux_all_virt_to_phys (dest_addr);
+  if (phys[DST]) {
+    viosurface[DST].pitch = 0;
+    viosurface[DST].bpitchy = 4096;
+    viosurface[DST].bpitchc = 4096;
+    viosurface[DST].bpitcha = 4096;
+
+    meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST], MExxSSARA,
+        phys[DST]);
+    meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST], MExxBSIZE,
+        (((dst->h - 1) & 0x1fff) << 16) | ((pixel2byte (dst->w,
+                    dst_format) - 1) & 0x7fff));
+
+    viosurface[DST].py =
+        (void *) meram_get_icb_address (dfbvideosink->meram,
+        dfbvideosink->icby[DST], 0);
+
+    if (dfbvideosink->icbc[DST]) {
+      gulong chroma_byte_offset = 0;
+      meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST], MExxBSIZE,
+          (((dst->h / 2 - 1) & 0x1fff) << 16) | ((pixel2byte (dst->w,
+                      dst_format) - 1) & 0x7fff));
+      meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST],
+          MExxSSARA, phys[DST] + chroma_byte_offset);
+      viosurface[DST].pc = (void *)
+          meram_get_icb_address (dfbvideosink->meram, dfbvideosink->icbc[DST],
+          0);
+    } else {
+      viosurface[DST].pc = 0;
+    }
+  } else {
+#endif /* defined(HAVE_SHMERAM) */
+    viosurface[DST].pitch = byte2pixel (dest_pitch, dst_format);
+    if (viosurface[DST].pitch < 0) {
+      GST_WARNING_OBJECT (dfbvideosink, "Pixel format %s unsupported",
+          gst_dfbvideosink_get_format_name (dst_format));
+      return GST_FLOW_NOT_SUPPORTED;
+    }
+    viosurface[DST].bpitchy = 0;
+    viosurface[DST].bpitchc = 0;
+    viosurface[DST].bpitcha = 0;
+    viosurface[DST].py = dest_addr;
+    if (is_ycbcr (viosurface[DST].format)
+        && viosurface[SRC].format != REN_UYVY)
+      viosurface[DST].pc = (void *) (
+          (gulong) viosurface[DST].py + viosurface[DST].pitch * dst->h);
+    else
+      viosurface[DST].pc = 0;
+#if defined(HAVE_SHMERAM)
   }
-  viosurface[DST].bpitchy = 0;
-  viosurface[DST].bpitchc = 0;
-  viosurface[DST].bpitcha = 0;
-  viosurface[DST].py = dest_addr;
-  if (is_ycbcr (viosurface[DST].format)
-      && viosurface[SRC].format != REN_UYVY)
-    viosurface[DST].pc = (void *) (
-        (gulong) viosurface[DST].py + viosurface[DST].pitch * dst->h);
-  else
-    viosurface[DST].pc = 0;
+#endif /* defined(HAVE_SHMERAM) */
 
   viosurface[DST].pa = 0;
 
@@ -2038,6 +2121,21 @@ gst_dfbvideosink_shvio_stretchblit (GstDfbVideoSink * dfbvideosink,
           val);
     }
   }
+  if (phys[DST]) {
+    gulong val;
+    meram_read_icb (dfbvideosink->meram, dfbvideosink->icby[DST], MExxCTRL,
+        &val);
+    val |= 1 << 5;              /* WF: flush data */
+    meram_write_icb (dfbvideosink->meram, dfbvideosink->icby[DST], MExxCTRL,
+        val);
+    if (dfbvideosink->icbc[DST]) {
+      meram_read_icb (dfbvideosink->meram, dfbvideosink->icbc[DST], MExxCTRL,
+          &val);
+      val |= 1 << 5;            /* WF: flush data */
+      meram_write_icb (dfbvideosink->meram, dfbvideosink->icbc[DST], MExxCTRL,
+          val);
+    }
+  }
 #endif /* defined(HAVE_SHMERAM) */
 
   return GST_FLOW_OK;
diff --git a/ext/directfb/dfbvideosink.h b/ext/directfb/dfbvideosink.h
index 73752ab..2311593 100644
--- a/ext/directfb/dfbvideosink.h
+++ b/ext/directfb/dfbvideosink.h
@@ -138,11 +138,13 @@ struct _GstDfbVideoSink {
   gboolean interlaced;
 #if defined(HAVE_SHMERAM)
   MERAM *meram;
-  ICB *icby[1];		/* TODO: add an entry for writeback cache */
-  ICB *icbc[1];		/* TODO: add an entry for writeback cache */
+  ICB *icby[2];
+  ICB *icbc[2];
 /* NOTE: ICB #0 to #4 may be used by REL OMXIL */
 #define ICB_SRC_Y	5
 #define ICB_SRC_C	6
+#define ICB_DST_Y	7
+#define ICB_DST_C	8
 #endif /* defined(HAVE_SHMERAM) */
 #endif /* defined(HAVE_SHVIO) */
 };
-- 
1.7.10.4


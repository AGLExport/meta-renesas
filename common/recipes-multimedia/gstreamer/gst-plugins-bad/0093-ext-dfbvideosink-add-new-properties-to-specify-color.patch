From e13dad1987d5b13db71e68df7e1624a5488f5f2b Mon Sep 17 00:00:00 2001
From: Kazunori Kobayashi <kkobayas@igel.co.jp>
Date: Thu, 8 Nov 2012 12:16:18 +0900
Subject: [PATCH 93/97] ext/dfbvideosink: add new properties to specify color
 to fill a surface

The value of each of red, green, blue and alpha can be specified
using these properties. The specified color will be used to fill
a surface when it is cleared.
---
 ext/directfb/dfbvideosink.c |   67 +++++++++++++++++++++++++++++++++++++++----
 ext/directfb/dfbvideosink.h |   13 +++++++++
 2 files changed, 75 insertions(+), 5 deletions(-)

diff --git a/ext/directfb/dfbvideosink.c b/ext/directfb/dfbvideosink.c
index a6ba70d..9915ff6 100644
--- a/ext/directfb/dfbvideosink.c
+++ b/ext/directfb/dfbvideosink.c
@@ -128,7 +128,11 @@ enum
   ARG_WINDOW_WIDTH,
   ARG_WINDOW_HEIGHT,
   ARG_WINDOW_X_OFFSET,
-  ARG_WINDOW_Y_OFFSET
+  ARG_WINDOW_Y_OFFSET,
+  ARG_BGCOLOR_RED,
+  ARG_BGCOLOR_GREEN,
+  ARG_BGCOLOR_BLUE,
+  ARG_BGCOLOR_ALPHA
 };
 
 static void gst_dfbvideosink_bufferpool_clear (GstDfbVideoSink * dfbvideosink);
@@ -198,13 +202,17 @@ gst_dfbvideosink_clear_surface (GstDfbVideoSink * dfbvideosink,
     IDirectFBSurface * surface)
 {
   g_mutex_lock (dfbvideosink->window_lock);
-  surface->Clear (surface, 0x00, 0x00, 0x00, 0xFF);
+  surface->Clear (surface, dfbvideosink->bgcolor.red,
+      dfbvideosink->bgcolor.green, dfbvideosink->bgcolor.blue,
+      dfbvideosink->bgcolor.alpha);
 
   if (dfbvideosink->backbuffer) {
     dfbvideosink->vsync ? surface->Flip (surface, NULL, DSFLIP_ONSYNC) :
         surface->Flip (surface, NULL, DSFLIP_NONE);
 
-    surface->Clear (surface, 0x00, 0x00, 0x00, 0xFF);
+    surface->Clear (surface, dfbvideosink->bgcolor.red,
+        dfbvideosink->bgcolor.green, dfbvideosink->bgcolor.blue,
+        dfbvideosink->bgcolor.alpha);
   }
   dfbvideosink->require_clear_surface = 0;
   g_mutex_unlock (dfbvideosink->window_lock);
@@ -2391,12 +2399,16 @@ gst_dfbvideosink_show_frame (GstBaseSink * bsink, GstBuffer * buf)
     if ((dfbvideosink->require_clear_meram)
         && (dfbvideosink->pixel_format == DSPF_ARGB)) {
       meram_fill_memory_block (dfbvideosink->meram, 0x40, 16 /* KiB */ ,
-          0xff000000U /* black */ );
+          (dfbvideosink->bgcolor.alpha << 24) |
+          (dfbvideosink->bgcolor.red << 16) |
+          (dfbvideosink->bgcolor.green << 8) | dfbvideosink->bgcolor.blue);
       dfbvideosink->require_clear_meram = false;
     }
 #endif /* defined(HAVE_SHMERAM) */
     if (dfbvideosink->require_clear_surface > 0) {
-      surface->Clear (surface, 0x00, 0x00, 0x00, 0xFF);
+      surface->Clear (surface, dfbvideosink->bgcolor.red,
+          dfbvideosink->bgcolor.green, dfbvideosink->bgcolor.blue,
+          dfbvideosink->bgcolor.alpha);
       dfbvideosink->require_clear_surface--;
     }
     g_mutex_unlock (dfbvideosink->window_lock);
@@ -3105,6 +3117,18 @@ gst_dfbvideosink_set_property (GObject * object, guint prop_id,
       dfbvideosink->require_clear_surface = dfbvideosink->backbuffer ? 2 : 1;
       g_mutex_unlock (dfbvideosink->window_lock);
       break;
+    case ARG_BGCOLOR_RED:
+      dfbvideosink->bgcolor.red = g_value_get_uint (value);
+      break;
+    case ARG_BGCOLOR_GREEN:
+      dfbvideosink->bgcolor.green = g_value_get_uint (value);
+      break;
+    case ARG_BGCOLOR_BLUE:
+      dfbvideosink->bgcolor.blue = g_value_get_uint (value);
+      break;
+    case ARG_BGCOLOR_ALPHA:
+      dfbvideosink->bgcolor.alpha = g_value_get_uint (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -3155,6 +3179,18 @@ gst_dfbvideosink_get_property (GObject * object, guint prop_id,
     case ARG_WINDOW_Y_OFFSET:
       g_value_set_int (value, dfbvideosink->window.y);
       break;
+    case ARG_BGCOLOR_RED:
+      g_value_set_uint (value, dfbvideosink->bgcolor.red);
+      break;
+    case ARG_BGCOLOR_GREEN:
+      g_value_set_uint (value, dfbvideosink->bgcolor.green);
+      break;
+    case ARG_BGCOLOR_BLUE:
+      g_value_set_uint (value, dfbvideosink->bgcolor.blue);
+      break;
+    case ARG_BGCOLOR_ALPHA:
+      g_value_set_uint (value, dfbvideosink->bgcolor.alpha);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -3285,6 +3321,11 @@ gst_dfbvideosink_init (GstDfbVideoSink * dfbvideosink)
 
   dfbvideosink->par = NULL;
 
+  dfbvideosink->bgcolor.red = 0x00;
+  dfbvideosink->bgcolor.green = 0x00;
+  dfbvideosink->bgcolor.blue = 0x00;
+  dfbvideosink->bgcolor.alpha = 0xFF;
+
   gst_pad_set_query_function (pad,
       GST_DEBUG_FUNCPTR (gst_dfbvideosink_handle_sink_query));
 }
@@ -3365,6 +3406,22 @@ gst_dfbvideosink_class_init (GstDfbVideoSinkClass * klass)
       g_param_spec_int ("window-y", "Window y-offset",
           "The y-axis offset of window in the target surface", 0, G_MAXINT, 0,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+  g_object_class_install_property (gobject_class, ARG_BGCOLOR_RED,
+      g_param_spec_uint ("bgcolor-red", "Background color red value",
+          "The red value to fill the target surface", 0,
+          G_MAXUINT8, 0, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+  g_object_class_install_property (gobject_class, ARG_BGCOLOR_GREEN,
+      g_param_spec_uint ("bgcolor-green", "Background color green value",
+          "The green value to fill the target surface", 0,
+          G_MAXUINT8, 0, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+  g_object_class_install_property (gobject_class, ARG_BGCOLOR_BLUE,
+      g_param_spec_uint ("bgcolor-blue", "Background color blue value",
+          "The blue value to fill the target surface", 0,
+          G_MAXUINT8, 0, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+  g_object_class_install_property (gobject_class, ARG_BGCOLOR_ALPHA,
+      g_param_spec_uint ("bgcolor-alpha", "Background color alpha value",
+          "The alpha value to fill the target surface", 0,
+          G_MAXUINT8, 0xFF, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
   gstelement_class->change_state = gst_dfbvideosink_change_state;
 
diff --git a/ext/directfb/dfbvideosink.h b/ext/directfb/dfbvideosink.h
index 76f5d86..2d70c02 100644
--- a/ext/directfb/dfbvideosink.h
+++ b/ext/directfb/dfbvideosink.h
@@ -71,6 +71,16 @@ struct _GstDfbVMode {
   gint bpp;
 };
 
+typedef struct _GstDfbBgColor GstDfbBgColor;
+
+struct _GstDfbBgColor
+{
+  guint8 red;
+  guint8 green;
+  guint8 blue;
+  guint8 alpha;
+};
+
 /**
  * GstDfbVideoSink:
  *
@@ -149,6 +159,9 @@ struct _GstDfbVideoSink {
   gint tile_boundary_c_offset;
 #endif /* defined(HAVE_SHMERAM) */
 #endif /* defined(HAVE_SHVIO) */
+
+  /* color to fill a surface at the initialization */
+  GstDfbBgColor bgcolor;
 };
 
 struct _GstDfbVideoSinkClass {
-- 
1.7.10.4


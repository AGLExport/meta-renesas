From a0553e9511cb4c1dc9de525596f070dc60775a5d Mon Sep 17 00:00:00 2001
From: Kazunori Kobayashi <kkobayas@igel.co.jp>
Date: Thu, 27 Jun 2013 20:42:34 +0900
Subject: [PATCH 17/21] dfbvideosink: invoke GstBufferPool class methods

---
 ext/directfb/dfbvideosink.c | 30 ++++++++++++++++++++++++++++++
 ext/directfb/dfbvideosink.h |  5 ++++-
 2 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/ext/directfb/dfbvideosink.c b/ext/directfb/dfbvideosink.c
index 4c6ec2f..f8493fb 100644
--- a/ext/directfb/dfbvideosink.c
+++ b/ext/directfb/dfbvideosink.c
@@ -1037,6 +1037,11 @@ gst_dfbvideosink_cleanup (GstDfbVideoSink * dfbvideosink)
     dfbvideosink->cb_channels = NULL;
   }
 
+  if (dfbvideosink->pool) {
+    gst_object_unref (dfbvideosink->pool);
+    dfbvideosink->pool = NULL;
+  }
+
   if (dfbvideosink->primary) {
     dfbvideosink->primary->Release (dfbvideosink->primary);
     dfbvideosink->primary = NULL;
@@ -1578,6 +1583,27 @@ gst_dfbvideosink_setcaps (GstBaseSink * bsink, GstCaps * caps)
   dfbvideosink->video_width = video_width;
   dfbvideosink->video_height = video_height;
 
+  if (dfbvideosink->pool) {
+    if (gst_buffer_pool_is_active (dfbvideosink->pool))
+      gst_buffer_pool_set_active (dfbvideosink->pool, FALSE);
+    gst_object_unref (dfbvideosink->pool);
+  }
+
+  /* create a new buffer pool of DirectFB surface */
+  dfbvideosink->pool = gst_dfb_buffer_pool_new (dfbvideosink);
+
+  structure = gst_buffer_pool_get_config (dfbvideosink->pool);
+  gst_buffer_pool_config_set_params (structure, caps, 0, 0, 0);
+  if (!gst_buffer_pool_set_config (dfbvideosink->pool, structure)) {
+    GST_WARNING_OBJECT (dfbvideosink,
+        "failed to set buffer pool configuration");
+    goto beach;
+  }
+  if (!gst_buffer_pool_set_active (dfbvideosink->pool, TRUE)) {
+    GST_WARNING_OBJECT (dfbvideosink, "failed to activate buffer pool");
+    goto beach;
+  }
+
   result = TRUE;
 
 beach:
@@ -1641,6 +1667,8 @@ gst_dfbvideosink_change_state (GstElement * element, GstStateChange transition)
       dfbvideosink->fps_n = 0;
       dfbvideosink->video_width = 0;
       dfbvideosink->video_height = 0;
+      if (dfbvideosink->pool)
+        gst_buffer_pool_set_active (dfbvideosink->pool, FALSE);
       break;
     case GST_STATE_CHANGE_READY_TO_NULL:
       dfbvideosink->running = FALSE;
@@ -2139,6 +2167,8 @@ gst_dfbvideosink_finalize (GObject * object)
 static void
 gst_dfbvideosink_init (GstDfbVideoSink * dfbvideosink)
 {
+  dfbvideosink->pool = NULL;
+
   dfbvideosink->video_height = dfbvideosink->out_height = 0;
   dfbvideosink->video_width = dfbvideosink->out_width = 0;
   dfbvideosink->fps_d = 0;
diff --git a/ext/directfb/dfbvideosink.h b/ext/directfb/dfbvideosink.h
index 3cf4614..1b0d111 100644
--- a/ext/directfb/dfbvideosink.h
+++ b/ext/directfb/dfbvideosink.h
@@ -93,7 +93,10 @@ struct _GstDfbVMode {
  */
 struct _GstDfbVideoSink {
   GstVideoSink videosink;
-  
+
+  /* for buffer pool */
+  GstBufferPool *pool;
+
   /* Framerate numerator and denominator */
   gint fps_n;
   gint fps_d;
-- 
1.8.1.2


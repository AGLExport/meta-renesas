From ad9f29868fe209755ab3b0fe4c8e7fbec2a43010 Mon Sep 17 00:00:00 2001
From: Denis Oliver Kropp <dok@directfb.org>
Date: Fri, 5 Apr 2013 03:49:21 +0200
Subject: [PATCH 1/2] Core: Fix layer context/region cyclic ref via window
 stack.

Replace the context pointer in CoreLayerRegion by the context object's ID.

Add layer_id to CoreLayerRegion for convenience, avoid several indirections via context.
---
 lib/sawman/sawman_updates.c         |  4 +--
 src/core/CoreLayerRegion_real.cpp   | 10 ++-----
 src/core/layer_context.c            | 22 +++++++-------
 src/core/layer_context.h            |  3 ++
 src/core/layer_region.c             | 59 +++++++++++++------------------------
 src/core/layers_internal.h          |  4 ++-
 src/display/idirectfbdisplaylayer.c |  5 ++--
 src/idirectfb.c                     |  5 ++--
 8 files changed, 46 insertions(+), 66 deletions(-)

diff --git a/lib/sawman/sawman_updates.c b/lib/sawman/sawman_updates.c
index 384dc02..bc459e2 100644
--- a/lib/sawman/sawman_updates.c
+++ b/lib/sawman/sawman_updates.c
@@ -1702,12 +1702,12 @@ process_single( SaWMan              *sawman,
                if (D_FLAGS_IS_SET( region->state, CLRSF_ENABLED ))
                     dfb_layer_region_disable(region);
 
-               ret = dfb_layer_context_reallocate_surface( layer, region, &region_config );
+               ret = dfb_layer_context_reallocate_surface( layer, tier->context, tier->region, &region_config );
                if (ret)
                     D_DERROR( ret, "Core/Layers: Reallocation of layer surface failed!\n" );
           }
           else {
-               ret = dfb_layer_context_allocate_surface( layer, region, &region_config );
+               ret = dfb_layer_context_allocate_surface( layer, tier->context, region, &region_config );
                if (ret)
                     D_DERROR( ret, "Core/Layers: Allocation of layer surface failed!\n" );
           }
diff --git a/src/core/CoreLayerRegion_real.cpp b/src/core/CoreLayerRegion_real.cpp
index 9e8f030..1188965 100644
--- a/src/core/CoreLayerRegion_real.cpp
+++ b/src/core/CoreLayerRegion_real.cpp
@@ -148,9 +148,8 @@ DisplayTask::DisplayTask( CoreLayerRegion       *region,
      if (right_allocation)
           dfb_surface_allocation_ref( right_allocation );
 
-     context = region->context;
-     layer   = dfb_layer_at( context->layer_id );
-     index   = dfb_surface_buffer_index( left_allocation->buffer );
+     layer = dfb_layer_at( region->layer_id );
+     index = dfb_surface_buffer_index( left_allocation->buffer );
 
      if (left_update) {
           this->left_update = &this->left_update_region;
@@ -531,7 +530,6 @@ dfb_layer_region_flip_update2( CoreLayerRegion      *region,
 {
      DFBResult            ret = DFB_OK;
      CoreLayer           *layer;
-     CoreLayerContext    *context;
      CoreSurface         *surface;
      DFBSurfaceStereoEye  eyes = DSSE_NONE;
 
@@ -551,7 +549,6 @@ dfb_layer_region_flip_update2( CoreLayerRegion      *region,
 
 
      D_ASSERT( region != NULL );
-     D_ASSERT( region->context != NULL );
 
      /* Lock the region. */
      if (dfb_layer_region_lock( region ))
@@ -566,9 +563,8 @@ dfb_layer_region_flip_update2( CoreLayerRegion      *region,
           return DFB_UNSUPPORTED;
      }
 
-     context = region->context;
      surface = region->surface;
-     layer   = dfb_layer_at( context->layer_id );
+     layer   = dfb_layer_at( region->layer_id );
 
      /* Depending on the buffer mode... */
      switch (region->config.buffermode) {
diff --git a/src/core/layer_context.c b/src/core/layer_context.c
index a957163..9a457aa 100644
--- a/src/core/layer_context.c
+++ b/src/core/layer_context.c
@@ -305,7 +305,7 @@ dfb_layer_context_activate( CoreLayerContext *context )
      fusion_vector_foreach (region, index, context->regions) {
           /* first reallocate.. */
           if (region->surface && region->surface->num_buffers == 0) {
-               ret = dfb_layer_context_reallocate_surface( layer, region, &region->config );
+               ret = dfb_layer_context_reallocate_surface( layer, context, region, &region->config );
                if (ret)
                     D_DERROR( ret, "Core/Layers: Reallocation of layer surface failed!\n" );
           }
@@ -762,12 +762,12 @@ wait:
                     flags |= CLRCF_SURFACE | CLRCF_PALETTE;
 
                     if (region->surface) {
-                         ret = dfb_layer_context_reallocate_surface( layer, region, &region_config );
+                         ret = dfb_layer_context_reallocate_surface( layer, context, region, &region_config );
                          if (ret)
                               D_DERROR( ret, "Core/Layers: Reallocation of layer surface failed!\n" );
                     }
                     else {
-                         ret = dfb_layer_context_allocate_surface( layer, region, &region_config );
+                         ret = dfb_layer_context_allocate_surface( layer, context, region, &region_config );
                          if (ret)
                               D_DERROR( ret, "Core/Layers: Allocation of layer surface failed!\n" );
                     }
@@ -780,7 +780,7 @@ wait:
                     }
                }
                else if (region->surface)
-                    dfb_layer_context_deallocate_surface( layer, region );
+                    dfb_layer_context_deallocate_surface( layer, context, region );
 
                region->state |= configured;
 
@@ -797,7 +797,7 @@ wait:
                     dfb_layer_region_disable( region );
 
                     if (region->surface)
-                         dfb_layer_context_deallocate_surface( layer, region );
+                         dfb_layer_context_deallocate_surface( layer, context, region );
                }
           }
 
@@ -1770,12 +1770,12 @@ build_updated_config( CoreLayer                   *layer,
  */
 DFBResult
 dfb_layer_context_allocate_surface( CoreLayer             *layer,
+                                    CoreLayerContext      *context,
                                     CoreLayerRegion       *region,
                                     CoreLayerRegionConfig *config )
 {
      DFBResult                ret;
      const DisplayLayerFuncs *funcs;
-     CoreLayerContext        *context;
      CoreSurface             *surface = NULL;
      CoreSurfaceTypeFlags     type    = CSTF_LAYER;
      CoreSurfaceConfig        scon;
@@ -1790,7 +1790,6 @@ dfb_layer_context_allocate_surface( CoreLayer             *layer,
      D_ASSERT( config != NULL );
      D_ASSERT( config->buffermode != DLBM_WINDOWS );
 
-     context = region->context;
      D_MAGIC_ASSERT( context, CoreLayerContext );
 
      funcs = layer->funcs;
@@ -1854,7 +1853,7 @@ dfb_layer_context_allocate_surface( CoreLayer             *layer,
           scon.colorspace     = config->colorspace;
           scon.caps           = caps;
 
-          if (shared->contexts.primary == region->context)
+          if (shared->contexts.primary == context)
                type |= CSTF_SHARED;
 
           /* Use the default surface creation. */
@@ -1891,12 +1890,12 @@ dfb_layer_context_allocate_surface( CoreLayer             *layer,
 
 DFBResult
 dfb_layer_context_reallocate_surface( CoreLayer             *layer,
+                                      CoreLayerContext      *context,
                                       CoreLayerRegion       *region,
                                       CoreLayerRegionConfig *config )
 {
      DFBResult                ret;
      const DisplayLayerFuncs *funcs;
-     CoreLayerContext        *context;
      CoreSurface             *surface;
      CoreSurfaceConfig        sconfig;
 
@@ -1909,7 +1908,6 @@ dfb_layer_context_reallocate_surface( CoreLayer             *layer,
      D_ASSERT( config != NULL );
      D_ASSERT( config->buffermode != DLBM_WINDOWS );
 
-     context = region->context;
      D_MAGIC_ASSERT( context, CoreLayerContext );
 
      funcs   = layer->funcs;
@@ -2017,7 +2015,9 @@ dfb_layer_context_reallocate_surface( CoreLayer             *layer,
 }
 
 DFBResult
-dfb_layer_context_deallocate_surface( CoreLayer *layer, CoreLayerRegion *region )
+dfb_layer_context_deallocate_surface( CoreLayer        *layer,
+                                      CoreLayerContext *context,
+                                      CoreLayerRegion  *region )
 {
      DFBResult                ret;
      const DisplayLayerFuncs *funcs;
diff --git a/src/core/layer_context.h b/src/core/layer_context.h
index 7357742..94d6827 100644
--- a/src/core/layer_context.h
+++ b/src/core/layer_context.h
@@ -166,14 +166,17 @@ CoreWindow      *dfb_layer_context_find_window( CoreLayerContext       *context,
 
 
 DFBResult dfb_layer_context_allocate_surface    ( CoreLayer                   *layer,
+                                                  CoreLayerContext            *context,
                                                   CoreLayerRegion             *region,
                                                   CoreLayerRegionConfig       *config );
 
 DFBResult dfb_layer_context_reallocate_surface  ( CoreLayer                   *layer,
+                                                  CoreLayerContext            *context,
                                                   CoreLayerRegion             *region,
                                                   CoreLayerRegionConfig       *config );
 
 DFBResult dfb_layer_context_deallocate_surface  ( CoreLayer                   *layer,
+                                                  CoreLayerContext            *context,
                                                   CoreLayerRegion             *region );
 
 #endif
diff --git a/src/core/layer_region.c b/src/core/layer_region.c
index b77c71b..d001693 100644
--- a/src/core/layer_region.c
+++ b/src/core/layer_region.c
@@ -74,10 +74,11 @@ static DFBResult region_buffer_lock( CoreLayerRegion       *region,
 static void
 region_destructor( FusionObject *object, bool zombie, void *ctx )
 {
-     CoreLayerRegion  *region  = (CoreLayerRegion*) object;
-     CoreLayerContext *context = region->context;
-     CoreLayer        *layer   = dfb_layer_at( context->layer_id );
-     CoreLayerShared  *shared  = layer->shared;
+     DFBResult         ret;
+     CoreLayerRegion  *region = (CoreLayerRegion*) object;
+     CoreLayer        *layer  = dfb_layer_at( region->layer_id );
+     CoreLayerShared  *shared = layer->shared;
+     CoreLayerContext *context;
 
      D_DEBUG_AT( Core_Layers, "destroying region %p (%s, %dx%d, "
                  "%s, %s, %s, %s%s)\n", region, shared->description.name,
@@ -100,7 +101,11 @@ region_destructor( FusionObject *object, bool zombie, void *ctx )
           TaskList_Delete( region->display_tasks );
 
      /* Remove the region from the context. */
-     dfb_layer_context_remove_region( region->context, region );
+     ret = dfb_core_get_layer_context( layer->core, region->context_id, &context );
+     if (ret == DFB_OK) {
+          dfb_layer_context_remove_region( context, region );
+          dfb_layer_context_unref( context );
+     }
 
      /* Throw away its surface. */
      if (region->surface) {
@@ -112,9 +117,6 @@ region_destructor( FusionObject *object, bool zombie, void *ctx )
           dfb_surface_unlink( &region->surface );
      }
 
-     /* Unlink the context from the structure. */
-     dfb_layer_context_unlink( &region->context );
-
      /* Free driver's region data. */
      if (region->region_data)
           SHFREE( shared->shmpool, region->region_data );
@@ -162,15 +164,11 @@ dfb_layer_region_create( CoreLayerContext  *context,
      if (!region)
           return DFB_FUSION;
 
-     /* Link the context into the structure. */
-     if (dfb_layer_context_link( &region->context, context )) {
-          fusion_object_destroy( &region->object );
-          return DFB_FUSION;
-     }
+     region->layer_id   = context->layer_id;
+     region->context_id = context->object.id;
 
      /* Initialize the lock. */
      if (fusion_skirmish_init2( &region->lock, "Layer Region", dfb_core_world(layer->core), fusion_config->secure_fusion )) {
-          dfb_layer_context_unlink( &region->context );
           fusion_object_destroy( &region->object );
           return DFB_FUSION;
      }
@@ -183,7 +181,7 @@ dfb_layer_region_create( CoreLayerContext  *context,
      if (shared->description.surface_accessor)
           region->surface_accessor = shared->description.surface_accessor;
      else
-          region->surface_accessor = CSAID_LAYER0 + context->layer_id;
+          region->surface_accessor = CSAID_LAYER0 + region->layer_id;
 
      if (dfb_config->task_manager)
           region->display_tasks = TaskList_New( true );
@@ -281,7 +279,6 @@ dfb_layer_region_enable( CoreLayerRegion *region )
      DFBResult ret;
 
      D_ASSERT( region != NULL );
-     D_ASSERT( region->context != NULL );
 
      /* Lock the region. */
      if (dfb_layer_region_lock( region ))
@@ -450,7 +447,6 @@ dfb_layer_region_flip_update( CoreLayerRegion     *region,
      DFBRegion                unrotated;
      DFBRegion                rotated;
      CoreLayer               *layer;
-     CoreLayerContext        *context;
      CoreSurface             *surface;
      const DisplayLayerFuncs *funcs;
 
@@ -467,7 +463,6 @@ dfb_layer_region_flip_update( CoreLayerRegion     *region,
 
 
      D_ASSERT( region != NULL );
-     D_ASSERT( region->context != NULL );
 
      /* Lock the region. */
      if (dfb_layer_region_lock( region ))
@@ -489,9 +484,8 @@ dfb_layer_region_flip_update( CoreLayerRegion     *region,
           return DFB_UNSUPPORTED;
      }
 
-     context = region->context;
      surface = region->surface;
-     layer   = dfb_layer_at( context->layer_id );
+     layer   = dfb_layer_at( region->layer_id );
 
      D_ASSERT( layer->funcs != NULL );
 
@@ -674,7 +668,6 @@ dfb_layer_region_flip_update_stereo( CoreLayerRegion     *region,
      DFBRegion                unrotated;
      DFBRegion                left_rotated, right_rotated;
      CoreLayer               *layer;
-     CoreLayerContext        *context;
      CoreSurface             *surface;
      const DisplayLayerFuncs *funcs;
      DFBSurfaceStereoEye      eyes = 0;
@@ -690,7 +683,6 @@ dfb_layer_region_flip_update_stereo( CoreLayerRegion     *region,
 
 
      D_ASSERT( region != NULL );
-     D_ASSERT( region->context != NULL );
 
      /* Lock the region. */
      if (dfb_layer_region_lock( region ))
@@ -712,9 +704,8 @@ dfb_layer_region_flip_update_stereo( CoreLayerRegion     *region,
           return DFB_UNSUPPORTED;
      }
 
-     context = region->context;
      surface = region->surface;
-     layer   = dfb_layer_at( context->layer_id );
+     layer   = dfb_layer_at( region->layer_id );
 
      D_ASSERT( layer->funcs != NULL );
 
@@ -931,7 +922,6 @@ dfb_layer_region_set_configuration( CoreLayerRegion            *region,
      D_DEBUG_AT( Core_Layers, "%s( %p, %p, 0x%08x )\n", __FUNCTION__, region, config, flags );
 
      D_ASSERT( region != NULL );
-     D_ASSERT( region->context != NULL );
      D_ASSERT( config != NULL );
      D_ASSERT( config->buffermode != DLBM_WINDOWS );
      D_ASSERT( (flags == CLRCF_ALL) || (region->state & CLRSF_CONFIGURED) );
@@ -939,7 +929,7 @@ dfb_layer_region_set_configuration( CoreLayerRegion            *region,
      D_ASSUME( flags != CLRCF_NONE );
      D_ASSUME( ! (flags & ~CLRCF_ALL) );
 
-     layer = dfb_layer_at( region->context->layer_id );
+     layer = dfb_layer_at( region->layer_id );
 
      D_ASSERT( layer != NULL );
      D_ASSERT( layer->funcs != NULL );
@@ -1116,7 +1106,6 @@ _dfb_layer_region_surface_listener( const void *msg_data, void *ctx )
 
      D_ASSERT( notification != NULL );
      D_ASSERT( region != NULL );
-     D_ASSERT( region->context != NULL );
 
      D_DEBUG_AT( Core_Layers, "_dfb_layer_region_surface_listener( %p, %p ) <- 0x%08x\n",
                  notification, region, notification->flags );
@@ -1128,7 +1117,7 @@ _dfb_layer_region_surface_listener( const void *msg_data, void *ctx )
      if (notification->surface != region->surface)
           return RS_OK;
 
-     layer = dfb_layer_at( region->context->layer_id );
+     layer = dfb_layer_at( region->layer_id );
 
      D_ASSERT( layer != NULL );
      D_ASSERT( layer->funcs != NULL );
@@ -1260,10 +1249,8 @@ region_buffer_lock( CoreLayerRegion       *region,
      DFBResult              ret = DFB_OK;
      CoreSurfaceBuffer     *buffer;
      CoreSurfaceAllocation *allocation;
-     CoreLayerContext      *context;
      bool                   stereo;
 
-     (void)context;
      (void)allocation;
 
      D_ASSERT( region != NULL );
@@ -1271,9 +1258,6 @@ region_buffer_lock( CoreLayerRegion       *region,
      D_ASSERT(left_buffer_lock != NULL);
      D_ASSERT( !dfb_config->task_manager );
 
-     context = region->context;
-     D_MAGIC_ASSERT( context, CoreLayerContext );
-
      stereo = surface->config.caps & DSCAPS_STEREO;
 
      D_DEBUG_AT( Core_LayersLock, "%s( role %d )\n", __FUNCTION__, role );
@@ -1367,14 +1351,13 @@ dfb_layer_region_set( CoreLayerRegion            *region,
      D_DEBUG_AT( Core_Layers, "  -> state    0x%08x\n", region->state );
 
      D_ASSERT( region != NULL );
-     D_ASSERT( region->context != NULL );
      D_ASSERT( config != NULL );
      D_ASSERT( config->buffermode != DLBM_WINDOWS );
      D_ASSERT( !dfb_config->task_manager );
 
      D_ASSERT( D_FLAGS_IS_SET( region->state, CLRSF_REALIZED ) );
 
-     layer = dfb_layer_at( region->context->layer_id );
+     layer = dfb_layer_at( region->layer_id );
 
      D_ASSERT( layer != NULL );
      D_ASSERT( layer->shared != NULL );
@@ -1441,12 +1424,11 @@ dfb_layer_region_realize( CoreLayerRegion *region,
           return DFB_OK;
      }
 
-     D_ASSERT( region->context != NULL );
      D_ASSERT( D_FLAGS_IS_SET( region->state, CLRSF_CONFIGURED ) );
      D_ASSERT( ! D_FLAGS_IS_SET( region->state, CLRSF_REALIZED ) );
      D_ASSERT( !dfb_config->task_manager || !set );
 
-     layer = dfb_layer_at( region->context->layer_id );
+     layer = dfb_layer_at( region->layer_id );
 
      D_ASSERT( layer != NULL );
      D_ASSERT( layer->shared != NULL );
@@ -1522,10 +1504,9 @@ dfb_layer_region_unrealize( CoreLayerRegion *region )
 
      D_DEBUG_AT( Core_Layers, "  -> state    0x%08x\n", region->state );
 
-     D_ASSERT( region->context != NULL );
      D_ASSERT( D_FLAGS_IS_SET( region->state, CLRSF_REALIZED ) );
 
-     layer = dfb_layer_at( region->context->layer_id );
+     layer = dfb_layer_at( region->layer_id );
 
      D_ASSERT( layer != NULL );
      D_ASSERT( layer->shared != NULL );
diff --git a/src/core/layers_internal.h b/src/core/layers_internal.h
index a547c08..affac4c 100644
--- a/src/core/layers_internal.h
+++ b/src/core/layers_internal.h
@@ -170,7 +170,7 @@ typedef enum {
 struct __DFB_CoreLayerRegion {
      FusionObject                object;
 
-     CoreLayerContext           *context;
+     FusionObjectID              context_id;
 
      FusionSkirmish              lock;
 
@@ -188,6 +188,8 @@ struct __DFB_CoreLayerRegion {
      FusionCall                  call;
 
      DFB_DisplayTaskListLocked  *display_tasks;
+
+     DFBDisplayLayerID           layer_id;
 };
 
 
diff --git a/src/display/idirectfbdisplaylayer.c b/src/display/idirectfbdisplaylayer.c
index 922aa19..38f2fde 100644
--- a/src/display/idirectfbdisplaylayer.c
+++ b/src/display/idirectfbdisplaylayer.c
@@ -203,9 +203,8 @@ IDirectFBDisplayLayer_GetSurface( IDirectFBDisplayLayer  *thiz,
           // render the background (optionally based on configuration) and 
           // flip the display layer so it is visible.  Otherwise, just 
           // directly flip the display layer and make it visible.
-          D_ASSERT( region->context );
-          if (region->context->stack) {
-               CoreWindowStack_RepaintAll( region->context->stack );
+          if (data->stack) {
+               CoreWindowStack_RepaintAll( data->stack );
           }
           else {
                CoreLayerRegion_FlipUpdate2( region, NULL, NULL, DSFLIP_NONE, -1 );
diff --git a/src/idirectfb.c b/src/idirectfb.c
index d6fc402..2e741da 100644
--- a/src/idirectfb.c
+++ b/src/idirectfb.c
@@ -981,9 +981,8 @@ IDirectFB_CreateSurface( IDirectFB                    *thiz,
                           * so it is visible.  Otherwise, just directly flip
                           * the display layer and make it visible.
                           */
-                         D_ASSERT( region->context );
-                         if (region->context->stack) {
-                              CoreWindowStack_RepaintAll( region->context->stack );
+                         if (data->stack) {
+                              CoreWindowStack_RepaintAll( data->stack );
                          }
                          else {
                               CoreLayerRegion_FlipUpdate2( region, NULL, NULL, DSFLIP_NONE, -1 );
-- 
1.8.1.2


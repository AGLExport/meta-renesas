From c3a136d83fee4ed51e3fccc3197cfe7fa21042e1 Mon Sep 17 00:00:00 2001
From: Koji Matsuoka <koji.matsuoka.xm@renesas.com>
Date: Wed, 31 Jul 2013 17:31:36 +0900
Subject: [PATCH 1064/1083] drm: rcar-du: Add no LVDS interface feature

This is the function to choose the signal to HDMI transmitter.

Signed-off-by: Koji Matsuoka <koji.matsuoka.xm@renesas.com>
---
 drivers/gpu/drm/rcar-du/rcar_du_drv.c     |  3 ++-
 drivers/gpu/drm/rcar-du/rcar_du_drv.h     |  1 +
 drivers/gpu/drm/rcar-du/rcar_du_encoder.c | 35 +++++++++++++++++++++++++++----
 drivers/gpu/drm/rcar-du/rcar_du_encoder.h |  1 +
 4 files changed, 35 insertions(+), 5 deletions(-)

diff --git a/drivers/gpu/drm/rcar-du/rcar_du_drv.c b/drivers/gpu/drm/rcar-du/rcar_du_drv.c
index 8b39906..25bf91c 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_drv.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_drv.c
@@ -274,7 +274,8 @@ static const struct rcar_du_device_info rcar_du_r8a7790_info = {
 };
 
 static const struct rcar_du_device_info rcar_du_r8a7791_info = {
-	.features = RCAR_DU_FEATURE_CRTC_IRQ_CLOCK | RCAR_DU_FEATURE_DEFR8,
+	.features = RCAR_DU_FEATURE_CRTC_IRQ_CLOCK | RCAR_DU_FEATURE_DEFR8
+		  | RCAR_DU_FEATURE_NO_LVDS_INTERFACE,
 	.num_crtcs = 2,
 	.routes = {
 		/* R8A7791 has one LVDS output, one HDMI outputs and one
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_drv.h b/drivers/gpu/drm/rcar-du/rcar_du_drv.h
index d5cd409..7952db4 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_drv.h
+++ b/drivers/gpu/drm/rcar-du/rcar_du_drv.h
@@ -32,6 +32,7 @@ struct rcar_du_lvdsenc;
 #define RCAR_DU_FEATURE_DEFR8		(1 << 2)	/* Has DEFR8 register */
 #define RCAR_DU_FEATURE_VSP1_SOURCE	(1 << 3)	/* Has inputs from VSP1 */
 #define RCAR_DU_FEATURE_LVDCHCR_WORKAROUND	(1 << 4)
+#define RCAR_DU_FEATURE_NO_LVDS_INTERFACE	(1 << 5)
 
 /*
  * struct rcar_du_output_routing - Output routing specification
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_encoder.c b/drivers/gpu/drm/rcar-du/rcar_du_encoder.c
index f0f581b..552a238 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_encoder.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_encoder.c
@@ -48,11 +48,17 @@ rcar_du_connector_best_encoder(struct drm_connector *connector)
 static void rcar_du_encoder_dpms(struct drm_encoder *encoder, int mode)
 {
 	struct rcar_du_encoder *renc = rcar_du_encoder(encoder);
+	unsigned int output;
 
 	if (renc->lvds)
 		rcar_du_lvdsenc_dpms(renc->lvds, encoder->crtc, mode);
 
-	if ((renc->output == RCAR_DU_OUTPUT_LVDS0) &&
+	if (rcar_du_has(renc->dev, RCAR_DU_FEATURE_NO_LVDS_INTERFACE))
+		output = RCAR_DU_OUTPUT_DPAD0;
+	else
+		output = RCAR_DU_OUTPUT_LVDS0;
+
+	if ((renc->output == output) &&
 			(get_rcar_slave_funcs(encoder)->dpms))
 		get_rcar_slave_funcs(encoder)->dpms(encoder, mode);
 }
@@ -113,11 +119,18 @@ static bool rcar_du_encoder_mode_fixup(struct drm_encoder *encoder,
 static void rcar_du_encoder_mode_prepare(struct drm_encoder *encoder)
 {
 	struct rcar_du_encoder *renc = rcar_du_encoder(encoder);
+	unsigned int output;
 
 	if (renc->lvds)
 		rcar_du_lvdsenc_dpms(renc->lvds, encoder->crtc,
 				     DRM_MODE_DPMS_OFF);
-	if ((renc->output == RCAR_DU_OUTPUT_LVDS0) &&
+
+	if (rcar_du_has(renc->dev, RCAR_DU_FEATURE_NO_LVDS_INTERFACE))
+		output = RCAR_DU_OUTPUT_DPAD0;
+	else
+		output = RCAR_DU_OUTPUT_LVDS0;
+
+	if ((renc->output == output) &&
 		(get_rcar_slave_funcs(encoder)->dpms))
 		get_rcar_slave_funcs(encoder)->dpms(encoder, DRM_MODE_DPMS_OFF);
 }
@@ -125,11 +138,18 @@ static void rcar_du_encoder_mode_prepare(struct drm_encoder *encoder)
 static void rcar_du_encoder_mode_commit(struct drm_encoder *encoder)
 {
 	struct rcar_du_encoder *renc = rcar_du_encoder(encoder);
+	unsigned int output;
 
 	if (renc->lvds)
 		rcar_du_lvdsenc_dpms(renc->lvds, encoder->crtc,
 				     DRM_MODE_DPMS_ON);
-	if ((renc->output == RCAR_DU_OUTPUT_LVDS0) &&
+
+	if (rcar_du_has(renc->dev, RCAR_DU_FEATURE_NO_LVDS_INTERFACE))
+		output = RCAR_DU_OUTPUT_DPAD0;
+	else
+		output = RCAR_DU_OUTPUT_LVDS0;
+
+	if ((renc->output == output) &&
 		(get_rcar_slave_funcs(encoder)->dpms))
 		get_rcar_slave_funcs(encoder)->dpms(encoder, DRM_MODE_DPMS_ON);
 }
@@ -139,10 +159,16 @@ static void rcar_du_encoder_mode_set(struct drm_encoder *encoder,
 				     struct drm_display_mode *adjusted_mode)
 {
 	struct rcar_du_encoder *renc = rcar_du_encoder(encoder);
+	unsigned int output;
 
 	rcar_du_crtc_route_output(encoder->crtc, renc->output);
 
-	if ((renc->output == RCAR_DU_OUTPUT_LVDS0) &&
+	if (rcar_du_has(renc->dev, RCAR_DU_FEATURE_NO_LVDS_INTERFACE))
+		output = RCAR_DU_OUTPUT_DPAD0;
+	else
+		output = RCAR_DU_OUTPUT_LVDS0;
+
+	if ((renc->output == output) &&
 		(get_rcar_slave_funcs(encoder)->mode_set))
 		get_rcar_slave_funcs(encoder)->mode_set(encoder,
 						 mode, adjusted_mode);
@@ -206,6 +232,7 @@ int rcar_du_encoder_init(struct rcar_du_device *rcdu,
 		return -ENOMEM;
 
 	renc->output = output;
+	renc->dev = rcdu;
 
 	switch (output) {
 	case RCAR_DU_OUTPUT_LVDS0:
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_encoder.h b/drivers/gpu/drm/rcar-du/rcar_du_encoder.h
index 188bc29..944ab02 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_encoder.h
+++ b/drivers/gpu/drm/rcar-du/rcar_du_encoder.h
@@ -26,6 +26,7 @@ struct rcar_du_encoder {
 	struct drm_encoder *encoder;
 	enum rcar_du_output output;
 	struct rcar_du_lvdsenc *lvds;
+	struct rcar_du_device *dev;
 };
 
 #define to_rcar_encoder(e) \
-- 
1.8.3.2


From e653391d653cc357a8caa05afd83eb690565c5ef Mon Sep 17 00:00:00 2001
From: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date: Thu, 28 Mar 2013 13:10:50 +0100
Subject: [PATCH 0994/1083] drm/rcar-du: Add plane property to set global alpha
 value

The global alpha value is only valid in the XRGB1555 format.

Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
(cherry picked from commit 0131cc2daca5de88c97ef75f4ac1ea48fbc9ac40)

Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
(cherry picked from commit c610be25f4c31fc818190c28c9e22a8ca91eebc4)

Signed-off-by: Ryo Kataoka <ryo.kataoka.wt@renesas.com>
---
 drivers/gpu/drm/rcar-du/rcar_du_drv.h   |  1 +
 drivers/gpu/drm/rcar-du/rcar_du_kms.c   |  2 +-
 drivers/gpu/drm/rcar-du/rcar_du_plane.c | 54 +++++++++++++++++++++++++--------
 drivers/gpu/drm/rcar-du/rcar_du_plane.h |  1 +
 4 files changed, 45 insertions(+), 13 deletions(-)

diff --git a/drivers/gpu/drm/rcar-du/rcar_du_drv.h b/drivers/gpu/drm/rcar-du/rcar_du_drv.h
index 73faf77..193cc59 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_drv.h
+++ b/drivers/gpu/drm/rcar-du/rcar_du_drv.h
@@ -44,6 +44,7 @@ struct rcar_du_device {
 		unsigned int free;
 		struct mutex lock;
 
+		struct drm_property *alpha;
 		struct drm_property *colorkey;
 		struct drm_property *zpos;
 	} planes;
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_kms.c b/drivers/gpu/drm/rcar-du/rcar_du_kms.c
index 2c537c2..9c63f39 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_kms.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_kms.c
@@ -45,7 +45,7 @@ static const struct rcar_du_format_info rcar_du_format_infos[] = {
 		.fourcc = DRM_FORMAT_XRGB1555,
 		.bpp = 16,
 		.planes = 1,
-		.pnmr = PnMR_SPIM_TP | PnMR_DDDF_ARGB,
+		.pnmr = PnMR_SPIM_ALP | PnMR_DDDF_ARGB,
 		.edf = PnDDCR4_EDF_NONE,
 	}, {
 		.fourcc = DRM_FORMAT_XRGB8888,
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_plane.c b/drivers/gpu/drm/rcar-du/rcar_du_plane.c
index e1e0a9b..d4c66df 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_plane.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_plane.c
@@ -137,6 +137,21 @@ static void rcar_du_plane_setup_mode(struct rcar_du_plane *plane,
 	u32 colorkey;
 	u32 pnmr;
 
+	/* The PnALPHAR register controls alpha-blending in 16bpp formats
+	 * (ARGB1555 and XRGB1555).
+	 *
+	 * For ARGB, set the alpha value to 0, and enable alpha-blending when
+	 * the A bit is 0. This maps A=0 to alpha=0 and A=1 to alpha=255.
+	 *
+	 * For XRGB, set the alpha value to the plane-wide alpha value and
+	 * enable alpha-blending regardless of the X bit value.
+	 */
+	if (plane->format->fourcc != DRM_FORMAT_XRGB1555)
+		rcar_du_plane_write(rcdu, index, PnALPHAR, PnALPHAR_ABIT_0);
+	else
+		rcar_du_plane_write(rcdu, index, PnALPHAR,
+				    PnALPHAR_ABIT_X | plane->alpha);
+
 	pnmr = PnMR_BM_MD | plane->format->pnmr;
 
 	/* Disable color keying when requested. YUV formats have the
@@ -213,12 +228,6 @@ static void __rcar_du_plane_setup(struct rcar_du_plane *plane,
 	rcar_du_plane_write(rcdu, index, PnDDCR2, ddcr2);
 	rcar_du_plane_write(rcdu, index, PnDDCR4, ddcr4);
 
-	/* The PnALPHAR register controls alpha-blending in 16bpp formats
-	 * (ARGB1555). Set the alpha value to 0, and enable alpha-blending when
-	 * the A bit is 0. This maps A=0 to alpha=0 and A=1 to alpha=255.
-	 */
-	rcar_du_plane_write(rcdu, index, PnALPHAR, PnALPHAR_ABIT_0);
-
 	/* Memory pitch (expressed in pixels) */
 	if (plane->format->planes == 2)
 		mwr = plane->pitch;
@@ -329,6 +338,22 @@ static int rcar_du_plane_disable(struct drm_plane *plane)
 	return 0;
 }
 
+/* Both the .set_property and the .update_plane operations are called with the
+ * mode_config lock held. There is this no need to explicitly protect access to
+ * the alpha and colorkey fields and the mode register.
+ */
+static void rcar_du_plane_set_alpha(struct rcar_du_plane *plane, u32 alpha)
+{
+	if (plane->alpha == alpha)
+		return;
+
+	plane->alpha = alpha;
+	if (!plane->enabled || plane->format->fourcc != DRM_FORMAT_XRGB1555)
+		return;
+
+	rcar_du_plane_setup_mode(plane, plane->hwindex);
+}
+
 static void rcar_du_plane_set_colorkey(struct rcar_du_plane *plane,
 				       u32 colorkey)
 {
@@ -339,10 +364,6 @@ static void rcar_du_plane_set_colorkey(struct rcar_du_plane *plane,
 	if (!plane->enabled)
 		return;
 
-	/* Both the .set_property and the .update_plane operations are called
-	 * with the mode_config lock held. There is this no need to explicitly
-	 * protect access to the colorkey field and the mode register.
-	 */
 	rcar_du_plane_setup_mode(plane, plane->hwindex);
 }
 
@@ -372,7 +393,9 @@ static int rcar_du_plane_set_property(struct drm_plane *plane,
 	struct rcar_du_device *rcdu = plane->dev->dev_private;
 	struct rcar_du_plane *rplane = to_rcar_plane(plane);
 
-	if (property == rcdu->planes.colorkey)
+	if (property == rcdu->planes.alpha)
+		rcar_du_plane_set_alpha(rplane, value);
+	else if (property == rcdu->planes.colorkey)
 		rcar_du_plane_set_colorkey(rplane, value);
 	else if (property == rcdu->planes.zpos)
 		rcar_du_plane_set_zpos(rplane, value);
@@ -409,6 +432,11 @@ int rcar_du_plane_init(struct rcar_du_device *rcdu)
 	mutex_init(&rcdu->planes.lock);
 	rcdu->planes.free = 0xff;
 
+	rcdu->planes.alpha =
+		drm_property_create_range(rcdu->ddev, 0, "alpha", 0, 255);
+	if (rcdu->planes.alpha == NULL)
+		return -ENOMEM;
+
 	/* The color key is expressed as an RGB888 triplet stored in a 32-bit
 	 * integer in XRGB8888 format. Bit 24 is used as a flag to disable (0)
 	 * or enable source color keying (1).
@@ -429,6 +457,7 @@ int rcar_du_plane_init(struct rcar_du_device *rcdu)
 
 		plane->dev = rcdu;
 		plane->hwindex = -1;
+		plane->alpha = 255;
 		plane->colorkey = RCAR_DU_COLORKEY_NONE;
 		plane->zpos = 0;
 	}
@@ -459,11 +488,12 @@ int rcar_du_plane_register(struct rcar_du_device *rcdu)
 			return ret;
 
 		drm_object_attach_property(&plane->plane.base,
+					   rcdu->planes.alpha, 255);
+		drm_object_attach_property(&plane->plane.base,
 					   rcdu->planes.colorkey,
 					   RCAR_DU_COLORKEY_NONE);
 		drm_object_attach_property(&plane->plane.base,
 					   rcdu->planes.zpos, 1);
-
 	}
 
 	return 0;
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_plane.h b/drivers/gpu/drm/rcar-du/rcar_du_plane.h
index 4f3ae12..5397dba 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_plane.h
+++ b/drivers/gpu/drm/rcar-du/rcar_du_plane.h
@@ -36,6 +36,7 @@ struct rcar_du_plane {
 	bool enabled;
 
 	int hwindex;		/* 0-based, -1 means unused */
+	unsigned int alpha;
 	unsigned int colorkey;
 	unsigned int zpos;
 
-- 
1.8.3.2


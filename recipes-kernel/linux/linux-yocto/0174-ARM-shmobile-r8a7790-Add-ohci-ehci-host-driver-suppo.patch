From d95af689f0b6c51a49c97ca9cb01ee2f4d15cdd1 Mon Sep 17 00:00:00 2001
From: Shinobu Uehara <shinobu.uehara.xc@renesas.com>
Date: Thu, 11 Apr 2013 14:01:41 +0900
Subject: ARM: shmobile: r8a7790: Add ohci/ehci host driver support

Signed-off-by: Kouei Abe <kouei.abe.cp@renesas.com>
---
 arch/arm/configs/lager_defconfig              |   14 +-
 arch/arm/mach-shmobile/board-lager.c          |  351 +++++++++++++++++++++++++
 arch/arm/mach-shmobile/include/mach/r8a7790.h |  155 +++++++++++
 3 files changed, 518 insertions(+), 2 deletions(-)

diff --git a/arch/arm/configs/lager_defconfig b/arch/arm/configs/lager_defconfig
index 15e4fdc..e876bb0 100644
--- a/arch/arm/configs/lager_defconfig
+++ b/arch/arm/configs/lager_defconfig
@@ -51,6 +51,8 @@ CONFIG_DEVTMPFS_MOUNT=y
 # CONFIG_STANDALONE is not set
 # CONFIG_PREVENT_FIRMWARE_BUILD is not set
 # CONFIG_FW_LOADER is not set
+CONFIG_SCSI=y
+CONFIG_BLK_DEV_SD=y
 CONFIG_NETDEVICES=y
 # CONFIG_NET_VENDOR_BROADCOM is not set
 # CONFIG_NET_VENDOR_FARADAY is not set
@@ -62,6 +64,7 @@ CONFIG_SH_ETH=y
 # CONFIG_NET_VENDOR_STMICRO is not set
 # CONFIG_WLAN is not set
 # CONFIG_INPUT_MOUSEDEV is not set
+CONFIG_INPUT_EVDEV=y
 # CONFIG_INPUT_KEYBOARD is not set
 # CONFIG_INPUT_MOUSE is not set
 # CONFIG_SERIO is not set
@@ -78,8 +81,15 @@ CONFIG_DRM=y
 CONFIG_DRM_RCAR_DU=y
 CONFIG_FRAMEBUFFER_CONSOLE=y
 CONFIG_LOGO=y
-# CONFIG_HID_SUPPORT is not set
-# CONFIG_USB_SUPPORT is not set
+CONFIG_HID_SUPPORT=y
+CONFIG_USB_SUPPORT=y
+CONFIG_USB=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_ROOT_HUB_TT=y
+CONFIG_USB_OHCI_HCD=y
+CONFIG_USB_OHCI_HCD_PLATFORM=y
+CONFIG_USB_EHCI_HCD_PLATFORM=y
+CONFIG_USB_STORAGE=y
 CONFIG_UIO=y
 CONFIG_UIO_PDRV_GENIRQ=y
 # CONFIG_IOMMU_SUPPORT is not set
diff --git a/arch/arm/mach-shmobile/board-lager.c b/arch/arm/mach-shmobile/board-lager.c
index ee649fc..4ef11f4 100644
--- a/arch/arm/mach-shmobile/board-lager.c
+++ b/arch/arm/mach-shmobile/board-lager.c
@@ -25,6 +25,9 @@
 #include <linux/platform_device.h>
 #include <linux/gpio.h>
 #include <linux/clk.h>
+#include <linux/err.h>
+#include <linux/usb/ehci_pdriver.h>
+#include <linux/usb/ohci_pdriver.h>
 #include <mach/r8a7790.h>
 #include <mach/common.h>
 #include <mach/irqs.h>
@@ -35,7 +38,169 @@
 #include <asm/arch_timer.h>
 #include <asm/hardware/gic.h>
 
+static u64 usb_dmamask = ~(u32)0;
+
+struct usb_ehci_pdata ehci_pdata = {
+	.caps_offset	= 0,
+	.has_tt		= 0,
+};
+
+struct usb_ohci_pdata ohci_pdata = {
+};
+
+static struct resource ehci0_resources[] = {
+	[0] = {
+		.start	= 0xee080000 + 0x1000,
+		.end	= 0xee080000 + 0x1000 + 0x0fff - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= gic_spi(108),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+struct platform_device ehci0_device = {
+	.name	= "ehci-platform",
+	.id	= 0,
+	.dev	= {
+		.platform_data		= &ehci_pdata,
+		.dma_mask		= &usb_dmamask,
+		.coherent_dma_mask	= 0xffffffff,
+	},
+	.num_resources	= ARRAY_SIZE(ehci0_resources),
+	.resource	= ehci0_resources,
+};
+
+static struct resource ohci0_resources[] = {
+	[0] = {
+		.start	= 0xee080000,
+		.end	= 0xee080000 + 0x0fff - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= gic_spi(108),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+struct platform_device ohci0_device = {
+	.name	= "ohci-platform",
+	.id	= 0,
+	.dev	= {
+		.platform_data		= &ohci_pdata,
+		.dma_mask		= &usb_dmamask,
+		.coherent_dma_mask	= 0xffffffff,
+	},
+	.num_resources	= ARRAY_SIZE(ohci0_resources),
+	.resource	= ohci0_resources,
+};
+
+static struct resource ehci1_resources[] = {
+	[0] = {
+		.start	= 0xee0a0000 + 0x1000,
+		.end	= 0xee0a0000 + 0x1000 + 0x0fff - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= gic_spi(112),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+struct platform_device ehci1_device = {
+	.name	= "ehci-platform",
+	.id	= 1,
+	.dev	= {
+		.platform_data		= &ehci_pdata,
+		.dma_mask		= &usb_dmamask,
+		.coherent_dma_mask	= 0xffffffff,
+	},
+	.num_resources	= ARRAY_SIZE(ehci1_resources),
+	.resource	= ehci1_resources,
+};
+
+static struct resource ohci1_resources[] = {
+	[0] = {
+		.start	= 0xee0a0000,
+		.end	= 0xee0a0000 + 0x0fff - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= gic_spi(112),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+struct platform_device ohci1_device = {
+	.name	= "ohci-platform",
+	.id	= 1,
+	.dev	= {
+		.platform_data		= &ohci_pdata,
+		.dma_mask		= &usb_dmamask,
+		.coherent_dma_mask	= 0xffffffff,
+	},
+	.num_resources	= ARRAY_SIZE(ohci1_resources),
+	.resource	= ohci1_resources,
+};
+
+static struct resource ehci2_resources[] = {
+	[0] = {
+		.start	= 0xee0c0000 + 0x1000,
+		.end	= 0xee0c0000 + 0x1000 + 0x0fff - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= gic_spi(113),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+
+struct platform_device ehci2_device = {
+	.name	= "ehci-platform",
+	.id	= 2,
+	.dev	= {
+		.platform_data		= &ehci_pdata,
+		.dma_mask		= &usb_dmamask,
+		.coherent_dma_mask	= 0xffffffff,
+	},
+	.num_resources	= ARRAY_SIZE(ehci2_resources),
+	.resource	= ehci2_resources,
+};
+
+static struct resource ohci2_resources[] = {
+	[0] = {
+		.start	= 0xee0c0000,
+		.end	= 0xee0c0000 + 0x0fff - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= gic_spi(113),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+
+struct platform_device ohci2_device = {
+	.name	= "ohci-platform",
+	.id	= 2,
+	.dev	= {
+		.platform_data		= &ohci_pdata,
+		.dma_mask		= &usb_dmamask,
+		.coherent_dma_mask	= 0xffffffff,
+	},
+	.num_resources	= ARRAY_SIZE(ohci2_resources),
+	.resource	= ohci2_resources,
+};
+
 static struct platform_device *lager_devices[] __initdata = {
+	&ehci0_device,
+	&ohci0_device,
+	&ehci1_device,
+	&ohci1_device,
+	&ehci2_device,
+	&ohci2_device,
 };
 
 static struct map_desc lager_io_desc[] __initdata = {
@@ -47,6 +212,182 @@ static struct map_desc lager_io_desc[] __initdata = {
 	},
 };
 
+static void __init usbh_internal_pci_bridge_init(int ch)
+{
+	u32 data;
+	void __iomem *ahbpci_base =
+		ioremap_nocache((AHBPCI_BASE + (ch * 0x20000)), 0x400);
+	void __iomem *pci_conf_ahbpci_bas =
+		ioremap_nocache((PCI_CONF_AHBPCI_BAS + (ch * 0x20000)),
+								0x100);
+
+	/* Clock & Reset & Direct Power Down */
+	data = ioread32(ahbpci_base + USBCTR);
+	data &= ~(DIRPD);
+	iowrite32(data, (ahbpci_base + USBCTR));
+
+	data &= ~(PLL_RST | PCICLK_MASK | USBH_RST);
+	iowrite32(data | PCI_AHB_WIN1_SIZE_1G, (ahbpci_base + USBCTR));
+
+	data = ioread32((ahbpci_base + AHB_BUS_CTR));
+	if (data == AHB_BUS_CTR_SET)
+		return;
+
+	/****** AHB-PCI Bridge Communication Registers ******/
+	/* AHB_BUS_CTR */
+	iowrite32(AHB_BUS_CTR_SET, (ahbpci_base + AHB_BUS_CTR));
+
+	/* PCIAHB_WIN1_CTR */
+	iowrite32((0x40000000 | PREFETCH),
+			(ahbpci_base + PCIAHB_WIN1_CTR));
+
+	/* AHBPCI_WIN2_CTR */
+	iowrite32((SHUSBH_OHCI_BASE | PCIWIN2_PCICMD),
+			(ahbpci_base + AHBPCI_WIN2_CTR));
+
+	/* PCI_ARBITER_CTR */
+	data = ioread32((ahbpci_base + PCI_ARBITER_CTR));
+	data |= (PCIBP_MODE | PCIREQ1 | PCIREQ0);
+	iowrite32(data, (ahbpci_base + PCI_ARBITER_CTR));
+
+	/* AHBPCI_WIN1_CTR : set PCI Configuratin Register for AHBPCI */
+	iowrite32(PCIWIN1_PCICMD | AHB_CFG_AHBPCI,
+			(ahbpci_base + AHBPCI_WIN1_CTR));
+
+	/****** PCI Configuration Registers for AHBPCI ******/
+	/* BASEAD */
+	iowrite32(AHBPCI_BASE, (pci_conf_ahbpci_bas + BASEAD));
+
+	/* WIN1_BASEAD */
+	iowrite32(0x40000000, (pci_conf_ahbpci_bas + WIN1_BASEAD));
+
+	/* System error enable, Parity error enable, PCI Master enable, */
+	/* Memory cycle enable */
+	iowrite32(((ioread32(pci_conf_ahbpci_bas + CMND_STS) & ~0x00100000)
+			| (SERREN | PERREN | MASTEREN | MEMEN)),
+			(pci_conf_ahbpci_bas + CMND_STS));
+
+	/****** PCI Configuration Registers for OHCI/EHCI ******/
+	iowrite32(PCIWIN1_PCICMD | AHB_CFG_HOST,
+			(ahbpci_base + AHBPCI_WIN1_CTR));
+
+	iounmap(ahbpci_base);
+	iounmap(pci_conf_ahbpci_bas);
+}
+
+static int __init usbh_ohci_init(int ch)
+{
+	u32 val;
+	int retval;
+
+	void __iomem *pci_conf_ohci_base
+		= ioremap_nocache((PCI_CONF_OHCI_BASE + (ch * 0x20000)),
+								0x100);
+
+	val = ioread32((pci_conf_ohci_base + OHCI_VID_DID));
+
+	if (val == OHCI_ID) {
+		/* OHCI_BASEAD */
+		iowrite32(SHUSBH_OHCI_BASE,
+				(pci_conf_ohci_base + OHCI_BASEAD));
+		retval = 0;
+
+		/* System error enable, Parity error enable, */
+		/* PCI Master enable, Memory cycle enable */
+		iowrite32(ioread32(pci_conf_ohci_base + OHCI_CMND_STS)
+				| (SERREN | PERREN | MASTEREN | MEMEN),
+				(pci_conf_ohci_base + OHCI_CMND_STS));
+	} else {
+		printk(KERN_ERR "Don't found OHCI controller. %x\n", val);
+		retval = -1;
+	}
+	iounmap(pci_conf_ohci_base);
+
+	return retval;
+}
+
+static int __init usbh_ehci_init(int ch)
+{
+	u32 val;
+	int retval;
+
+	void __iomem *pci_conf_ehci_base
+		= ioremap_nocache((PCI_CONF_EHCI_BASE + (ch * 0x20000)),
+								 0x100);
+
+	val = ioread32((pci_conf_ehci_base + EHCI_VID_DID));
+	if (val == EHCI_ID) {
+		/* EHCI_BASEAD */
+		iowrite32(SHUSBH_EHCI_BASE,
+				(pci_conf_ehci_base + EHCI_BASEAD));
+
+		/* System error enable, Parity error enable, */
+		/* PCI Master enable, Memory cycle enable */
+		iowrite32(ioread32(pci_conf_ehci_base + EHCI_CMND_STS) |
+				(SERREN | PERREN | MASTEREN | MEMEN),
+				(pci_conf_ehci_base + EHCI_CMND_STS));
+		retval = 0;
+	} else {
+		printk(KERN_ERR "Don't found EHCI controller. %x\n", val);
+		retval = -1;
+	}
+	iounmap(pci_conf_ehci_base);
+
+	return retval;
+}
+
+static void __init usbh_pci_int_enable(int ch)
+{
+	void __iomem *ahbpci_base =
+		ioremap_nocache((AHBPCI_BASE + (ch * 0x20000)), 0x400);
+	u32 data;
+
+	/* PCI_INT_ENABLE */
+	data = ioread32((ahbpci_base + PCI_INT_ENABLE));
+	data |= USBH_PMEEN | USBH_INTBEN | USBH_INTAEN;
+	iowrite32(data, (ahbpci_base + PCI_INT_ENABLE));
+
+	iounmap(ahbpci_base);
+}
+
+static int __init usbh_init(void)
+{
+	struct clk *clk_hs, *clk_ehci;
+	u32 hs_usb = 0xE6590000;
+	unsigned int ch;
+
+	clk_hs = clk_get(NULL, "hs_usb");
+	if (IS_ERR(clk_hs))
+		clk_hs = NULL;
+
+	clk_enable(clk_hs);
+
+	clk_ehci = clk_get(NULL, "usb_fck");
+	if (IS_ERR(clk_ehci))
+		clk_ehci = NULL;
+
+	clk_enable(clk_ehci);
+
+	/* Set EHCI for UGCTRL2 */
+	__raw_writel(0x00000011, (hs_usb + 0x184));
+
+	for (ch = 0; ch < SHUSBH_MAX_CH; ch++) {
+		/* internal pci-bus bridge initialize */
+		usbh_internal_pci_bridge_init(ch);
+
+		/* ohci initialize */
+		usbh_ohci_init(ch);
+
+		/* ehci initialize */
+		usbh_ehci_init(ch);
+
+		/* pci int enable */
+		usbh_pci_int_enable(ch);
+	}
+
+	return 0;
+}
+
 static void __init lager_map_io(void)
 {
 	iotable_init(lager_io_desc, ARRAY_SIZE(lager_io_desc));
@@ -91,6 +432,16 @@ static void __init lager_init(void)
 	gpio_request(GPIO_FN_DU2_CDE, NULL);
 	gpio_request(GPIO_FN_DU2_EXODDF_DU2_ODDF_DISP_CDE, NULL);
 
+	/* USB Host */
+	gpio_request(GPIO_FN_USB0_PWEN, NULL);
+	gpio_request(GPIO_FN_USB0_OVC_VBUS, NULL);
+	gpio_request(GPIO_FN_USB1_PWEN, NULL);
+	gpio_request(GPIO_FN_USB1_OVC, NULL);
+	gpio_request(GPIO_FN_USB2_PWEN, NULL);
+	gpio_request(GPIO_FN_USB2_OVC, NULL);
+
+	usbh_init();
+
 	r8a7790_add_standard_devices();
 	platform_add_devices(lager_devices, ARRAY_SIZE(lager_devices));
 }
diff --git a/arch/arm/mach-shmobile/include/mach/r8a7790.h b/arch/arm/mach-shmobile/include/mach/r8a7790.h
index 5a90e86..c409e4f 100644
--- a/arch/arm/mach-shmobile/include/mach/r8a7790.h
+++ b/arch/arm/mach-shmobile/include/mach/r8a7790.h
@@ -404,4 +404,159 @@ enum {
 	GPIO_FN_TCLK1_B,
 };
 
+/* USB Host */
+#define SHUSBH_MAX_CH		3
+
+#define SHUSBH_BASE		UL(0xee080000)
+#define SHUSBH_OHCI_BASE	(SHUSBH_BASE)
+#define SHUSBH_OHCI_SIZE	0x1000
+#define SHUSBH_EHCI_BASE	(SHUSBH_BASE + 0x1000)
+#define SHUSBH_EHCI_SIZE	0x1000
+
+/* PCI Configuration Registers for AHB-PCI Bridge Registers */
+#define PCI_CONF_AHBPCI_BAS	(SHUSBH_BASE + 0x10000)
+#define VID_DID			0x0000
+#define CMND_STS		0x0004
+#define REVID_CC		0x0008
+#define CLS_LT_HT_BIST		0x000C
+#define BASEAD			0x0010
+#define WIN1_BASEAD		0x0014
+#define WIN2_BASEAD		0x0018
+#define SSVID_SSID		0x002C
+
+/* PCI Configuration Registers for OHCI/EHCI */
+#define PCI_CONF_OHCI_BASE	(SHUSBH_BASE + 0x10000)
+#define OHCI_VID_DID		0x0000
+#define OHCI_CMND_STS		0x0004
+#define OHCI_BASEAD		0x0010
+
+#define PCI_CONF_EHCI_BASE	(SHUSBH_BASE + 0x10100)
+#define EHCI_VID_DID		0x0000
+#define EHCI_CMND_STS		0x0004
+#define EHCI_BASEAD		0x0010
+
+/* AHB-PCI Bridge Register */
+#define AHBPCI_BASE		(SHUSBH_BASE + 0x10800)
+#define PCIAHB_WIN1_CTR		0x0000
+#define PCIAHB_WIN2_CTR		0x0004
+#define PCIAHB_DCT_CTR		0x0008
+#define AHBPCI_WIN1_CTR		0x0010
+#define AHBPCI_WIN2_CTR		0x0014
+#define AHBPCI_DCT_CTR		0x001C
+#define PCI_INT_ENABLE		0x0020
+#define PCI_INT_STATUS		0x0024
+#define AHB_BUS_CTR		0x0030
+#define USBCTR			0x0034
+#define PCI_ARBITER_CTR		0x0040
+#define PCI_UNIT_REV		0x004C
+
+/* BIT */
+#define BIT00			0x00000001
+#define BIT01			0x00000002
+#define BIT02			0x00000004
+#define BIT03			0x00000008
+#define BIT04			0x00000010
+#define BIT05			0x00000020
+#define BIT06			0x00000040
+#define BIT07			0x00000080
+#define BIT08			0x00000100
+#define BIT09			0x00000200
+#define BIT10			0x00000400
+#define BIT11			0x00000800
+#define BIT12			0x00001000
+#define BIT13			0x00002000
+#define BIT14			0x00004000
+#define BIT15			0x00008000
+#define BIT16			0x00010000
+#define BIT17			0x00020000
+#define BIT18			0x00040000
+#define BIT19			0x00080000
+#define BIT20			0x00100000
+#define BIT21			0x00200000
+#define BIT22			0x00400000
+#define BIT23			0x00800000
+#define BIT24			0x01000000
+#define BIT25			0x02000000
+#define BIT26			0x04000000
+#define BIT27			0x08000000
+#define BIT28			0x10000000
+#define BIT29			0x20000000
+#define BIT30			0x40000000
+#define BIT31			0x80000000
+
+/*** PCI Configration Register for OHCI ***/
+/* VendorID, DeviceID 00h */
+#define OHCI_ID			0x00351033
+
+/*** PCI Configration Register for EHCI ***/
+/* VendorID, DeviceID 00h */
+#define EHCI_ID			0x00e01033
+
+/*** PCI Configration Register for AHB-PCI Bridge ***/
+/* CMND_STS 04h */
+#define DETPERR			BIT31
+#define SIGSERR			BIT30
+#define REMABORT		BIT29
+#define RETABORT		BIT28
+#define SIGTABORT		BIT27
+#define DEVTIM			(BIT26|BIT25)
+#define MDPERR			BIT24
+#define FBTBCAP			BIT23
+
+#define _66MCAP			BIT21
+#define CAPLIST			BIT20
+
+#define FBTBEN			BIT09
+#define SERREN			BIT08
+#define STEPCTR			BIT07
+#define PERREN			BIT06
+#define VGAPSNP			BIT05
+#define MWINVEN			BIT04
+#define SPECIALC		BIT03
+#define MASTEREN		BIT02
+#define MEMEN			BIT01
+#define IOEN			BIT00
+
+/*** AHB-PCI Bridge Setting ***/
+/* PCIAHB_WIN1_CTR 0x0800 */
+#define PREFETCH		(BIT01|BIT00)
+/* AHBPCI_WIN*_CTR 0810h,0814h */
+#define PCIWIN1_PCICMD		(BIT03|BIT01)
+
+#define AHB_CFG_HOST		0x80000000
+
+#define AHB_CFG_AHBPCI		0x40000000
+#define PCIWIN2_PCICMD		(BIT02|BIT01)
+
+/* PCI_INT_ENABLE 0820h */
+#define USBH_PMEEN		BIT19
+#define USBH_INTBEN		BIT17
+#define USBH_INTAEN		BIT16
+#define PCIAHB_WIN2_INTEN	BIT13
+#define PCIAHB_WIN1_INTEN	BIT12
+#define RESERR_INTEN		BIT05
+#define SIGSERR_INTEN		BIT04
+#define PERR_INTEN		BIT03
+#define REMARBORT_INTEN		BIT02
+#define RETARBORT_INTEN		BIT01
+#define SIGTARBORT_INTEN	BIT00
+
+/* AHB_BUS_CTR 0830h */
+#define AHB_BUS_CTR_SET \
+	(BIT17 | BIT07 | BIT02 | BIT01 | BIT00)
+/* USBCTR 0834h */
+#define PCI_AHB_WIN1_SIZE_256M	0
+#define PCI_AHB_WIN1_SIZE_512M	BIT10
+#define PCI_AHB_WIN1_SIZE_1G	BIT11
+#define PCI_AHB_WIN1_SIZE_2G	(BIT10 | BIT11)
+#define DIRPD			BIT08
+#define PLL_RST			BIT02
+#define PCICLK_MASK		BIT01
+#define USBH_RST		BIT00
+
+/* PCI_ARBITER_CTR 0840h */
+#define PCIBP_MODE		BIT12
+#define PCIREQ1			BIT01
+#define PCIREQ0			BIT00
+
 #endif /* __ASM_R8A7790_H__ */
-- 
1.7.10.4


From e5cb84990dba77572d2938e8ca973a828ee4d310 Mon Sep 17 00:00:00 2001
From: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date: Thu, 31 Jan 2013 09:03:22 +0000
Subject: [PATCH 0725/1083] thermal: rcar: use mutex lock instead of spin lock

Current R-Car thermal driver is using spin lock for each
registers read/write, but it is pointless lock.
This lock is required while reading temperature,
but it needs long wait (= 300ms).
So, this patch used mutex lock while reading temperature,
instead of spin lock for each registers.

Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Signed-off-by: Zhang Rui <rui.zhang@intel.com>
(cherry picked from commit b2bbc6a2ace78eaca2f6482b58b984519aa783ac)

Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
(cherry picked from commit f741e0995f0fb5ea32e05816098a75470915ab48)

Signed-off-by: Ryo Kataoka <ryo.kataoka.wt@renesas.com>
---
 drivers/thermal/rcar_thermal.c | 30 +++++++-----------------------
 1 file changed, 7 insertions(+), 23 deletions(-)

diff --git a/drivers/thermal/rcar_thermal.c b/drivers/thermal/rcar_thermal.c
index 2b59220..c86bf54 100644
--- a/drivers/thermal/rcar_thermal.c
+++ b/drivers/thermal/rcar_thermal.c
@@ -42,7 +42,7 @@
 struct rcar_thermal_priv {
 	void __iomem *base;
 	struct device *dev;
-	spinlock_t lock;
+	struct mutex lock;
 };
 
 #define MCELSIUS(temp)			((temp) * 1000)
@@ -54,46 +54,26 @@ struct rcar_thermal_priv {
  */
 static u32 rcar_thermal_read(struct rcar_thermal_priv *priv, u32 reg)
 {
-	unsigned long flags;
-	u32 ret;
-
-	spin_lock_irqsave(&priv->lock, flags);
-
-	ret = ioread32(priv->base + reg);
-
-	spin_unlock_irqrestore(&priv->lock, flags);
-
-	return ret;
+	return ioread32(priv->base + reg);
 }
 
 #if 0 /* no user at this point */
 static void rcar_thermal_write(struct rcar_thermal_priv *priv,
 			       u32 reg, u32 data)
 {
-	unsigned long flags;
-
-	spin_lock_irqsave(&priv->lock, flags);
-
 	iowrite32(data, priv->base + reg);
-
-	spin_unlock_irqrestore(&priv->lock, flags);
 }
 #endif
 
 static void rcar_thermal_bset(struct rcar_thermal_priv *priv, u32 reg,
 			      u32 mask, u32 data)
 {
-	unsigned long flags;
 	u32 val;
 
-	spin_lock_irqsave(&priv->lock, flags);
-
 	val = ioread32(priv->base + reg);
 	val &= ~mask;
 	val |= (data & mask);
 	iowrite32(val, priv->base + reg);
-
-	spin_unlock_irqrestore(&priv->lock, flags);
 }
 
 /*
@@ -107,6 +87,8 @@ static int rcar_thermal_get_temp(struct thermal_zone_device *zone,
 	int i;
 	int ctemp, old, new;
 
+	mutex_lock(&priv->lock);
+
 	/*
 	 * TSC decides a value of CPTAP automatically,
 	 * and this is the conditions which validate interrupt.
@@ -138,6 +120,8 @@ static int rcar_thermal_get_temp(struct thermal_zone_device *zone,
 
 	*temp = MCELSIUS((ctemp * 5) - 65);
 
+	mutex_unlock(&priv->lock);
+
 	return 0;
 }
 
@@ -225,7 +209,7 @@ static int rcar_thermal_probe(struct platform_device *pdev)
 	}
 
 	priv->dev = &pdev->dev;
-	spin_lock_init(&priv->lock);
+	mutex_init(&priv->lock);
 	priv->base = devm_ioremap_nocache(&pdev->dev,
 					  res->start, resource_size(res));
 	if (!priv->base) {
-- 
1.8.3.2


From 998659a46d5862187121ccdf723009ba105b7445 Mon Sep 17 00:00:00 2001
From: Shinobu Uehara <shinobu.uehara.xc@renesas.com>
Date: Fri, 14 Jun 2013 16:10:19 +0900
Subject: [PATCH 522/715] ARM: shmobile: r8a7790: Add SD driver support

Signed-off-by: Shinobu Uehara <shinobu.uehara.xc@renesas.com>
(cherry picked from commit 472cbac92cde64cbab5d3d1058bbae515955ee8f)

Conflicts:
	arch/arm/mach-shmobile/clock-r8a7790.c
	arch/arm/mach-shmobile/setup-r8a7790.c

Signed-off-by: Ryo Kataoka <ryo.kataoka.wt@renesas.com>
---
 arch/arm/configs/shmobile_defconfig    |    2 +
 arch/arm/mach-shmobile/board-lager.c   |   18 +++
 arch/arm/mach-shmobile/clock-r8a7790.c |   58 +++++++++
 arch/arm/mach-shmobile/setup-r8a7790.c |  212 +++++++++++++++++++++++++++++++-
 drivers/pinctrl/sh-pfc/pfc-r8a7790.c   |  172 ++++++++++++++++++++++++++
 5 files changed, 461 insertions(+), 1 deletion(-)

diff --git a/arch/arm/configs/shmobile_defconfig b/arch/arm/configs/shmobile_defconfig
index 18b9dfe..63fe511 100644
--- a/arch/arm/configs/shmobile_defconfig
+++ b/arch/arm/configs/shmobile_defconfig
@@ -143,6 +143,8 @@ CONFIG_USB_GADGET=y
 CONFIG_USB_RENESAS_USBHS_UDC=y
 CONFIG_USB_ETH=y
 CONFIG_MMC=y
+CONFIG_MMC_CLKGATE=y
+CONFIG_MMC_PASSWORDS=y
 CONFIG_MMC_SDHI=y
 CONFIG_MMC_SH_MMCIF=y
 CONFIG_RTC_CLASS=y
diff --git a/arch/arm/mach-shmobile/board-lager.c b/arch/arm/mach-shmobile/board-lager.c
index 660cafe..5e3760e 100644
--- a/arch/arm/mach-shmobile/board-lager.c
+++ b/arch/arm/mach-shmobile/board-lager.c
@@ -36,6 +36,24 @@ static const struct pinctrl_map lager_pinctrl_map[] = {
 	/* SCIF1 (CN20: DEBUG SERIAL1) */
 	PIN_MAP_MUX_GROUP_DEFAULT("sh-sci.7", "pfc-r8a7790",
 				  "scif1_data", "scif1"),
+	/* SDHI0 */
+	PIN_MAP_MUX_GROUP_DEFAULT("sh_mobile_sdhi.0", "pfc-r8a7790",
+				  "sdhi0_data4", "sdhi0"),
+	PIN_MAP_MUX_GROUP_DEFAULT("sh_mobile_sdhi.0", "pfc-r8a7790",
+				  "sdhi0_ctrl", "sdhi0"),
+	PIN_MAP_MUX_GROUP_DEFAULT("sh_mobile_sdhi.0", "pfc-r8a7790",
+				  "sdhi0_cd", "sdhi0"),
+	PIN_MAP_MUX_GROUP_DEFAULT("sh_mobile_sdhi.0", "pfc-r8a7790",
+				  "sdhi0_wp", "sdhi0"),
+	/* SDHI2 */
+	PIN_MAP_MUX_GROUP_DEFAULT("sh_mobile_sdhi.2", "pfc-r8a7790",
+				  "sdhi2_data4", "sdhi2"),
+	PIN_MAP_MUX_GROUP_DEFAULT("sh_mobile_sdhi.2", "pfc-r8a7790",
+				  "sdhi2_ctrl", "sdhi2"),
+	PIN_MAP_MUX_GROUP_DEFAULT("sh_mobile_sdhi.2", "pfc-r8a7790",
+				  "sdhi2_cd", "sdhi2"),
+	PIN_MAP_MUX_GROUP_DEFAULT("sh_mobile_sdhi.2", "pfc-r8a7790",
+				  "sdhi2_wp", "sdhi2"),
 };
 
 static void __init lager_add_standard_devices(void)
diff --git a/arch/arm/mach-shmobile/clock-r8a7790.c b/arch/arm/mach-shmobile/clock-r8a7790.c
index 9f73441..f70cce6 100644
--- a/arch/arm/mach-shmobile/clock-r8a7790.c
+++ b/arch/arm/mach-shmobile/clock-r8a7790.c
@@ -30,10 +30,15 @@
 
 #define SMSTPCR1	0xE6150134
 #define SMSTPCR2	0xe6150138
+#define SMSTPCR3	0xE615013C
 #define SMSTPCR7	0xe615014c
 #define SMSTPCR9	0xE6150994
 #define SMSTPCR10	0xE6150998
 
+#define SDCKCR		0xE6150074
+#define SD2CKCR		0xE6150078
+#define SD3CKCR		0xE615007C
+
 static struct clk_mapping cpg_mapping = {
 	.phys	= CPG_BASE,
 	.len	= CPG_LEN,
@@ -127,9 +132,48 @@ static struct clk *main_clks[] = {
 };
 
 enum {
+	SD0, SD1,
+	SD01_NR };
+
+enum {
+	SD2, SD3,
+	SD23_NR };
+
+static int sd01_divisors[] = { 0, 0, 0, 0, 0, 12, 16, 18, 24, 0, 36, 48, 10};
+
+static struct clk_div_mult_table sd01_div_mult_table = {
+	.divisors = sd01_divisors,
+	.nr_divisors = ARRAY_SIZE(sd01_divisors),
+};
+
+static struct clk_div4_table div4_table = {
+	.div_mult_table = &sd01_div_mult_table,
+};
+
+#define SD_DIV(_parent, _reg, _shift, _flags)			\
+{								\
+	.parent = _parent,					\
+	.enable_reg = (void __iomem *)_reg,			\
+	.enable_bit = _shift,					\
+	.div_mask = SH_CLK_DIV_MSK(4),				\
+	.flags = _flags,					\
+}
+
+static struct clk sd01_clks[SD01_NR] = {
+	[SD0] = SD_DIV(&pll1_d2_clk, SDCKCR, 4, 0),
+	[SD1] = SD_DIV(&pll1_d2_clk, SDCKCR, 0, 0),
+};
+
+static struct clk sd23_clks[SD23_NR] = {
+	[SD2] = SH_CLK_DIV6(&pll1_d4_clk, SD2CKCR, 0),
+	[SD3] = SH_CLK_DIV6(&pll1_d4_clk, SD3CKCR, 0),
+};
+
+enum {
 	MSTP112,
 	MSTP216, MSTP207, MSTP206, MSTP204, MSTP203, MSTP202,
 	MSTP726, MSTP725, MSTP724, MSTP723, MSTP721, MSTP720, MSTP704, MSTP703,
+	MSTP314, MSTP313, MSTP312, MSTP311,
 	MSTP929, MSTP922,
 	MSTP1031, MSTP1030, MSTP1019, MSTP1018, MSTP1017, MSTP1015, \
 	MSTP1014, MSTP1005,
@@ -145,6 +189,10 @@ static struct clk mstp_clks[MSTP_NR] = {
 	[MSTP202] = SH_CLK_MSTP32(&mp_clk, SMSTPCR2, 2, 0),
 	[MSTP726] = SH_CLK_MSTP32(&zg_clk, SMSTPCR7, 26, 0),
 	[MSTP725] = SH_CLK_MSTP32(&zg_clk, SMSTPCR7, 25, 0),
+	[MSTP314] = SH_CLK_MSTP32(&sd01_clks[SD0], SMSTPCR3, 14, 0),
+	[MSTP313] = SH_CLK_MSTP32(&sd01_clks[SD1], SMSTPCR3, 13, 0),
+	[MSTP312] = SH_CLK_MSTP32(&sd23_clks[SD2], SMSTPCR3, 12, 0),
+	[MSTP311] = SH_CLK_MSTP32(&sd23_clks[SD3], SMSTPCR3, 11, 0),
 	[MSTP724] = SH_CLK_MSTP32(&zg_clk, SMSTPCR7, 24, 0),
 	[MSTP723] = SH_CLK_MSTP32(&zg_clk, SMSTPCR7, 23, 0),
 	[MSTP721] = SH_CLK_MSTP32(&cp_clk, SMSTPCR7, 21, 0),
@@ -177,6 +225,10 @@ static struct clk_lookup lookups[] = {
 
 	CLKDEV_DEV_ID("pvrsrvkm", &mstp_clks[MSTP112]),
 	CLKDEV_CON_ID("g6400", &mstp_clks[MSTP112]),
+	CLKDEV_DEV_ID("sh_mobile_sdhi.0", &mstp_clks[MSTP314]),
+	CLKDEV_DEV_ID("sh_mobile_sdhi.1", &mstp_clks[MSTP313]),
+	CLKDEV_DEV_ID("sh_mobile_sdhi.2", &mstp_clks[MSTP312]),
+	CLKDEV_DEV_ID("sh_mobile_sdhi.3", &mstp_clks[MSTP311]),
 	CLKDEV_DEV_ID("rcar-du.0", &mstp_clks[MSTP724]),
 	CLKDEV_CON_ID("rcar-du.1", &mstp_clks[MSTP723]),
 	CLKDEV_CON_ID("lvds.0", &mstp_clks[MSTP726]),
@@ -224,6 +276,12 @@ void __init r8a7790_clock_init(void)
 		ret = clk_register(main_clks[k]);
 
 	if (!ret)
+		ret = sh_clk_div4_register(sd01_clks, SD01_NR, &div4_table);
+
+	if (!ret)
+		ret = sh_clk_div6_reparent_register(sd23_clks, SD23_NR);
+
+	if (!ret)
 		ret = sh_clk_mstp_register(mstp_clks, MSTP_NR);
 
 	clkdev_add_table(lookups, ARRAY_SIZE(lookups));
diff --git a/arch/arm/mach-shmobile/setup-r8a7790.c b/arch/arm/mach-shmobile/setup-r8a7790.c
index 9856e24..09bee62 100644
--- a/arch/arm/mach-shmobile/setup-r8a7790.c
+++ b/arch/arm/mach-shmobile/setup-r8a7790.c
@@ -31,6 +31,10 @@
 #include <linux/clk.h>
 #include <linux/usb/ehci_pdriver.h>
 #include <linux/usb/ohci_pdriver.h>
+#include <linux/mfd/tmio.h>
+#include <linux/mmc/sh_mobile_sdhi.h>
+#include <linux/regulator/fixed.h>
+#include <linux/regulator/machine.h>
 #include <mach/common.h>
 #include <mach/irqs.h>
 #include <mach/r8a7790.h>
@@ -380,7 +384,6 @@ static struct resource ohci2_resources[] = {
 	},
 };
 
-
 struct platform_device ohci2_device = {
 	.name	= "ohci-platform",
 	.id	= 2,
@@ -570,6 +573,196 @@ static int __init usbh_init(void)
 	return 0;
 }
 
+/* Fixed 3.3V regulator to be used by SDHI0/1/2/3 */
+static struct regulator_consumer_supply fixed3v3_power_consumers[] = {
+	REGULATOR_SUPPLY("vmmc", "sh_mobile_sdhi.0"),
+	REGULATOR_SUPPLY("vqmmc", "sh_mobile_sdhi.0"),
+	REGULATOR_SUPPLY("vmmc", "sh_mobile_sdhi.1"),
+	REGULATOR_SUPPLY("vqmmc", "sh_mobile_sdhi.1"),
+	REGULATOR_SUPPLY("vmmc", "sh_mobile_sdhi.2"),
+	REGULATOR_SUPPLY("vqmmc", "sh_mobile_sdhi.2"),
+	REGULATOR_SUPPLY("vmmc", "sh_mobile_sdhi.3"),
+	REGULATOR_SUPPLY("vqmmc", "sh_mobile_sdhi.3"),
+};
+
+static void sdhi_set_pwr(struct platform_device *pdev, int state)
+{
+	switch (pdev->id) {
+	case 0:
+		break;
+	case 2:
+		break;
+	default:
+		break;
+	}
+}
+
+static int sdhi_get_cd(struct platform_device *pdev)
+{
+	return 1;
+}
+
+static int sdhi_get_ro(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static struct resource sdhi0_resources[] = {
+	[0] = {
+		.name	= "sdhi0",
+		.start	= 0xee100000,
+		.end	= 0xee1003ff,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= gic_spi(165),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct sh_mobile_sdhi_info sdhi0_platform_data = {
+	.dma_slave_tx	= SHDMA_SLAVE_SDHI0_TX,
+	.dma_slave_rx	= SHDMA_SLAVE_SDHI0_RX,
+	.tmio_caps = MMC_CAP_SD_HIGHSPEED,
+	.tmio_caps2 = MMC_CAP2_NO_2BLKS_READ,
+	.tmio_flags	= (TMIO_MMC_WRPROTECT_DISABLE
+				| TMIO_MMC_HAS_IDLE_WAIT
+				| TMIO_MMC_BUFF_16BITACC_ACTIVE_HIGH
+				| TMIO_MMC_NO_CTL_RESET_SDIO
+				| TMIO_MMC_NO_CTL_CLK_AND_WAIT_CTL
+				| TMIO_MMC_CLK_NO_SLEEP),
+	.set_pwr	= sdhi_set_pwr,
+	.get_cd		= sdhi_get_cd,
+	.get_ro		= sdhi_get_ro,
+};
+
+static struct platform_device sdhi0_device = {
+	.name = "sh_mobile_sdhi",
+	.num_resources = ARRAY_SIZE(sdhi0_resources),
+	.resource = sdhi0_resources,
+	.id = 0,
+	.dev = {
+		.platform_data = &sdhi0_platform_data,
+	}
+};
+
+static struct resource sdhi1_resources[] = {
+	[0] = {
+		.name	= "sdhi1",
+		.start	= 0xee120000,
+		.end	= 0xee1203ff,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= gic_spi(166),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct sh_mobile_sdhi_info sdhi1_platform_data = {
+	.dma_slave_tx	= SHDMA_SLAVE_SDHI1_TX,
+	.dma_slave_rx	= SHDMA_SLAVE_SDHI1_RX,
+	.tmio_caps = MMC_CAP_SD_HIGHSPEED,
+	.tmio_caps2 = MMC_CAP2_NO_2BLKS_READ,
+	.tmio_flags	= (TMIO_MMC_WRPROTECT_DISABLE
+				| TMIO_MMC_HAS_IDLE_WAIT
+				| TMIO_MMC_BUFF_16BITACC_ACTIVE_HIGH
+				| TMIO_MMC_NO_CTL_RESET_SDIO
+				| TMIO_MMC_NO_CTL_CLK_AND_WAIT_CTL
+				| TMIO_MMC_CLK_NO_SLEEP),
+	.set_pwr	= sdhi_set_pwr,
+	.get_cd		= sdhi_get_cd,
+	.get_ro		= sdhi_get_ro,
+};
+
+static struct platform_device sdhi1_device = {
+	.name = "sh_mobile_sdhi",
+	.num_resources = ARRAY_SIZE(sdhi1_resources),
+	.resource = sdhi1_resources,
+	.id = 1,
+	.dev = {
+		.platform_data = &sdhi1_platform_data,
+	}
+};
+
+static struct resource sdhi2_resources[] = {
+	[0] = {
+		.name	= "sdhi2",
+		.start	= 0xee140000,
+		.end	= 0xee1400ff,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= gic_spi(167),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct sh_mobile_sdhi_info sdhi2_platform_data = {
+	.dma_slave_tx	= SHDMA_SLAVE_SDHI2_TX,
+	.dma_slave_rx	= SHDMA_SLAVE_SDHI2_RX,
+	.tmio_caps = MMC_CAP_SD_HIGHSPEED,
+	.tmio_caps2 = MMC_CAP2_NO_2BLKS_READ,
+	.tmio_flags	= (TMIO_MMC_WRPROTECT_DISABLE
+				| TMIO_MMC_HAS_IDLE_WAIT
+				| TMIO_MMC_NO_CTL_RESET_SDIO
+				| TMIO_MMC_NO_CTL_CLK_AND_WAIT_CTL
+				| TMIO_MMC_CHECK_ILL_FUNC
+				| TMIO_MMC_CLK_NO_SLEEP),
+	.set_pwr	= sdhi_set_pwr,
+	.get_cd		= sdhi_get_cd,
+	.get_ro		= sdhi_get_ro,
+};
+
+static struct platform_device sdhi2_device = {
+	.name = "sh_mobile_sdhi",
+	.num_resources = ARRAY_SIZE(sdhi2_resources),
+	.resource = sdhi2_resources,
+	.id = 2,
+	.dev = {
+		.platform_data = &sdhi2_platform_data,
+	}
+};
+
+static struct resource sdhi3_resources[] = {
+	[0] = {
+		.name	= "sdhi3",
+		.start	= 0xee160000,
+		.end	= 0xee1600ff,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= gic_spi(168),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct sh_mobile_sdhi_info sdhi3_platform_data = {
+	.dma_slave_tx	= SHDMA_SLAVE_SDHI3_TX,
+	.dma_slave_rx	= SHDMA_SLAVE_SDHI3_RX,
+	.tmio_caps = MMC_CAP_SD_HIGHSPEED,
+	.tmio_caps2 = MMC_CAP2_NO_2BLKS_READ,
+	.tmio_flags	= (TMIO_MMC_WRPROTECT_DISABLE
+				| TMIO_MMC_HAS_IDLE_WAIT
+				| TMIO_MMC_NO_CTL_RESET_SDIO
+				| TMIO_MMC_NO_CTL_CLK_AND_WAIT_CTL
+				| TMIO_MMC_CHECK_ILL_FUNC
+				| TMIO_MMC_CLK_NO_SLEEP),
+	.set_pwr	= sdhi_set_pwr,
+	.get_cd		= sdhi_get_cd,
+	.get_ro		= sdhi_get_ro,
+};
+
+static struct platform_device sdhi3_device = {
+	.name = "sh_mobile_sdhi",
+	.num_resources = ARRAY_SIZE(sdhi3_resources),
+	.resource = sdhi3_resources,
+	.id = 3,
+	.dev = {
+		.platform_data = &sdhi3_platform_data,
+	}
+};
+
 static struct platform_device *r8a7790_early_devices[] __initdata = {
 	&eth_device,
 	&powervr_device,
@@ -580,6 +773,10 @@ static struct platform_device *r8a7790_early_devices[] __initdata = {
 	&ohci1_device,
 	&ehci2_device,
 	&ohci2_device,
+	&sdhi0_device,
+	&sdhi1_device,
+	&sdhi2_device,
+	&sdhi3_device,
 };
 
 static struct renesas_irqc_config irqc0_data = {
@@ -607,6 +804,19 @@ void __init r8a7790_add_standard_devices(void)
 
 	r8a7790_init_pm_domain(&r8a7790_rgx);
 
+	regulator_register_fixed(0, fixed3v3_power_consumers,
+				ARRAY_SIZE(fixed3v3_power_consumers));
+
+	/* SD control registers IOCTRLn: SD pins driving ability */
+	__raw_writel(~0xAAAAAAAA, 0xE6060000);	/* PMMR */
+	__raw_writel(0xAAAAAAAA, 0xE6060060);	/* IOCTRL0 */
+	__raw_writel(~0xAAAAAAAA, 0xE6060000);	/* PMMR */
+	__raw_writel(0xAAAAAAAA, 0xE6060064);	/* IOCTRL1 */
+	__raw_writel(~0x00110000, 0xE6060000);	/* PMMR */
+	__raw_writel(0x00110000, 0xE6060088);	/* IOCTRL5 */
+	__raw_writel(~0xFFFFFFFF, 0xE6060000);	/* PMMR */
+	__raw_writel(0xFFFFFFFF, 0xE606008C);	/* IOCTRL6 */
+
 	r8a7790_register_scif(SCIFA0);
 	r8a7790_register_scif(SCIFA1);
 	r8a7790_register_scif(SCIFB0);
diff --git a/drivers/pinctrl/sh-pfc/pfc-r8a7790.c b/drivers/pinctrl/sh-pfc/pfc-r8a7790.c
index 1656915..a73d735 100644
--- a/drivers/pinctrl/sh-pfc/pfc-r8a7790.c
+++ b/drivers/pinctrl/sh-pfc/pfc-r8a7790.c
@@ -2342,6 +2342,130 @@ static const unsigned int scifb2_data_c_pins[] = {
 static const unsigned int scifb2_data_c_mux[] = {
 	SCIFB2_RXD_C_MARK, SCIFB2_TXD_C_MARK,
 };
+/* - SDHI0 ----------------------------------------------------------------- */
+static const unsigned int sdhi0_ctrl_pins[] = {
+	/* CMD, CLK */
+	RCAR_GP_PIN(3, 1), RCAR_GP_PIN(3, 0),
+};
+static const unsigned int sdhi0_ctrl_mux[] = {
+	SD0_CMD_MARK, SD0_CLK_MARK,
+};
+static const unsigned int sdhi0_data4_pins[] = {
+	/* DAT0, DAT1, DAT2, DAT3 */
+	RCAR_GP_PIN(3, 2), RCAR_GP_PIN(3, 3),
+	RCAR_GP_PIN(3, 4), RCAR_GP_PIN(3, 5),
+};
+static const unsigned int sdhi0_data4_mux[] = {
+	SD0_DAT0_MARK, SD0_DAT1_MARK,
+	SD0_DAT2_MARK, SD0_DAT3_MARK,
+};
+static const unsigned int sdhi0_cd_pins[] = {
+	/* CD */
+	RCAR_GP_PIN(3, 6),
+};
+static const unsigned int sdhi0_cd_mux[] = {
+	SD0_CD_MARK,
+};
+static const unsigned int sdhi0_wp_pins[] = {
+	/* WP */
+	RCAR_GP_PIN(3, 7),
+};
+static const unsigned int sdhi0_wp_mux[] = {
+	SD0_WP_MARK,
+};
+/* - SDHI1 ----------------------------------------------------------------- */
+static const unsigned int sdhi1_ctrl_pins[] = {
+	/* CMD, CLK */
+	RCAR_GP_PIN(3, 9), RCAR_GP_PIN(3, 8),
+};
+static const unsigned int sdhi1_ctrl_mux[] = {
+	SD1_CMD_MARK, SD1_CLK_MARK,
+};
+static const unsigned int sdhi1_data4_pins[] = {
+	/* DAT0, DAT1, DAT2, DAT3 */
+	RCAR_GP_PIN(3, 10), RCAR_GP_PIN(3, 11),
+	RCAR_GP_PIN(3, 12), RCAR_GP_PIN(3, 13),
+};
+static const unsigned int sdhi1_data4_mux[] = {
+	SD1_DAT0_MARK, SD1_DAT1_MARK,
+	SD1_DAT2_MARK, SD1_DAT3_MARK,
+};
+static const unsigned int sdhi1_cd_pins[] = {
+	/* CD */
+	RCAR_GP_PIN(3, 14),
+};
+static const unsigned int sdhi1_cd_mux[] = {
+	SD1_CD_MARK,
+};
+static const unsigned int sdhi1_wp_pins[] = {
+	/* WP */
+	RCAR_GP_PIN(3, 15),
+};
+static const unsigned int sdhi1_wp_mux[] = {
+	SD1_WP_MARK,
+};
+/* - SDHI2 ----------------------------------------------------------------- */
+static const unsigned int sdhi2_ctrl_pins[] = {
+	/* CMD, CLK */
+	RCAR_GP_PIN(3, 17), RCAR_GP_PIN(3, 16),
+};
+static const unsigned int sdhi2_ctrl_mux[] = {
+	SD2_CMD_MARK, SD2_CLK_MARK,
+};
+static const unsigned int sdhi2_data4_pins[] = {
+	/* DAT0, DAT1, DAT2, DAT3 */
+	RCAR_GP_PIN(3, 18), RCAR_GP_PIN(3, 19),
+	RCAR_GP_PIN(3, 20), RCAR_GP_PIN(3, 21),
+};
+static const unsigned int sdhi2_data4_mux[] = {
+	SD2_DAT0_MARK, SD2_DAT1_MARK,
+	SD2_DAT2_MARK, SD2_DAT3_MARK,
+};
+static const unsigned int sdhi2_cd_pins[] = {
+	/* CD */
+	RCAR_GP_PIN(3, 22),
+};
+static const unsigned int sdhi2_cd_mux[] = {
+	SD2_CD_MARK,
+};
+static const unsigned int sdhi2_wp_pins[] = {
+	/* WP */
+	RCAR_GP_PIN(3, 23),
+};
+static const unsigned int sdhi2_wp_mux[] = {
+	SD2_WP_MARK,
+};
+/* - SDHI3 ----------------------------------------------------------------- */
+static const unsigned int sdhi3_ctrl_pins[] = {
+	/* CMD, CLK */
+	RCAR_GP_PIN(3, 25), RCAR_GP_PIN(3, 24),
+};
+static const unsigned int sdhi3_ctrl_mux[] = {
+	SD3_CMD_MARK, SD3_CLK_MARK,
+};
+static const unsigned int sdhi3_data4_pins[] = {
+	/* DAT0, DAT1, DAT2, DAT3 */
+	RCAR_GP_PIN(3, 26), RCAR_GP_PIN(3, 27),
+	RCAR_GP_PIN(3, 28), RCAR_GP_PIN(3, 29),
+};
+static const unsigned int sdhi3_data4_mux[] = {
+	SD3_DAT0_MARK, SD3_DAT1_MARK,
+	SD3_DAT2_MARK, SD3_DAT3_MARK,
+};
+static const unsigned int sdhi3_cd_pins[] = {
+	/* CD */
+	RCAR_GP_PIN(3, 30),
+};
+static const unsigned int sdhi3_cd_mux[] = {
+	SD3_CD_MARK,
+};
+static const unsigned int sdhi3_wp_pins[] = {
+	/* WP */
+	RCAR_GP_PIN(3, 31),
+};
+static const unsigned int sdhi3_wp_mux[] = {
+	SD3_WP_MARK,
+};
 
 static const struct sh_pfc_pin_group pinmux_groups[] = {
 	SH_PFC_PIN_GROUP(eth_link),
@@ -2416,6 +2540,22 @@ static const struct sh_pfc_pin_group pinmux_groups[] = {
 	SH_PFC_PIN_GROUP(scifb2_clk_b),
 	SH_PFC_PIN_GROUP(scifb2_ctrl_b),
 	SH_PFC_PIN_GROUP(scifb2_data_c),
+	SH_PFC_PIN_GROUP(sdhi0_ctrl),
+	SH_PFC_PIN_GROUP(sdhi0_data4),
+	SH_PFC_PIN_GROUP(sdhi0_cd),
+	SH_PFC_PIN_GROUP(sdhi0_wp),
+	SH_PFC_PIN_GROUP(sdhi1_ctrl),
+	SH_PFC_PIN_GROUP(sdhi1_data4),
+	SH_PFC_PIN_GROUP(sdhi1_cd),
+	SH_PFC_PIN_GROUP(sdhi1_wp),
+	SH_PFC_PIN_GROUP(sdhi2_ctrl),
+	SH_PFC_PIN_GROUP(sdhi2_data4),
+	SH_PFC_PIN_GROUP(sdhi2_cd),
+	SH_PFC_PIN_GROUP(sdhi2_wp),
+	SH_PFC_PIN_GROUP(sdhi3_ctrl),
+	SH_PFC_PIN_GROUP(sdhi3_data4),
+	SH_PFC_PIN_GROUP(sdhi3_cd),
+	SH_PFC_PIN_GROUP(sdhi3_wp),
 };
 
 static const char * const eth_groups[] = {
@@ -2520,6 +2660,34 @@ static const char * const scifb2_groups[] = {
 	"scifb2_data_c",
 };
 
+static const char * const sdhi0_groups[] = {
+	"sdhi0_ctrl",
+	"sdhi0_data4",
+	"sdhi0_cd",
+	"sdhi0_wp",
+};
+
+static const char * const sdhi1_groups[] = {
+	"sdhi1_ctrl",
+	"sdhi1_data4",
+	"sdhi1_cd",
+	"sdhi1_wp",
+};
+
+static const char * const sdhi2_groups[] = {
+	"sdhi2_ctrl",
+	"sdhi2_data4",
+	"sdhi2_cd",
+	"sdhi2_wp",
+};
+
+static const char * const sdhi3_groups[] = {
+	"sdhi3_ctrl",
+	"sdhi3_data4",
+	"sdhi3_cd",
+	"sdhi3_wp",
+};
+
 static const struct sh_pfc_function pinmux_functions[] = {
 	SH_PFC_FUNCTION(eth),
 	SH_PFC_FUNCTION(intc),
@@ -2531,6 +2699,10 @@ static const struct sh_pfc_function pinmux_functions[] = {
 	SH_PFC_FUNCTION(scifb0),
 	SH_PFC_FUNCTION(scifb1),
 	SH_PFC_FUNCTION(scifb2),
+	SH_PFC_FUNCTION(sdhi0),
+	SH_PFC_FUNCTION(sdhi1),
+	SH_PFC_FUNCTION(sdhi2),
+	SH_PFC_FUNCTION(sdhi3),
 };
 
 static struct pinmux_cfg_reg pinmux_config_regs[] = {
-- 
1.7.10.4


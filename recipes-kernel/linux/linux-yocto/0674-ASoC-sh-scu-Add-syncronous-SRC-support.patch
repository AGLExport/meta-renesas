From 3f4335138a63de9fba1c31a347cf2804871b7ac4 Mon Sep 17 00:00:00 2001
From: Shunsuke Kataoka <shunsuke.kataoka.df@renesas.com>
Date: Wed, 26 Jun 2013 13:43:09 +0900
Subject: [PATCH 0674/1083] ASoC: sh: scu: Add syncronous SRC support

Supoort syncronous SRC in playback/capture via SRC.
Supoort syncronous SRC in playback via DVC.
Supoort asyncronous SRC in capture via DVC.

Signed-off-by: Shunsuke Kataoka <shunsuke.kataoka.df@renesas.com>
(cherry picked from commit 646b8536a3594ae6616f469fd54bafe0b35e8f9e)

Signed-off-by: Ryo Kataoka <ryo.kataoka.wt@renesas.com>
---
 include/sound/sh_scu.h | 35 +++++++++++++++++-
 sound/soc/sh/scu_dai.c | 98 ++++++++++++++++++++++++++++++++++++++++++--------
 2 files changed, 118 insertions(+), 15 deletions(-)

diff --git a/include/sound/sh_scu.h b/include/sound/sh_scu.h
index b7f9ab1..620e2ed 100644
--- a/include/sound/sh_scu.h
+++ b/include/sound/sh_scu.h
@@ -156,7 +156,9 @@
 #define	SRC_OUT			2
 
 /* SRC_MODE */
-#define	SRC_MODE_UF_DATA_0	(1<<16)
+#define	SRC_MODE_OUT_SYNC	(1<<25)
+#define	SRC_MODE_IN_SYNC	(1<<24)
+#define	SRC_MODE_UF_DATA	(1<<16)
 #define	SRC_MODE_SRCUSE		(1<<0)
 
 /* SRC_CONTROL */
@@ -194,11 +196,42 @@
 #define	SRCADIN_CHNUM_6		(6<<0)
 #define	SRCADIN_CHNUM_8		(8<<0)
 
+/* SRC_SRCCR */
+#define	SRC_CR_BIT16		(1<<16)
+#define	SRC_CR_BIT12		(1<<12)
+#define	SRC_CR_BIT8		(1<<8)
+#define	SRC_CR_BIT4		(1<<4)
+#define	SRC_CR_SYNC		(1<<0)
+#define	SRC_CR_ASYNC		(0<<0)
+
 /* SRC_IFSVR */
 #define	SRC_IFS_FSO	0x00400000ULL	/* 2^22 */
 #define	SRC_IFS_44KHZ	44100ULL
 #define	SRC_IFS_48KHZ	48000ULL
 
+/* SRC_BSDSR */
+#define	SRC_BSD012349_BUFDATA_1_6	(0x180 << 16)
+#define	SRC_BSD012349_BUFDATA_1_4	(0x100 << 16)
+#define	SRC_BSD012349_BUFDATA_1_3	(0x0c0 << 16)
+#define	SRC_BSD012349_BUFDATA_1_2	(0x080 << 16)
+#define	SRC_BSD012349_BUFDATA_2_3	(0x060 << 16)
+#define	SRC_BSD012349_BUFDATA_1_1	(0x040 << 16)
+#define	SRC_BSD5678_BUFDATA_1_6		(0x240 << 16)
+#define	SRC_BSD5678_BUFDATA_1_4		(0x180 << 16)
+#define	SRC_BSD5678_BUFDATA_1_3		(0x120 << 16)
+#define	SRC_BSD5678_BUFDATA_1_2		(0x0c0 << 16)
+#define	SRC_BSD5678_BUFDATA_2_3		(0x090 << 16)
+#define	SRC_BSD5678_BUFDATA_1_1		(0x060 << 16)
+
+/* SRC_BSISR */
+#define	SRC_BSI_IJECPREC		(0x10 << 16)
+#define	SRC_BSI_IJECSIZE_1_6		0x60
+#define	SRC_BSI_IJECSIZE_1_4		0x40
+#define	SRC_BSI_IJECSIZE_1_3		0x30
+#define	SRC_BSI_IJECSIZE_1_2		0x20
+#define	SRC_BSI_IJECSIZE_2_3		0x20
+#define	SRC_BSI_IJECSIZE_1_1		0x20
+
 /*
  *	DVC
  */
diff --git a/sound/soc/sh/scu_dai.c b/sound/soc/sh/scu_dai.c
index 587a0a8..eb0567e 100644
--- a/sound/soc/sh/scu_dai.c
+++ b/sound/soc/sh/scu_dai.c
@@ -189,11 +189,21 @@ static void scu_ssi_stop(int ssi_ch)
 	writel(0, (u32 *)(rinfo->ssiureg + reg));
 }
 
-static void scu_src_init(int src_ch)
+static void scu_src_init(int src_ch, unsigned int sync_sw)
 {
+	u32 val;
+
 	FNC_ENTRY
+	if (sync_sw == 1) { /* Synchronous SRC */
+		if (src_ch == 0) /* playback */
+			val = (SRC_MODE_IN_SYNC | SRC_MODE_SRCUSE);
+		else /* capture */
+			val = (SRC_MODE_OUT_SYNC | SRC_MODE_SRCUSE);
+	} else /* Asynchronous SRC */
+		val = SRC_MODE_SRCUSE;
+
 	/* SCU SRC_MODE */
-	writel(SRC_MODE_SRCUSE, (u32 *)&rinfo->scusrcreg[src_ch]->mode);
+	writel(val, (u32 *)&rinfo->scusrcreg[src_ch]->mode);
 	FNC_EXIT
 	return;
 }
@@ -207,9 +217,57 @@ static void scu_src_deinit(int src_ch)
 	return;
 }
 
-void scu_src_control(int src_ch, unsigned int rate)
+static u32 scu_src_calc_bsdsr(u32 ratio)
+{
+	u32 val;
+
+	/* check FSO/FSI ratio */
+	/*  1/4=25, 1/3=33, 1/2=50, 2/3=66, 1/1=100  */
+	if (ratio < 25)
+		val = SRC_BSD012349_BUFDATA_1_6;
+	else if (ratio >= 25 && ratio < 33)
+		val = SRC_BSD012349_BUFDATA_1_4;
+	else if (ratio >= 33 && ratio < 50)
+		val = SRC_BSD012349_BUFDATA_1_3;
+	else if (ratio >= 50 && ratio < 66)
+		val = SRC_BSD012349_BUFDATA_1_2;
+	else if (ratio >= 66 && ratio < 100)
+		val = SRC_BSD012349_BUFDATA_2_3;
+	else /* ratio >= 100 */
+		val = SRC_BSD012349_BUFDATA_1_1;
+
+	return val;
+}
+
+static u32 scu_src_calc_bsisr(u32 ratio)
+{
+	u32 val;
+
+	/* check FSO/FSI ratio */
+	/*  1/4=25, 1/3=33, 1/2=50, 2/3=66, 1/1=100  */
+	if (ratio < 25)
+		val = SRC_BSI_IJECSIZE_1_6;
+	else if (ratio >= 25 && ratio < 33)
+		val = SRC_BSI_IJECSIZE_1_4;
+	else if (ratio >= 33 && ratio < 50)
+		val = SRC_BSI_IJECSIZE_1_3;
+	else if (ratio >= 50 && ratio < 66)
+		val = SRC_BSI_IJECSIZE_1_2;
+	else if (ratio >= 66 && ratio < 100)
+		val = SRC_BSI_IJECSIZE_2_3;
+	else /* ratio >= 100 */
+		val = SRC_BSI_IJECSIZE_1_1;
+
+	/* IJECPREC */
+	val |= SRC_BSI_IJECPREC;
+
+	return val;
+}
+
+static void scu_src_control(int src_ch, unsigned int rate, unsigned int sync_sw)
 {
 	u64 val = 0;
+	u32 reg;
 
 	FNC_ENTRY
 	/* SRC Activation (SRC_SWRSR) Figure42.7 */
@@ -237,17 +295,29 @@ void scu_src_control(int src_ch, unsigned int rate)
 	writel((u32)val, (u32 *)&rinfo->srcreg[src_ch]->ifsvr);
 
 	/* SRC_SRCCR */
-	writel(0x00010111, (u32 *)&rinfo->srcreg[src_ch]->srccr);
+	writel((SRC_CR_BIT16 | SRC_CR_BIT12 | SRC_CR_BIT8 | SRC_CR_BIT4 |
+		sync_sw), (u32 *)&rinfo->srcreg[src_ch]->srccr);
 
 	/* SRC_MNFSR MINFS calculation */
 	val = div_u64(val * 98, 100);	/* 98% */
 	writel(val, (u32 *)&rinfo->srcreg[src_ch]->mnfsr);
 
-	/* SRC_BSDSR (FSO/FSI Ratio is 6-1) */
-	writel(0x00400000, (u32 *)&rinfo->srcreg[src_ch]->bsdsr);
+	/* FSO/FSI(*100) */
+#ifdef CONVERT_48KHZ
+	/* Convert example (48kHz) */
+	val = (SRC_IFS_48KHZ * 100) / rate;
+#else
+	/* Not convert example (CODEC driver converts by itself) */
+	val = 100;
+#endif
+
+	/* SRC_BSDSR (FSO/FSI Ratio is 6-1/6) */
+	reg = scu_src_calc_bsdsr((u32)val);
+	writel(reg, (u32 *)&rinfo->srcreg[src_ch]->bsdsr);
 
-	/* SRC_BSISR (FSO/FSI Ratio is 6-1) */
-	writel(0x00100020, (u32 *)&rinfo->srcreg[src_ch]->bsisr);
+	/* SRC_BSISR (FSO/FSI Ratio is 6-1/6) */
+	reg = scu_src_calc_bsisr((u32)val);
+	writel(reg, (u32 *)&rinfo->srcreg[src_ch]->bsisr);
 
 	/* SRC_SRCIR */
 	writel(0, (u32 *)&rinfo->srcreg[src_ch]->srcir);
@@ -457,8 +527,8 @@ EXPORT_SYMBOL(scu_deinit_ssi0_dvc0);
 
 void scu_init_src0(unsigned int rate)
 {
-	scu_src_init(0);
-	scu_src_control(0, rate);
+	scu_src_init(0, 1);
+	scu_src_control(0, rate, 1);
 	/* start src */
 	scu_src_start(0, SRC_INOUT);
 }
@@ -579,8 +649,8 @@ EXPORT_SYMBOL(scu_deinit_ssi1_dvc1);
 
 void scu_init_src1(unsigned int rate)
 {
-	scu_src_init(1);
-	scu_src_control(1, rate);
+	scu_src_init(1, 1);
+	scu_src_control(1, rate, 1);
 	/* start src */
 	scu_src_start(1, SRC_INOUT);
 }
@@ -596,8 +666,8 @@ EXPORT_SYMBOL(scu_deinit_src1);
 
 void scu_init_src1_dvc1(unsigned int rate)
 {
-	scu_src_init(1);
-	scu_src_control(1, rate);
+	scu_src_init(1, 0);
+	scu_src_control(1, rate, 0);
 	/* start src */
 	scu_src_start(1, SRC_INOUT);
 }
-- 
1.8.3.2


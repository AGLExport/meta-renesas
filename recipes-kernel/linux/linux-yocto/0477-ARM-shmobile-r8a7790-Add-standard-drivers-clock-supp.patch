From 465c15c63469a22abf3c7b2520532de678fb8504 Mon Sep 17 00:00:00 2001
From: Hisashi Nakamura <hisashi.nakamura.ak@renesas.com>
Date: Tue, 11 Jun 2013 13:57:02 +0900
Subject: [PATCH 0477/1083] ARM: shmobile: r8a7790: Add standard drivers clock
 support

Add the clock handling support of RGX, DU0, USB, I2C and AUDIO.

Signed-off-by: Hisashi Nakamura <hisashi.nakamura.ak@renesas.com>
(cherry picked from commit 292956870c5dbebd9a85c36aa0734dac43527c62)

Signed-off-by: Ryo Kataoka <ryo.kataoka.wt@renesas.com>
---
 arch/arm/mach-shmobile/clock-r8a7790.c | 154 +++++++++++++++++++++++++++++----
 1 file changed, 138 insertions(+), 16 deletions(-)

diff --git a/arch/arm/mach-shmobile/clock-r8a7790.c b/arch/arm/mach-shmobile/clock-r8a7790.c
index bad9bf2..1bb03f7 100644
--- a/arch/arm/mach-shmobile/clock-r8a7790.c
+++ b/arch/arm/mach-shmobile/clock-r8a7790.c
@@ -1,6 +1,7 @@
 /*
  * r8a7790 clock framework support
  *
+ * Copyright (C) 2013  Renesas Electronics Corporation
  * Copyright (C) 2013  Renesas Solutions Corp.
  * Copyright (C) 2013  Magnus Damm
  *
@@ -27,43 +28,152 @@
 #define CPG_BASE 0xe6150000
 #define CPG_LEN 0x1000
 
-#define SMSTPCR2 0xe6150138
-#define SMSTPCR7 0xe615014c
+#define SMSTPCR1	0xE6150134
+#define SMSTPCR2	0xe6150138
+#define SMSTPCR7	0xe615014c
+#define SMSTPCR9	0xE6150994
+#define SMSTPCR10	0xE6150998
 
 static struct clk_mapping cpg_mapping = {
 	.phys   = CPG_BASE,
 	.len    = CPG_LEN,
 };
 
-static struct clk p_clk = {
-	.rate	= 65000000, /* shortcut for now */
+static unsigned long d12_recalc(struct clk *clk)
+{
+	return clk->parent->rate / 12;
+}
+
+static unsigned long d4_recalc(struct clk *clk)
+{
+	return clk->parent->rate / 4;
+}
+
+static unsigned long d3_recalc(struct clk *clk)
+{
+	return clk->parent->rate / 3;
+}
+
+static unsigned long d2_recalc(struct clk *clk)
+{
+	return clk->parent->rate / 2;
+}
+
+static struct sh_clk_ops d12_clk_ops = {
+	.recalc		= d12_recalc,
+};
+
+static struct sh_clk_ops d4_clk_ops = {
+	.recalc		= d4_recalc,
+};
+
+static struct sh_clk_ops d3_clk_ops = {
+	.recalc		= d3_recalc,
+};
+
+static struct sh_clk_ops d2_clk_ops = {
+	.recalc		= d2_recalc,
+};
+
+static struct clk extal_clk = {
+	.rate		= 30000000,
+	.mapping	= &cpg_mapping,
+};
+
+static struct clk pll1_clk = {
+	.rate		= 3120000000,
 	.mapping	= &cpg_mapping,
 };
 
+static struct clk pll1_d2_clk = {
+	.ops		= &d2_clk_ops,
+	.parent		= &pll1_clk,
+};
+
+static struct clk pll1_d4_clk = {
+	.ops		= &d4_clk_ops,
+	.parent		= &pll1_clk,
+};
+
+static struct clk zg_clk = {
+	.ops		= &d3_clk_ops,
+	.parent		= &pll1_d2_clk,
+};
+
+static struct clk hp_clk = {
+	.ops		= &d12_clk_ops,
+	.parent		= &pll1_d2_clk,
+};
+
 static struct clk mp_clk = {
-	.rate	= 52000000,  /* shortcut for now */
+	.rate		= 52000000,
 	.mapping	= &cpg_mapping,
 };
 
+static struct clk cp_clk = {
+	.ops		= &d2_clk_ops,
+	.parent		= &extal_clk,
+};
+
 static struct clk *main_clks[] = {
-	&p_clk,
+	&extal_clk,
+	&pll1_clk,
+	&pll1_d2_clk,
+	&pll1_d4_clk,
+	&zg_clk,
+	&hp_clk,
 	&mp_clk,
+	&cp_clk,
 };
 
-enum { MSTP721, MSTP720,
-	MSTP216, MSTP207, MSTP206, MSTP204, MSTP203, MSTP202, MSTP_NR };
+enum {
+	MSTP112,
+	MSTP216, MSTP207, MSTP206, MSTP204, MSTP203, MSTP202,
+	MSTP724, MSTP721, MSTP720, MSTP704, MSTP703,
+	MSTP929, MSTP922,
+	MSTP1031, MSTP1030, MSTP1019, MSTP1018, MSTP1017, MSTP1015, \
+	MSTP1014, MSTP1005,
+	MSTP_NR };
+
 static struct clk mstp_clks[MSTP_NR] = {
-	[MSTP721] = SH_CLK_MSTP32(&p_clk, SMSTPCR7, 21, 0), /* SCIF0 */
-	[MSTP720] = SH_CLK_MSTP32(&p_clk, SMSTPCR7, 20, 0), /* SCIF1 */
-	[MSTP216] = SH_CLK_MSTP32(&mp_clk, SMSTPCR2, 16, 0), /* SCIFB2 */
-	[MSTP207] = SH_CLK_MSTP32(&mp_clk, SMSTPCR2, 7, 0), /* SCIFB1 */
-	[MSTP206] = SH_CLK_MSTP32(&mp_clk, SMSTPCR2, 6, 0), /* SCIFB0 */
-	[MSTP204] = SH_CLK_MSTP32(&mp_clk, SMSTPCR2, 4, 0), /* SCIFA0 */
-	[MSTP203] = SH_CLK_MSTP32(&mp_clk, SMSTPCR2, 3, 0), /* SCIFA1 */
-	[MSTP202] = SH_CLK_MSTP32(&mp_clk, SMSTPCR2, 2, 0), /* SCIFA2 */
+	[MSTP112] = SH_CLK_MSTP32(&zg_clk, SMSTPCR1, 12, 0),
+	[MSTP216] = SH_CLK_MSTP32(&mp_clk, SMSTPCR2, 16, 0),
+	[MSTP207] = SH_CLK_MSTP32(&mp_clk, SMSTPCR2, 7, 0),
+	[MSTP206] = SH_CLK_MSTP32(&mp_clk, SMSTPCR2, 6, 0),
+	[MSTP204] = SH_CLK_MSTP32(&mp_clk, SMSTPCR2, 4, 0),
+	[MSTP203] = SH_CLK_MSTP32(&mp_clk, SMSTPCR2, 3, 0),
+	[MSTP202] = SH_CLK_MSTP32(&mp_clk, SMSTPCR2, 2, 0),
+	[MSTP724] = SH_CLK_MSTP32(&zg_clk, SMSTPCR7, 24, 0),
+	[MSTP721] = SH_CLK_MSTP32(&cp_clk, SMSTPCR7, 21, 0),
+	[MSTP720] = SH_CLK_MSTP32(&cp_clk, SMSTPCR7, 20, 0),
+	[MSTP704] = SH_CLK_MSTP32(&mp_clk, SMSTPCR7, 04, 0),
+	[MSTP703] = SH_CLK_MSTP32(&mp_clk, SMSTPCR7, 03, 0),
+	[MSTP929] = SH_CLK_MSTP32(&hp_clk, SMSTPCR9, 29, 0),
+	[MSTP922] = SH_CLK_MSTP32(&hp_clk, SMSTPCR9, 22, 0),
+	[MSTP1031] = SH_CLK_MSTP32(&hp_clk, SMSTPCR10, 31, 0),
+	[MSTP1030] = SH_CLK_MSTP32(&hp_clk, SMSTPCR10, 30, 0),
+	[MSTP1019] = SH_CLK_MSTP32(&hp_clk, SMSTPCR10, 19, 0),
+	[MSTP1018] = SH_CLK_MSTP32(&hp_clk, SMSTPCR10, 18, 0),
+	[MSTP1017] = SH_CLK_MSTP32(&hp_clk, SMSTPCR10, 17, 0),
+	[MSTP1015] = SH_CLK_MSTP32(&hp_clk, SMSTPCR10, 15, 0),
+	[MSTP1014] = SH_CLK_MSTP32(&hp_clk, SMSTPCR10, 14, 0),
+	[MSTP1005] = SH_CLK_MSTP32(&hp_clk, SMSTPCR10, 05, 0),
 };
 
 static struct clk_lookup lookups[] = {
+	/* main clocks */
+	CLKDEV_CON_ID("extal_clk", &extal_clk),
+	CLKDEV_CON_ID("pll1_clk", &pll1_clk),
+	CLKDEV_CON_ID("pll1_div2_clk", &pll1_d2_clk),
+	CLKDEV_CON_ID("pll1_div4_clk", &pll1_d4_clk),
+	CLKDEV_CON_ID("zg_clk", &zg_clk),
+	CLKDEV_CON_ID("hp_clk", &hp_clk),
+	CLKDEV_CON_ID("mp_clk", &mp_clk),
+	CLKDEV_CON_ID("cp_clk", &cp_clk),
+	CLKDEV_CON_ID("peripheral_clk", &hp_clk),
+
+	CLKDEV_CON_ID("g6400", &mstp_clks[MSTP112]),
+	CLKDEV_DEV_ID("rcar-du.0", &mstp_clks[MSTP724]),
 	CLKDEV_DEV_ID("sh-sci.0", &mstp_clks[MSTP204]),
 	CLKDEV_DEV_ID("sh-sci.1", &mstp_clks[MSTP203]),
 	CLKDEV_DEV_ID("sh-sci.2", &mstp_clks[MSTP206]),
@@ -72,6 +182,18 @@ static struct clk_lookup lookups[] = {
 	CLKDEV_DEV_ID("sh-sci.5", &mstp_clks[MSTP202]),
 	CLKDEV_DEV_ID("sh-sci.6", &mstp_clks[MSTP721]),
 	CLKDEV_DEV_ID("sh-sci.7", &mstp_clks[MSTP720]),
+	CLKDEV_CON_ID("hs_usb", &mstp_clks[MSTP704]),
+	CLKDEV_CON_ID("usb_fck", &mstp_clks[MSTP703]),
+	CLKDEV_DEV_ID("i2c-rcar.2", &mstp_clks[MSTP929]),
+	CLKDEV_DEV_ID("adg", &mstp_clks[MSTP922]),
+	CLKDEV_DEV_ID("src0", &mstp_clks[MSTP1031]),
+	CLKDEV_DEV_ID("src1", &mstp_clks[MSTP1030]),
+	CLKDEV_DEV_ID("dvc0", &mstp_clks[MSTP1019]),
+	CLKDEV_DEV_ID("dvc1", &mstp_clks[MSTP1018]),
+	CLKDEV_DEV_ID("scu-pcm-audio.0", &mstp_clks[MSTP1017]),
+	CLKDEV_DEV_ID("ssi0", &mstp_clks[MSTP1015]),
+	CLKDEV_DEV_ID("ssi1", &mstp_clks[MSTP1014]),
+	CLKDEV_DEV_ID("ssi", &mstp_clks[MSTP1005]),
 };
 
 void __init r8a7790_clock_init(void)
-- 
1.8.3.2


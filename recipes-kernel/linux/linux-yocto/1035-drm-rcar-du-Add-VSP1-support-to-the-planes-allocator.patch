From 3f85919077d35def6fb8d17e2c352847bf6bdb14 Mon Sep 17 00:00:00 2001
From: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date: Fri, 21 Jun 2013 17:36:15 +0200
Subject: [PATCH 1035/1083] drm/rcar-du: Add VSP1 support to the planes
 allocator

The R8A7790 DU can source frames directly from the VSP1 devices VSPD0
and VSPD1. VSPD0 feeds DU0/1 plane 0, and VSPD1 feeds either DU2 plane 0
or DU0/1 plane 1.

Allocate the correct fixed plane when sourcing frames from VSPD0 or
VSPD1, and allocate planes in reverse index order otherwise to ensure
maximum availability of planes 0 and 1.

Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
(cherry picked from commit 1a563ceda4a3ff4e364a4310e7f726381c109564)

Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
(cherry picked from commit 266215a6b2f5d15a4cf37e0a72580ee9baba0d5f)

Signed-off-by: Ryo Kataoka <ryo.kataoka.wt@renesas.com>
---
 drivers/gpu/drm/rcar-du/rcar_du_plane.c | 70 +++++++++++++++++++++++++++------
 drivers/gpu/drm/rcar-du/rcar_du_plane.h |  8 ++++
 2 files changed, 66 insertions(+), 12 deletions(-)

diff --git a/drivers/gpu/drm/rcar-du/rcar_du_plane.c b/drivers/gpu/drm/rcar-du/rcar_du_plane.c
index 8786a02..24fdb31 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_plane.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_plane.c
@@ -50,32 +50,72 @@ static void rcar_du_plane_write(struct rcar_du_group *rgrp,
 		      data);
 }
 
-int rcar_du_plane_reserve(struct rcar_du_plane *plane,
-			  const struct rcar_du_format_info *format)
+/*
+ * The R8A7790 DU can source frames directly from the VSP1 devices VSPD0 and
+ * VSPD1. VSPD0 feeds DU0/1 plane 0, and VSPD1 feeds either DU2 plane 0 or
+ * DU0/1 plane 1.
+ *
+ * Allocate the correct fixed plane when sourcing frames from VSPD0 or VSPD1,
+ * and allocate planes in reverse index order otherwise to ensure maximum
+ * availability of planes 0 and 1.
+ *
+ * The caller is responsible for ensuring that the requested source is
+ * compatible with the DU revision.
+ */
+static int rcar_du_plane_find(struct rcar_du_group *rgrp, unsigned int count,
+			      enum rcar_du_plane_source source)
 {
-	struct rcar_du_group *rgrp = plane->group;
-	unsigned int i;
-	int ret = -EBUSY;
+	int fixed = -1;
+	int i;
+
+	if (source == RCAR_DU_PLANE_VSPD0) {
+		/* VSPD1 feeds plane 0 on DU0/1. */
+		if (rgrp->index != 0)
+			return -EINVAL;
+
+		fixed = 0;
+	} else if (source == RCAR_DU_PLANE_VSPD1) {
+		/* VSPD1 feeds plane 1 on DU0/1 or plane 0 on DU2. */
+		fixed = rgrp->index == 0 ? 1 : 0;
+	}
 
-	mutex_lock(&rgrp->planes.lock);
+	if (fixed >= 0)
+		return rgrp->planes.free & (1 << fixed) ? fixed : -EBUSY;
 
-	for (i = 0; i < ARRAY_SIZE(rgrp->planes.planes); ++i) {
+	for (i = ARRAY_SIZE(rgrp->planes.planes) - 1; i >= 0; --i) {
 		if (!(rgrp->planes.free & (1 << i)))
 			continue;
 
-		if (format->planes == 1 ||
+		if (count == 1 ||
 		    rgrp->planes.free & (1 << ((i + 1) % 8)))
 			break;
 	}
 
-	if (i == ARRAY_SIZE(rgrp->planes.planes))
+	return i < 0 ? -EBUSY : i;
+}
+
+static int __rcar_du_plane_reserve(struct rcar_du_plane *plane,
+				   const struct rcar_du_format_info *format,
+				   enum rcar_du_plane_source source)
+{
+	struct rcar_du_group *rgrp = plane->group;
+	unsigned int hwindex;
+	int ret;
+
+	mutex_lock(&rgrp->planes.lock);
+
+	ret = rcar_du_plane_find(rgrp, format->planes, source);
+	if (ret < 0)
 		goto done;
 
-	rgrp->planes.free &= ~(1 << i);
+	hwindex = ret;
+
+	rgrp->planes.free &= ~(1 << hwindex);
 	if (format->planes == 2)
-		rgrp->planes.free &= ~(1 << ((i + 1) % 8));
+		rgrp->planes.free &= ~(1 << ((hwindex + 1) % 8));
 
-	plane->hwindex = i;
+	plane->hwindex = hwindex;
+	plane->source = source;
 
 	ret = 0;
 
@@ -84,6 +124,12 @@ done:
 	return ret;
 }
 
+int rcar_du_plane_reserve(struct rcar_du_plane *plane,
+			  const struct rcar_du_format_info *format)
+{
+	return __rcar_du_plane_reserve(plane, format, RCAR_DU_PLANE_MEMORY);
+}
+
 void rcar_du_plane_release(struct rcar_du_plane *plane)
 {
 	struct rcar_du_group *rgrp = plane->group;
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_plane.h b/drivers/gpu/drm/rcar-du/rcar_du_plane.h
index f94f9ce..1535dd1 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_plane.h
+++ b/drivers/gpu/drm/rcar-du/rcar_du_plane.h
@@ -32,6 +32,12 @@ struct rcar_du_group;
 #define RCAR_DU_NUM_HW_PLANES		8
 #define RCAR_DU_NUM_SW_PLANES		9
 
+enum rcar_du_plane_source {
+	RCAR_DU_PLANE_MEMORY,
+	RCAR_DU_PLANE_VSPD0,
+	RCAR_DU_PLANE_VSPD1,
+};
+
 struct rcar_du_plane {
 	struct rcar_du_group *group;
 	struct drm_crtc *crtc;
@@ -39,6 +45,8 @@ struct rcar_du_plane {
 	bool enabled;
 
 	int hwindex;		/* 0-based, -1 means unused */
+	enum rcar_du_plane_source source;
+
 	unsigned int alpha;
 	unsigned int colorkey;
 	unsigned int zpos;
-- 
1.8.3.2


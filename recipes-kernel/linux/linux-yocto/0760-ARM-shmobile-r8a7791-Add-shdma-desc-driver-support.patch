From f8293c6e1da60d7cf4ae4d9bb6b85f28325a3fac Mon Sep 17 00:00:00 2001
From: Shunsuke Kataoka <shunsuke.kataoka.df@renesas.com>
Date: Fri, 26 Jul 2013 18:19:39 +0900
Subject: [PATCH 0760/1083] ARM: shmobile: r8a7791: Add shdma-desc driver
 support

Signed-off-by: Shunsuke Kataoka <shunsuke.kataoka.df@renesas.com>
---
 arch/arm/mach-shmobile/clock-r8a7791.c        |  10 +
 arch/arm/mach-shmobile/include/mach/r8a7791.h |   8 +-
 arch/arm/mach-shmobile/setup-r8a7791.c        | 326 ++++++++++++++++++++++++++
 3 files changed, 338 insertions(+), 6 deletions(-)

diff --git a/arch/arm/mach-shmobile/clock-r8a7791.c b/arch/arm/mach-shmobile/clock-r8a7791.c
index a142cf3..ce5adbe 100644
--- a/arch/arm/mach-shmobile/clock-r8a7791.c
+++ b/arch/arm/mach-shmobile/clock-r8a7791.c
@@ -117,12 +117,18 @@ static struct clk *main_clks[] = {
 
 /* MSTP */
 enum {
+	MSTP219, MSTP218,
+	MSTP502, MSTP501,
 	MSTP721, MSTP720,
 	MSTP931, MSTP930, MSTP929, MSTP928, MSTP927, MSTP925,
 	MSTP_NR
 };
 
 static struct clk mstp_clks[MSTP_NR] = {
+	[MSTP219] = SH_CLK_MSTP32(&hp_clk, SMSTPCR2, 19, 0),
+	[MSTP218] = SH_CLK_MSTP32(&hp_clk, SMSTPCR2, 18, 0),
+	[MSTP502] = SH_CLK_MSTP32(&hp_clk, SMSTPCR5, 2, 0),
+	[MSTP501] = SH_CLK_MSTP32(&hp_clk, SMSTPCR5, 1, 0),
 	[MSTP721] = SH_CLK_MSTP32(&p_clk, SMSTPCR7, 21, 0), /* SCIF0 */
 	[MSTP720] = SH_CLK_MSTP32(&p_clk, SMSTPCR7, 20, 0), /* SCIF1 */
 	[MSTP931] = SH_CLK_MSTP32(&hp_clk, SMSTPCR9, 31, 0),
@@ -149,6 +155,10 @@ static struct clk_lookup lookups[] = {
 	CLKDEV_CON_ID("peripheral_clk", &hp_clk),
 
 	/* MSTP */
+	CLKDEV_CON_ID("sysdmac_lo", &mstp_clks[MSTP219]),
+	CLKDEV_CON_ID("sysdmac_up", &mstp_clks[MSTP218]),
+	CLKDEV_CON_ID("audmac_lo", &mstp_clks[MSTP502]),
+	CLKDEV_CON_ID("audmac_up", &mstp_clks[MSTP501]),
 	CLKDEV_DEV_ID("sh-sci.6", &mstp_clks[MSTP721]),
 	CLKDEV_DEV_ID("sh-sci.7", &mstp_clks[MSTP720]),
 	CLKDEV_DEV_ID("i2c-rcar.0", &mstp_clks[MSTP931]),
diff --git a/arch/arm/mach-shmobile/include/mach/r8a7791.h b/arch/arm/mach-shmobile/include/mach/r8a7791.h
index df55d3f..47a22f1 100644
--- a/arch/arm/mach-shmobile/include/mach/r8a7791.h
+++ b/arch/arm/mach-shmobile/include/mach/r8a7791.h
@@ -236,12 +236,8 @@ enum {
 	SHDMA_SLAVE_SDHI1_RX,
 	SHDMA_SLAVE_SDHI2_TX,
 	SHDMA_SLAVE_SDHI2_RX,
-	SHDMA_SLAVE_SDHI3_TX,
-	SHDMA_SLAVE_SDHI3_RX,
-	SHDMA_SLAVE_MMC0_TX,
-	SHDMA_SLAVE_MMC0_RX,
-	SHDMA_SLAVE_MMC1_TX,
-	SHDMA_SLAVE_MMC1_RX,
+	SHDMA_SLAVE_MMC_TX,
+	SHDMA_SLAVE_MMC_RX,
 };
 
 #endif /* __ASM_R8A7791_H__ */
diff --git a/arch/arm/mach-shmobile/setup-r8a7791.c b/arch/arm/mach-shmobile/setup-r8a7791.c
index 63b0168..15613bb 100644
--- a/arch/arm/mach-shmobile/setup-r8a7791.c
+++ b/arch/arm/mach-shmobile/setup-r8a7791.c
@@ -347,6 +347,328 @@ static struct platform_device i2c5_device = {
 	.resource	= rcar_i2c5_res,
 };
 
+/* DMA */
+#define DMA_CHANNEL(a, b, c)	\
+{				\
+	.offset		= a,	\
+	.dmars		= b,	\
+	.dmars_bit	= 0,	\
+	.chclr_offset	= c	\
+}
+
+/* Audio-DMA */
+/*  audmal  : Audio-DMAC lower (ch0-12)  */
+/*  audmau  : Audio-DMAC upper (ch13-25) */
+static struct clk *audma_clk_get(struct platform_device *pdev)
+{
+	if (pdev->id == SHDMA_DEVID_AUDIO_LO)
+		return clk_get(NULL, "audmac_lo");
+	else if (pdev->id == SHDMA_DEVID_AUDIO_UP)
+		return clk_get(NULL, "audmac_up");
+	else
+		return NULL;
+}
+
+static const struct sh_dmadesc_slave_config r8a7791_audma_slaves[] = {
+	{
+		.slave_id	= SHDMA_SLAVE_PCM_MEM_SSI0,
+		.addr		= 0xec241008,
+		.chcr		= CHCR_TX(XMIT_SZ_32BIT),
+		.mid_rid	= 0x01,
+		.desc_mode	= 2,
+		.desc_offset	= 0x0,
+		.desc_stepnum	= 4,
+	}, {
+		.slave_id	= SHDMA_SLAVE_PCM_MEM_SRC0,
+		.addr		= 0xec000000,
+		.chcr		= CHCR_TX(XMIT_SZ_32BIT),
+		.mid_rid	= 0x85,
+		.desc_mode	= 2,
+		.desc_offset	= 0x0,
+		.desc_stepnum	= 4,
+	}, {
+		.slave_id	= SHDMA_SLAVE_PCM_SSI1_MEM,
+		.addr		= 0xec24104c,
+		.chcr		= CHCR_RX(XMIT_SZ_32BIT),
+		.mid_rid	= 0x04,
+		.desc_mode	= 2,
+		.desc_offset	= 0x100,
+		.desc_stepnum	= 4,
+	}, {
+		.slave_id	= SHDMA_SLAVE_PCM_SRC1_MEM,
+		.addr		= 0xec004400,
+		.chcr		= CHCR_RX(XMIT_SZ_32BIT),
+		.mid_rid	= 0x9c,
+		.desc_mode	= 2,
+		.desc_offset	= 0x100,
+		.desc_stepnum	= 4,
+	}, {
+		.slave_id	= SHDMA_SLAVE_PCM_CMD1_MEM,
+		.addr		= 0xec008400,
+		.chcr		= CHCR_RX(XMIT_SZ_32BIT),
+		.mid_rid	= 0xbe,
+		.desc_mode	= 2,
+		.desc_offset	= 0x100,
+		.desc_stepnum	= 4,
+	},
+};
+
+static const struct sh_dmadesc_channel r8a7791_audma_channels[] = {
+	DMA_CHANNEL(0x00008000, 0x40, 0),
+	DMA_CHANNEL(0x00008080, 0x40, 0),
+	DMA_CHANNEL(0x00008100, 0x40, 0),
+	DMA_CHANNEL(0x00008180, 0x40, 0),
+	DMA_CHANNEL(0x00008200, 0x40, 0),
+	DMA_CHANNEL(0x00008280, 0x40, 0),
+	DMA_CHANNEL(0x00008300, 0x40, 0),
+	DMA_CHANNEL(0x00008380, 0x40, 0),
+	DMA_CHANNEL(0x00008400, 0x40, 0),
+	DMA_CHANNEL(0x00008480, 0x40, 0),
+	DMA_CHANNEL(0x00008500, 0x40, 0),
+	DMA_CHANNEL(0x00008580, 0x40, 0),
+	DMA_CHANNEL(0x00008600, 0x40, 0),
+};
+
+static struct sh_dmadesc_pdata audma_platform_data = {
+	.slave		= r8a7791_audma_slaves,
+	.slave_num	= ARRAY_SIZE(r8a7791_audma_slaves),
+	.channel	= r8a7791_audma_channels,
+	.channel_num	= ARRAY_SIZE(r8a7791_audma_channels),
+	.ts_low_shift	= TS_LOW_SHIFT,
+	.ts_low_mask	= TS_LOW_BIT << TS_LOW_SHIFT,
+	.ts_high_shift	= TS_HI_SHIFT,
+	.ts_high_mask	= TS_HI_BIT << TS_HI_SHIFT,
+	.ts_shift	= dma_ts_shift,
+	.ts_shift_num	= ARRAY_SIZE(dma_ts_shift),
+	.dmaor_init	= DMAOR_DME,
+	.chclr_present	= 1,
+	.clk_get	= audma_clk_get,
+};
+
+static struct resource r8a7791_audmal_resources[] = {
+	{
+		.start	= 0xec700000,
+		.end	= 0xec70a7ff,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "error_irq",
+		.start	= gic_spi(346),
+		.end	= gic_spi(346),
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		/* IRQ for channels */
+		.start	= gic_spi(320),
+		.end	= gic_spi(332),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct resource r8a7791_audmau_resources[] = {
+	{
+		.start	= 0xec720000,
+		.end	= 0xec72a7ff,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "error_irq",
+		.start	= gic_spi(347),
+		.end	= gic_spi(347),
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		/* IRQ for channels */
+		.start	= gic_spi(333),
+		.end	= gic_spi(345),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device audmal_device = {
+	.name		= "sh-dmadesc-engine",
+	.id		= SHDMA_DEVID_AUDIO_LO,
+	.resource	= r8a7791_audmal_resources,
+	.num_resources	= ARRAY_SIZE(r8a7791_audmal_resources),
+	.dev		= {
+		.platform_data	= &audma_platform_data,
+	},
+};
+
+static struct platform_device audmau_device = {
+	.name		= "sh-dmadesc-engine",
+	.id		= SHDMA_DEVID_AUDIO_UP,
+	.resource	= r8a7791_audmau_resources,
+	.num_resources	= ARRAY_SIZE(r8a7791_audmau_resources),
+	.dev		= {
+		.platform_data	= &audma_platform_data,
+	},
+};
+
+/* SYS-DMA */
+static bool sysdma_filter(struct platform_device *pdev)
+{
+	if ((pdev->id != SHDMA_DEVID_SYS_LO) &&
+	    (pdev->id != SHDMA_DEVID_SYS_UP))
+		return false;
+	return true;
+}
+
+static struct clk *sysdma_clk_get(struct platform_device *pdev)
+{
+	if (pdev->id == SHDMA_DEVID_SYS_LO)
+		return clk_get(NULL, "sysdmac_lo");
+	else if (pdev->id == SHDMA_DEVID_SYS_UP)
+		return clk_get(NULL, "sysdmac_up");
+	else
+		return NULL;
+}
+
+static const struct sh_dmadesc_slave_config r8a7791_sysdma_slaves[] = {
+	{
+		.slave_id	= SHDMA_SLAVE_SDHI0_TX,
+		.addr		= 0xee100060,
+		.chcr		= CHCR_TX(XMIT_SZ_16BIT),
+		.mid_rid	= 0xcd,
+	}, {
+		.slave_id	= SHDMA_SLAVE_SDHI0_RX,
+		.addr		= 0xee100060 + 0x2000,
+		.chcr		= CHCR_RX(XMIT_SZ_16BIT),
+		.mid_rid	= 0xce,
+	}, {
+		.slave_id	= SHDMA_SLAVE_SDHI1_TX,
+		.addr		= 0xee120030,
+		.chcr		= CHCR_TX(XMIT_SZ_16BIT),
+		.mid_rid	= 0xc9,
+	}, {
+		.slave_id	= SHDMA_SLAVE_SDHI1_RX,
+		.addr		= 0xee120030 + 0x2000,
+		.chcr		= CHCR_RX(XMIT_SZ_16BIT),
+		.mid_rid	= 0xca,
+	}, {
+		.slave_id	= SHDMA_SLAVE_SDHI2_TX,
+		.addr		= 0xee140030,
+		.chcr		= CHCR_TX(XMIT_SZ_16BIT),
+		.mid_rid	= 0xc1,
+	}, {
+		.slave_id	= SHDMA_SLAVE_SDHI2_RX,
+		.addr		= 0xee140030 + 0x2000,
+		.chcr		= CHCR_RX(XMIT_SZ_16BIT),
+		.mid_rid	= 0xc2,
+	}, {
+		.slave_id	= SHDMA_SLAVE_MMC_TX,
+		.addr		= 0xee200034,
+		.chcr		= CHCR_TX(XMIT_SZ_32BIT),
+		.mid_rid	= 0xd1,
+	}, {
+		.slave_id	= SHDMA_SLAVE_MMC_RX,
+		.addr		= 0xee200034,
+		.chcr		= CHCR_RX(XMIT_SZ_32BIT),
+		.mid_rid	= 0xd2,
+	},
+};
+
+static const struct sh_dmadesc_channel r8a7791_sysdma_channels[] = {
+	DMA_CHANNEL(0x00008000, 0x40, 0),
+	DMA_CHANNEL(0x00008080, 0x40, 0),
+	DMA_CHANNEL(0x00008100, 0x40, 0),
+	DMA_CHANNEL(0x00008180, 0x40, 0),
+	DMA_CHANNEL(0x00008200, 0x40, 0),
+	DMA_CHANNEL(0x00008280, 0x40, 0),
+	DMA_CHANNEL(0x00008300, 0x40, 0),
+	DMA_CHANNEL(0x00008380, 0x40, 0),
+	DMA_CHANNEL(0x00008400, 0x40, 0),
+	DMA_CHANNEL(0x00008480, 0x40, 0),
+	DMA_CHANNEL(0x00008500, 0x40, 0),
+	DMA_CHANNEL(0x00008580, 0x40, 0),
+	DMA_CHANNEL(0x00008600, 0x40, 0),
+	DMA_CHANNEL(0x00008680, 0x40, 0),
+	DMA_CHANNEL(0x00008700, 0x40, 0),
+};
+
+static struct sh_dmadesc_pdata sysdma_platform_data = {
+	.slave		= r8a7791_sysdma_slaves,
+	.slave_num	= ARRAY_SIZE(r8a7791_sysdma_slaves),
+	.channel	= r8a7791_sysdma_channels,
+	.channel_num	= ARRAY_SIZE(r8a7791_sysdma_channels),
+	.ts_low_shift	= TS_LOW_SHIFT,
+	.ts_low_mask	= TS_LOW_BIT << TS_LOW_SHIFT,
+	.ts_high_shift	= TS_HI_SHIFT,
+	.ts_high_mask	= TS_HI_BIT << TS_HI_SHIFT,
+	.ts_shift	= dma_ts_shift,
+	.ts_shift_num	= ARRAY_SIZE(dma_ts_shift),
+	.dmaor_init	= DMAOR_DME,
+	.chclr_present	= 1,
+	.dma_filter	= sysdma_filter,
+	.clk_get	= sysdma_clk_get,
+};
+
+static struct resource r8a7791_sysdmal_resources[] = {
+	{
+		.start	= 0xe6700000,
+		.end	= 0xe670a7ff,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "error_irq",
+		.start	= gic_spi(197),
+		.end	= gic_spi(197),
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		/* IRQ for channels */
+		.start	= gic_spi(200),
+		.end	= gic_spi(214),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct resource r8a7791_sysdmau_resources[] = {
+	{
+		.start	= 0xe6720000,
+		.end	= 0xe672a7ff,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "error_irq",
+		.start	= gic_spi(220),
+		.end	= gic_spi(220),
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		/* IRQ for channels */
+		.start	= gic_spi(216),
+		.end	= gic_spi(219),
+		.flags	= IORESOURCE_IRQ,
+	},
+	{
+		/* IRQ for channels */
+		.start	= gic_spi(308),
+		.end	= gic_spi(318),
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device sysdmal_device = {
+	.name		= "sh-dmadesc-engine",
+	.id		= SHDMA_DEVID_SYS_LO,
+	.resource	= r8a7791_sysdmal_resources,
+	.num_resources	= ARRAY_SIZE(r8a7791_sysdmal_resources),
+	.dev		= {
+		.platform_data	= &sysdma_platform_data,
+	},
+};
+
+static struct platform_device sysdmau_device = {
+	.name		= "sh-dmadesc-engine",
+	.id		= SHDMA_DEVID_SYS_UP,
+	.resource	= r8a7791_sysdmau_resources,
+	.num_resources	= ARRAY_SIZE(r8a7791_sysdmau_resources),
+	.dev		= {
+		.platform_data	= &sysdma_platform_data,
+	},
+};
+
 static struct platform_device *r8a7791_early_devices[] __initdata = {
 	&eth_device,
 	&i2c0_device,
@@ -355,6 +677,10 @@ static struct platform_device *r8a7791_early_devices[] __initdata = {
 	&i2c3_device,
 	&i2c4_device,
 	&i2c5_device,
+	&audmal_device,
+	&audmau_device,
+	&sysdmal_device,
+	&sysdmau_device,
 };
 
 static struct renesas_irqc_config irqc0_data = {
-- 
1.8.3.2


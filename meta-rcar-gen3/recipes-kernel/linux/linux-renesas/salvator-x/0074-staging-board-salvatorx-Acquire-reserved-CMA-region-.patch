From 1044e5ea2761c0b5f8c2e7149789e00855bf3fe0 Mon Sep 17 00:00:00 2001
From: Khiem Nguyen <khiem.nguyen.xt@rvc.renesas.com>
Date: Fri, 21 Aug 2015 15:19:41 +0700
Subject: [PATCH 74/85] staging: board: salvatorx: Acquire reserved CMA region
 for MMP

This patch add board staging for Salvator-X board to acquire pointer of
reserved CMA region which will be used by MMP.

In order to acquire pointer of CMA region (not default CMA region),
need to walk through all allocated CMA regions and select largest
non-default CMA region. (the customized system might have more CMA
regions, but it's assumed that the largest ones is for MMP.)

Signed-off-by: Khiem Nguyen <khiem.nguyen.xt@rvc.renesas.com>
---
 drivers/staging/board/Makefile    |    1 +
 drivers/staging/board/salvatorx.c |   67 +++++++++++++++++++++++++++++++++++++
 2 files changed, 68 insertions(+)
 create mode 100644 drivers/staging/board/salvatorx.c

diff --git a/drivers/staging/board/Makefile b/drivers/staging/board/Makefile
index 6842745..544494c 100644
--- a/drivers/staging/board/Makefile
+++ b/drivers/staging/board/Makefile
@@ -1,3 +1,4 @@
 obj-y	:= board.o
 obj-$(CONFIG_ARCH_EMEV2)	+= kzm9d.o
 obj-$(CONFIG_ARCH_R8A7740)	+= armadillo800eva.o
+obj-$(CONFIG_ARCH_RCAR_GEN3)	+= salvatorx.o
diff --git a/drivers/staging/board/salvatorx.c b/drivers/staging/board/salvatorx.c
new file mode 100644
index 0000000..8569648
--- /dev/null
+++ b/drivers/staging/board/salvatorx.c
@@ -0,0 +1,67 @@
+/*
+ * Staging board support for SalvatorX.
+ *
+ * Copyright (C) 2015 Renesas Electronics Corp.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+
+#include <linux/kernel.h>
+#include <linux/cma.h>
+#include <linux/dma-contiguous.h>
+#include <linux/errno.h>
+#include <linux/platform_device.h>
+#include "board.h"
+#include "../../../mm/cma.h"
+
+struct cma *find_largest_nondefault_cma(void)
+{
+	unsigned long largest_size;
+	int k, largest_idx;
+
+	largest_size = 0;
+	largest_idx = -ENOENT;
+
+	for (k = 0; k < cma_area_count; k++) {
+		if (&cma_areas[k] == dma_contiguous_default_area)
+			continue;
+
+		if (cma_get_size(&cma_areas[k]) > largest_size) {
+			largest_size = cma_get_size(&cma_areas[k]);
+			largest_idx = k;
+		}
+	}
+
+	if (largest_idx != -ENOENT)
+		return &cma_areas[largest_idx];
+
+	return NULL;
+}
+
+struct cma *rcar_gen3_dma_contiguous;
+
+static void __init salvatorx_board_staging_init(void)
+{
+	phys_addr_t cma_base;
+	unsigned long cma_size;
+
+	rcar_gen3_dma_contiguous = find_largest_nondefault_cma();
+
+	if (rcar_gen3_dma_contiguous) {
+		cma_base = cma_get_base(rcar_gen3_dma_contiguous);
+		cma_size = cma_get_size(rcar_gen3_dma_contiguous) / SZ_1M;
+
+		pr_info("%s: Located CMA at %pa, size %ld MiB\n",
+			 __func__, &cma_base, cma_size);
+	}
+}
+
+board_staging("renesas,salvatorx", salvatorx_board_staging_init);
-- 
1.7.9.5

